<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2014，新的开始</title>
    <url>/2014/diary/2014-new-start/</url>
    <content><![CDATA[<p>2014年2月14日，</p>
<p>元宵节快乐，</p>
<p>情人节快！</p>
<p>不同往年，这个时候的我，还在出差中。出差的这几天（也是第一次以公司的名义出差），经历的种种，深有感触。</p>
<p>大学毕业那会，向往那种出差可以到处跑，到处玩，可以去了解一个地方的习俗等等，觉得很好玩，很开心。天天在外面，不知道是因为时间的关系，又或许是去年一年，自己成功转型为宅男，所以现在出差在外面，毫不习惯，没有归属感。</p>
<p>这几天，天天早出晚归，没时间去整理去思考一些东西，好吧，过年的时候我也没想过2014需要作哪些计划，这些都是拖延症惹的祸，但我相信，2013年是我停滞不前的一年，至此结束，2014年，重新出发。</p>
<p>2014年，</p>
<p>希望自己能培养跟工作除外的另外一些爱好，摄影除外的，让自己充实起来，而不是整天对着电脑打打游戏，看看电影，整天宅在家里。</p>
<p>在技术上，希望自己能坚持不懈，完善及完整自己的专业技术，不断学习。</p>
<p>把去年存下来欠着的书，看完，争取一个月一本书，但这不是给自己压力，而是兴趣。</p>
<p>也希望自己能够可以合理的安排好自己的时间。</p>
<p>加油吧！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>2023，新的开始</title>
    <url>/2023/diary/2023-new-start/</url>
    <content><![CDATA[<p>升级了 hexo ，重新开始。</p>
<p>node版本升级到 16.19.0；16开头的最后一个稳定版本。<br>npm版本自动更新到 8.19.3；</p>
<p>升级是为了使用vue3.0作准备和基础。学习的东西有很多，新知识也需要多更新学习。</p>
<p>加油吧！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>2018，重新出发</title>
    <url>/2018/diary/2018-and-start-again/</url>
    <content><![CDATA[<p>2017，是时候说再见了</p>
<p>按宁哥的说法，2017，我一事无成</p>
<p>无力反驳却机智如我回了俩字儿：蛰伏</p>
<p>但回想过去这一年，还是有很多想要说</p>
<p>这一年，有很长一段时间，犹豫和纠结让负面情绪充斥着我全身，温柔的人呀都悄悄替我接收了，感谢你们，感谢坤哥坤嫂，能听我唠唠嗑</p>
<p>这一年，接受自己平庸的那一刻是什么情境？（当我拥有了更开阔的眼界，更高一点的格局，我觉得曾经骄傲的我就像只井底之蛙。而我又不太愿意接受自己是平庸的）而我承认自己的工作效率低下，承认自己一直处于安稳的状态，也承认自己的碌碌无为。也许别人看来自己是相当的努力，但是，这种努力是井底之蛙的努力，工作也是浮浅工作，而不是深度工作。只有承认自己的平庸，才能脚踏实地，表现的再谦逊一些，就像乔帮主所说的那样，stay hungry stay foolish</p>
<span id="more"></span>

<p>这一年，很高兴认识你，懂得人生不只是初见，再见亦是同路人。多认识了几个朋友，也有过美好的夏天，很享受下班骑着电驴带你江边兜风的每个夜晚</p>
<p>这一年，我不叫宅男，去了户外也去了远方，身体结实且健康</p>
<p>这一年，我当了舅舅又当了叔叔，这辈分 duang 的一下子就拔起来了</p>
<p>昨天越来越多，明天越来越少，越长大时间就越宝贵。好朋友是愿意跟你一起浪费时间的人。感谢有你们</p>
<p>自古深情留不住，总是套路得人心。但我不想忘却初心，懂得感恩</p>
<p>这世上所有选择和坚持，都伴随着误解和不屑。而我不想成为任何人，我只想成为我自己。</p>
<p>我希望自己成熟稳重也孩子气，跟公仔说话也能专注。在复杂而浮躁的时代里，做一个简单又认真的人</p>
<p>帮助过我的人，谢谢你；滴水之恩，永不忘。</p>
<p>放弃我的人，没关系；是我配不上你。</p>
<p>爱我的人，谢谢你；我会珍惜。</p>
<p>讨厌我的人，请继续；没办法，我就这脾气。</p>
<p>我伤过的人，对不起，我不是故意的。</p>
<p>骗我的人也就这一回吧！自己想去吧！</p>
<p>时间真是个好东西：</p>
<p>验证了对的，见证了错的；懂得了真的，明白了假的……</p>
<p>我就是我，2018 年我会更开心。</p>
<p>感谢生命中所有的相遇！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>有点点浮躁</title>
    <url>/2019/diary/annoyance/</url>
    <content><![CDATA[<p>其实也没啥，就是莫名的浮躁，好久没有沉下心来好好思考一下未来。<br/></p>
<p>被各种琐碎的事围绕着，也许已经忘了初心。<br/></p>
<p>每天都在忙碌，就算不忙，也假装自己很忙。<br/></p>
<p>忘了自己的兴趣爱好，忘了自己思考的时间。<br/></p>
<p>突然想到《活着》里面的一句话：没有什么比活着更快乐也没有什么比活着更艰辛。<br/></p>
<p>希望自己还是能快快乐乐的，让生活变的有趣，让生活能慢下来。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>瞎写</title>
    <url>/2018/diary/blind-to-write/</url>
    <content><![CDATA[<blockquote class="blockquote-center">批评你不可怕，对你失望才可怕</blockquote>


<p>早晨被旁边地铁施工地上很有节奏的钻地声给惊醒（神奇的是，梦里也同样听到了节奏的敲打声），抬头看了下挂钟才7点多，我强迫自己再睡会儿，毕竟好不容易赚来周末懒觉的机会。</p>
<p>人往往是这样，强迫自己越不在乎的东西，却越会关注，尤其是钻地的节奏仿佛心脏跳动的频率，整得我难受。既然这样，那行吧，我就用手机的音乐来强行覆盖它。</p>
<p>还是没用，惹不起，那总还是躲得起。穿衣，刷牙，洗脸，收拾东西，出门。带上了电脑和一本五月份计划要看完的书。</p>
<span id="more"></span>

<p>这本书是柴静的《看见》，今天下午刚好读完。如果从翻看第一页算起，读这本书少说也有半年了，当然，真正开始看这本书也就上个月底的事。我有时会跟朋友说，我有松鼠癌，买回来的书只会屯着当收藏品。于是4月底突然想改改这种状态，哪怕强行自己一个月读一本技术以外的书。于是，开始计划分解，一个月30天，一本书按章节算，每天要看多少章节，粒度细到每一天的完成额度，看书时间是每天睡前躺床上的功夫。</p>
<p>还是来说说《看见》这本书吧，作者柴静是一位美女记者，剪了一个比齐肩短的发型（当时我截她照片发给朋友看，朋友说长的像鲁豫，还真的是）。这本书，也是柴静对自己在央视的一个小总结，是她个人的一些思考。我网上还特意找了这本书发布会的视频资料，发现她跟白岩松，崔永元，罗永浩都非常的要好。</p>
<p>读柴老师的书，最大感受就是必须要认真阅读，不然思路会接不上，因为她陈述这件事的时候，往往会引入另外一件事，看似无关紧要，但实际却有一定联系。书里面讲述了她采访过的一些真人真事，好多人及事其实也是我们耳有所闻的。不同于尖锐的政治时事记者，看柴静的书，不会有太多让你感到不适的地方。客观地来说，读这本书，就像是带你浅浅地经历她在央视工作的十年，十年中她用肉眼所看见的难忘的一些人物和场景。</p>
<p>书中好多次提到陈虻这个人，他是柴静的导师，看得出来她很敬重他，而且也通过陈虻这个人，让我感受到央视牛人太多，工作有多拼，不过也毕竟是央视这个大平台。书中提到有一次年会上，小崔居然能请来赵本山，郭德纲以及罗大佑，也是牛的不行。<br>在接触《看见》之前，对于柴静我算是一无所知，既然能出书，又是名记，也算是一名“成功人士”。《看见》虽然是柴静10年从业来的自传性作品，和其中我看过的名人自传《乔布斯传》比较起来，《看见》对于作者自己的成功方面和经验描述几乎没有，除了表现的谦逊之外，她运用了超多的细节描述和心理描述来还原了作者本人亲身经历的重大事件的过程。</p>
<p>坦白说，《看见》这本书的开头部分并没有吸引到我，她的一些陈述让我感到别扭，所以中间有把这本书搁置，但是庆幸的是我读完了，感受颇丰。柴静的主要工作是采访，这就要求她务必去接触一些具体的人物，具体而细微的事情，那些事情或琐碎，或热门，或悲痛。今天刚好是汶川地震十年，十年前的今天发生地震时，她在美国，看到报导之后，有一个印象非常深刻，她从美国报纸上剪下两张报道地震的照片放怀里并第一时间去了现场。柴静的每一次采访，每一个报道，即使她是简单记录，字里行间我依旧能够感受到她天生对细微事物有着深刻的体会，她把人看透，把事情看透。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读后感</tag>
      </tags>
  </entry>
  <entry>
    <title>不知所云</title>
    <url>/2014/diary/confused/</url>
    <content><![CDATA[<p>一直将屌丝自居，却不知道这屌丝一词是从何时开始由来的。印象中是我到了施强之后才有这称号的。来到施强，开始了我屌丝的生活。<br>入职后的第二周，我便搬入了公司宿舍，图的就是能省几块钱，毕竟刚毕业，作为屌丝的我，口袋里没几个钱。公司的宿舍，大学一般，但比大学少个可以晒衣服的阳台，但多了热水器和空调。宿舍四个人住满了，也结识了龙哥，春哥和谢飞。以及后来的 LT，ZLC，XXF 等。如同大学的寝室文化一样，相处的也是挺和谐的。</p>
<p>然后，问丁哥借了两个月的工资买了我想了两年多的单反，爱不释手。各种学，各种练，这也符合我红色的性格，也可以用心血来潮来形容。我感谢那时努力的自己。现在的我，拿起相机的时间真的很有限，有限…</p>
<p>然后，那一年的地下室，也是很值得回味和留恋的。搬到 ERP 那个办公室之后，我可以这么说，几乎那段时间最晚一个走的，关门关窗的那个人，都是我。那年每个夏天的夜晚，我在自己的办公桌前看书学习，看电影，做自己想做的事，一个人静静的呆在一个空旷的办公室里，真的很舒心，我其实挺享受这样的氛围，无人打扰，可以静心做事。因为知道自己跟别人不在同一起跑线上，所以我必须得努力，只有这样，也许我才会有机会追赶上其他人。那段时间，我真的一起在努力提高自己。</p>
<p>然后，到了九月份，我分手了。没错，我有过女朋友，有过一个很好的女朋友，她是一个对我很好，很温柔，很热情的女朋友。分手理由归结为一点，是我不懂珍惜。</p>
<p>然后，想起龙哥对我说的一句话，他说，晓峰，我发现了一个问题，你对每位女生都这么好，你女朋友不吃醋么？额…龙哥，我当时真不知道这是你对我的夸奖呢？还是你想提醒我什么。其实，我当时想告诉你的是，其实，我对我女朋友也真的挺好的。肯定比对认识的普通女性朋友要更好的多。但，你这么说了，我觉得也挺有道理，所以，我也有用心去好好想过这事，以及行动过。最后我发现，这并不是我所能改或者怎么样，我发现，其实我本来就是这么一个人，想改都不知道从何处着手改。其实吧，我对男性朋友也挺不错的吧。</p>
<span id="more"></span>

<p>然后，这两年时间里，我就一直是个屌丝。跟一群屌丝在一起，我开始抽烟，打游戏。</p>
<p>原本以为，抽烟只是觉得好玩，平时一起出去玩，包里带个烟，即使自己不抽，也可以拿出来分享给大家。即使会抽，也不会有烟瘾，其实我也不知道怎么样才算有烟瘾。</p>
<p>原本以为，游戏也只是跟屌丝们一起玩才觉得过瘾，一个人玩哪里有意思。想起大学时候，阿邱玩争三时，正襟危坐的样子，周末晚上游戏到深夜的状况，我现在还是蛮庆幸大学时我未曾玩过什么能上瘾的游戏。游戏这东西，哪有看电影，出去爬山来的有意思。哪怕是看书也比游戏要来的有意义。</p>
<p>然后，步入社会前听别人说的职场如战场，什么勾心斗角乱七八糟的东西，跟我都没任何关系，跟可爱同事们两年的相处时光，也如存档般记忆入了我的人生档案。九溪烧烤，夜爬宝石山，狼人杀桌游等等，都是值得回味的事儿。好聚好散，再聚一样。各位，珍重。</p>
<p>然后，回忆起 13 年，这一年时间，是我止步的一年，我觉得我没有一点点的进步，因为回忆不出来，我有哪些东西值得去纪念。我越想越怕，真怕我就这样浑浑噩噩渡过下去，所以我必须得反思。然后作出改变。</p>
<p>然后，偶尔也会寂寞，也会想牵起某人的手，带她到江边的小路上看夜景，带她到我所知道的最美的观赏点看夜色下的钱塘江，时不时传来火车车轨的轰隆作响声。我这人不懂浪漫，不会说些讨人喜欢的话（前女友就是这么说我的）。我也许满足不了物质上的追求，但我的那个她，只要她懂我，那都够了。</p>
<p>然后，想起好多人都说我，说我说话难听，很冲。那我其实想跟你说，恭喜你，因为我已经把你当成自己人，我不怕得罪你，你有什么问题我看着不爽我会很直截了当的提出来，即使让你出丑了，让你生气了，我也会说。这点，我不会作出改变。</p>
<p>然后，从小学成绩单上老师的评语上就说：“我行我素”，当时我不明白这是什么意思，现在我懂了，而且这性格我一直保留到了现在，我老大对我的评价也差不多这意思，说我“很独立性”。这个可能是因为我除了红色性格外还有黄色性格的辅色吧。关于这点，我会尽量适当的去作出改变。</p>
<p>然后，大一时的我，身体素质那个好，一下午篮球打下来，睡一觉，第二天体力立马恢复。可是现在，不一样了，成了宅男的我，对于身体的虚弱毫无警惕性，所以，我现在必须得好好锻炼身体，让自己体能有所增加，毕竟，身体是革命的本钱。</p>
<p>然后，想起自己说过的，找到女朋友就不干什么事什么事的，这些其实发现都是自己找的各种借口而已，所以，有些事并不是光靠嘴巴说说就行了。或者有些事，一旦作出了承诺，那你必须得去遵守诺言，只有这样，别人才会信任你，而不会把你当成是一个信口开河的人。而我，也最讨厌这样的人。</p>
<p>然后，也许还有很多的然后吧。但，为了上述的这么些个不知所云的然后，我总得有个收尾，而这个收尾并不是现在，而是接下来我要做的或者即将开始去做的。</p>
<p>然后，加油！！！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>招谁惹谁了？！！</title>
    <url>/2008/diary/for-who-provoked/</url>
    <content><![CDATA[<p>今天是星期二全天没课。好不容易有个睡懒觉的日子，确实不错！早上睡到自然醒，爽！起来后用火锅烧泡面吃，更爽！（嘘，不能让楼下的大妈，哦不，是阿姨知道的）。今天是个好天气，晴朗。晒被子。中午班级搞下活动(全民的，basketball)。下午看书，听音乐，写作业，喝久别了的豆奶（因为高中时常常和边上同学一起喝的，恩，还有卫龙，呵呵，也有点想念了，远处的同学们你们嘞？！）下午4点寝室成员阿邱回来叫我去吃晚饭，拒绝（因为肚子不饿），半小时后马屁文回来叫我去吃，拒绝（因为再坚持一下作业就OK）。一小时后～肚子开始痛，隐隐作痛。可能是因为一天没吃饭了，于是忍着赶紧出去吃了份蛋炒饭，可是痛的只吃了一点点～小吃店到寝室10分钟路程，我似乎走了有半个多小时，又冷又静的道路，黑漆漆的夜～回到寝室，楼梯变高了，痛继续下去。可怜的我呵呵。喝了两大杯热开水没用，躺在床上大气不敢喘。免强聊着QQ，眼睛模糊的看着镜面，现在也是，痛也仍就继续着～我招谁惹谁了？！</p>
<p><img src="/images/avatar.png"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>sa you na la 我的博客</title>
    <url>/2019/diary/goodbye-myblog/</url>
    <content><![CDATA[<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="博客域名"><a href="#博客域名" class="headerlink" title="博客域名"></a>博客域名</h3><p>webcjs.com（创建于 2012 年 05 月 08 日）</p>
<h3 id="博客性质"><a href="#博客性质" class="headerlink" title="博客性质"></a>博客性质</h3><p>&lt;meta name&#x3D;”description” content&#x3D;”<strong>WebCjs - 专注 WEB 前端开发，关注用户体验的站点。她聚合小段精华代码，收集、整理全球最新科技资讯，翻译转载国外优秀教程。她推荐国内外经典电影，并提供高清电影种子。她发布一些摄影作品和摄影技巧方面的文章。</strong>“&gt;</p>
<h3 id="博客开发"><a href="#博客开发" class="headerlink" title="博客开发"></a>博客开发</h3><ul>
<li>产品+设计+前端：Me</li>
<li>服务端：亮，小灰灰</li>
</ul>
<h3 id="博客界面"><a href="#博客界面" class="headerlink" title="博客界面"></a>博客界面</h3><p><img src="/images/blog/index.png"><br><img src="/images/blog/about.png"></p>
<span id="more"></span>

<p><img src="/images/blog/message.png"><br><img src="/images/blog/detail.png"><br><img src="/images/blog/links.png"><br><img src="/images/blog/map.png"><br><img src="/images/blog/demo.png"><br><img src="/images/blog/login.png"><br><img src="/images/blog/admin.png"><br><img src="/images/blog/admin1.png"></p>
<h2 id="博客与我"><a href="#博客与我" class="headerlink" title="博客与我"></a>博客与我</h2><p>12 年那会儿，刚毕业，感觉啥都不懂，但是做啥都挺有新鲜感。那会儿的我，还蛮喜欢遨游于各个论坛，社区（站酷，博客园，图虫等），而且也喜欢写点东西。那会儿，博客还是相当的流行，这也是我当时的一个小梦想。但是，我自己是做前端的（美工转的前端），不懂服务端的东西，但是，刚好，跟我一起上班的几个同事也是现在的好朋友，也是室友（没错，我们住在租的一套房子里，已经有 6 年时间了，比大学室友还要长。。）他们俩当时是写.net 的。于是，我就开始各种忽悠过来，帮我写服务（哈哈，这也让开始接触抽烟，没办法，每次找他谈需求，谈进度，他就说，去抽根烟边抽边聊。那我情商也不低撒，既然免费帮我做东西，那烟我肯定得孝敬着。。还得陪烟。。就差以身相许了）</p>
<p>博客这个想法虽然好久了，但真正做起来，其实也不简单。做成怎么样的博客，博客拿来干嘛用，网站设计成什么样，首页怎么展示，网站 logo 怎么设计，这些是最最基本的。然后还要申请域名，空间（那会儿还没有阿里云，就算有也非常贵）。那我就要去做竞品分析了，找过的网站不下 5 个，记得当时最喜欢的是腾讯的 CDC，当时最开始就是按照他们的风格来设计的。网站包括文章分类，文章标签等等需求，具体细节就不说啦。</p>
<p>从 12 年的 4 月份开始，利用业余时间，一直到 6 月份，设计稿+前端基本由我一个人搞定了。期间也把 logo 设计好，域名申请好。然后是域名的备案，空间的购买（我是在美橙互联上买的），也是公司同事推荐的，当时公司有个 SEO 专员，很厉害，向他学习了很多关于如果做好网站 SEO 的知识。万事俱备，就等上线。因为只是一个空间，当时是要把代码打好包放上去，其他配置的东西只能由客服来解决，这真的很不方便，只能耐心的跟客服沟通并让他来帮忙解决。这里浪费了好多时间。</p>
<p>不过，最后的最后，还是上线啦，上线时间是 12 年的 8 月 30 日。这天，还是值得记念的。博客出来的前几年，我写博文还是蛮勤快的，但是，自己写一篇满意的原创文章，还是需要花时间跟精力进去的，很可惜，我没能坚持下来，刚开始也许三天出一篇，后来，一周甚至是一个月才出一篇，再到后来，可能就是转载了。。（这一点，同学们可千万别学我）</p>
<p>一直到了今天，美橙互联发来邮件跟短信告知我，我续费 5 年的空间马上要到期了，然后我想了想，还是不继续维护了，因为我已经好久没更了。而且也浪费钱，但是，我有空的时候还是会继续写些博文，只是换了个地方，换到了一个免费的博客地址（强大的 github.pages），这里，虽然损失了 SEO，但是，这里能还 markdown 来写，还是蛮舒服的。</p>
<p><img src="/images/blog/cndns.png"><br><img src="/images/blog/seochinaz.png"><br><img src="/images/blog/seochinaz1.png"><br><img src="/images/blog/seochinaz2.png"></p>
<h2 id="sa-you-na-la-我的博客"><a href="#sa-you-na-la-我的博客" class="headerlink" title="sa you na la 我的博客"></a>sa you na la 我的博客</h2><h1>さようなら</h1>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>雪过无痕</title>
    <url>/2009/diary/have-snow-non-trace/</url>
    <content><![CDATA[<p>下雪了，在 2009 年最后的几天里下了场难得的雪，也许是为了 2009 年划上一个圆满的句号吧。这个月让我难忘。因为经历了太多，太多，承受了太多太多，2009 整个一年里，我得到的太多，顺心的事太多了，可能老天爷觉得这样不公平，所以得从我这里扣点什么掉，所以他就把我的整个 12 月当作账单了，我必须得付账。于是，一连串倒霉的事都发生在了我身上，呵呵，就连一向身体健康的我竟也感冒了，而且花了我将近一个多星期时间来恢复。还好，他留有余地，没有让我发高烧。倒霉的事过去就过去吧，至少让我成熟了。今天，也想了很多很多的事情，但至少没了前段时间那么的烦恼，其实想想前段时间也没必要想这么多的，有本书叫《想通了，就快乐》也许就是这样说的吧。把该想的，要想的都想过一遍，想清楚！把该做的，要做的也都做完了，做妥当！现在真的没什么了，因为，没做的等着我去做的也是我自己很清楚的事了，所以我不担心。</p>
<span id="more"></span>

<p>我想说，原来的施晓峰，原来的酒月先生回来啦！以前的过去就让他过去，该忘记的都忘记掉，忘掉一切的烦恼，忘掉一切不顺心的事，开开心心的比什么都重要，乐观积极向上，把什么事都往好的方面想，反正事情已经到了这地步了，想把他全部挽回已经不可能，那就只好把他造成的伤害降到最低，这点是我目前所能也只能做的。章玉健说的对，我做事是积极，可很多时候做一件事之前确实没能够好好的先想一想，考虑一下后果，这给我带来了很多很多的困扰，我想这点我必须得好好重视并改之。做事说话是要经过大脑的。我确实没能够很好的做到这点。</p>
<p>明天是新的一天，虽然离 2010 年还有三四天的时间，但我想我现在能够清醒过来还不算晚，当一个人的脑子不清醒时，不管做什么事情都觉得累，都觉得难，烦。但，清醒了，事情就简单了，容易了。想想其实也就这样做就行，不用那么复杂的想这么多事情出来。然后越想越烦，越想越害怕。Just take it easy !!! 就这样，别人怎么想怎么说由他去吧，最重要的是自己别被别人的话说到心里去。这点真的每个人都会犯同样的毛病。</p>
<p>快放假了，但属于我的奋斗才刚刚开始，只要坚持，我相信我一定会做回原来的自己，那个酒月先生。不能再像这样持续下去了。新的一年，新的气象。大家祝我成功吧！！我想，只要付出了，就一家会有回报的。虽然，努力了不一定会成功，但是不努力就一定不会成功！！！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>今夜注定无眠</title>
    <url>/2009/diary/insomnia-2009/</url>
    <content><![CDATA[<p>我是一个不喜欢写日志的人，或者说是不喜欢把日志写在这样的地方吧。我喜欢把自己的想法写在自己的日记本上，只有我一个人可以看到，把自己的感受通通都写上去，时间久了，然后再去翻翻，以及看看某年某月某日我都干了些什么，看着看着也会会心的笑笑自己以前做过的很多傻事和开心的事。尤其是跟寝室里的那一群人，一些事，一些话。</p>
<p>今夜注定无眠，反复听着梁静茹的《情歌》（刚刚校内上听到的，感觉很好听）。双休日，意味着明天可以睡个懒觉（当然我本人并不懒），意味着网是不断的，也意味着我可以好好的享受这相对美好的时间。就让我再一次的放纵自己。。。</p>
<p>人生下来就有七情六欲，不然怎么会听到孩子的哭声呢。所以，喜怒哀乐，这再也正常不过了。我不是圣人，所以我也会有心情不好的时候，但我始终相信人定胜天这词，看过李连杰演的《太级张三丰》，张天宝说过一句话，我一直都记着“我命由我不由天”。印象很深刻。每个人都有心情不好但都有调整的办法，也许是大哭一场，也许是到一个无人空旷的地方大声的喊叫一番。我也有我自己调整的办法：让自己忙碌起来，要么到操场上去跑几圈，要么就是把自己的寝室打扫的干干净净。其实，打扫自己的寝室或是自己的桌面，就像是整理自己的心情一样，桌面干净了，心情也就舒畅了。</p>
<span id="more"></span>

<p>看来真的是冬天来了，气温越来越低，外面越来越冷。这时候是感冒和感情高发的季节。有人不小心感冒了，有人不小心恋爱了，而我属于前者。冷风吹的我受不了，可日子还是得过，学习还是得继续，九周说长不长说短也不短，就这么过去了，想想自己的整个暑假，想想现在，真是一个天一个地。所以，该抓紧的还得继续。我的同学朋友们，注意身体吧，可别感冒了，这可不好受。平时多煅练煅练，身边备好感冒药，觉得不对劲了就吃一片。不要觉得无所谓，真的严重了就后悔莫及了。</p>
<p>夜深了。。。音乐还唱着同样的旋律。</p>
<p>孤单是一个人的狂欢，狂欢是一群人的孤单！！祝福你们，阿门。。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>换种心情看待</title>
    <url>/2010/diary/mood-look-upon/</url>
    <content><![CDATA[<p>夜，其实一点也不静，电风扇发出烦人的声音中还参合了一首首自己喜欢的旋律。也许现在还不算太晚，但也已经是凌晨了。想想这些天来，一直往返于两点一线之间，没得空闲。累了，也许真的累了。早起晚归，是现状。</p>
<p>看了看时间，已经快 22 点整了，赶紧催着当班经理帮我下机，万一来了一波客人，那我又不能整点下班了。然后，数钱，收拾，填些乱七八糟的东西，又得搞个十来分钟，才能刷卡下班。赶紧冲上二楼休息室换好衣服，骑上单车往寝室里赶。大街上，已没了白天的车水马龙，但偶然也会驶过一辆汽车。可是，街两旁的小吃店却还是熙熙攘攘，我却懒的理会。拐个弯，我已骑向大马路，沿着马路，已经不见了房屋和人影，有的只是还在施工的工地，和荒废的空地，显的冷冷清清。但我心情却反而平静了许多，想着今天一天的工作，想着有位大爷来买冰淇淋时，想了半天叫出了“麒麟”，让我哭笑不得。想着终于又一天过去了，时间真的是快，想着想着，忽然发现前面有一对情侣手牵着手走在人行道上，也许这就是他们所说的浪漫吧，我会心的笑笑。十点多了，也许对于那些上夜班的人来说，其实也还不算迟吧，路边公交站台，还有一个人静静的坐着等车呢。想想自己，骑着一辆并不是很难骑的自行车，花个十几分钟，就能到达寝室，而不用坐在那里等着人见人怕的公交。有的时候，心血来潮，还会兴奋的跟夜班车飚一回。抬头发现前面已出现公共自行车站，以及自己看过不知道多少回的户外广告牌，我就知道，原来我就要到校门口了。到那之前，还有一个小小的下坡，我懒的再踩脚踏板了，自然而然的让自行车滚向那边，但却也能一直滚到校门口的十字路口上，然后我会去买碗热馄饨带回寝室，美美的吃顿夜宵。生活其实很简单，就看你是如何对待了。</p>
<p>不管是烦恼还是不顺，我相信，只要你用乐观的心态去面对他，而不是去承认他，那么，我相信你所拥有的就只有好心情了。开开心心过每一天吧！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>生活还是需要充实的</title>
    <url>/2016/diary/still-need-to-enrich-the-life/</url>
    <content><![CDATA[<p>今天去美橙互联上续费了本站空间的费用，又是三年。</p>
<p>从 12 年建站到现在，四年了。奥运会，世界杯都过了一轮。</p>
<p>但看看自己的当初建站的目的，现在的激情还剩下多少。</p>
<p>以前所拥有的自制力，所拥有的那股劲头，</p>
<p>现在何去何从。</p>
<p>每次都用鼓励的话来安慰自己，</p>
<p>用三分热度，周期也许只有短短一周时间，</p>
<p>来满足目前的心里及生理需求。</p>
<span id="more"></span>

<p>这种日子，什么时候才能到劲头。</p>
<p>于是乎，</p>
<p>忘记了奋斗是个什么样的东西，</p>
<p>忘记了坚持是个什么样的东西，</p>
<p>忘记了学习是个什么样的东西。</p>
<p>某人说我有上进心，</p>
<p>我也只能呵呵一笑，</p>
<p>也话，我也只是为了让别人觉得有上进心才有的上进心吧。</p>
<p>我开始不懂我自己，</p>
<p>我开始做不了我自己。</p>
<p>已经堕落了三个月的时间，</p>
<p>错了，并不是堕落，</p>
<p>而是放弃自己。</p>
<p>我放弃了自己，</p>
<p>把自己抛弃在原始原野的大漠中，</p>
<p>让自己找不到方向，走不到尽头。</p>
<p>知道这样，但我却也还是继续 sb 式的，漫无目的的徘徊着。</p>
<p>我失去了很多，</p>
<p>失去了我所不珍惜的东西。</p>
<p>我不知道该如何去挽回，</p>
<p>因为害怕二次伤害。</p>
<p>所以，</p>
<p>我一直在克制自己。</p>
<p>所有的所有，</p>
<p>是自己最真实的报应。</p>
<p>每天，每时，每刻，</p>
<p>只说不做，只想却不行动。</p>
<p>这就是现状。</p>
<p>开始改变。</p>
<p align="right">------ 记戒游第一天</p>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>爱情</tag>
      </tags>
  </entry>
  <entry>
    <title>我还是我</title>
    <url>/2015/diary/still-me/</url>
    <content><![CDATA[<p>之前我也说过，迷茫是好事，因为熬过了迷茫期就说明你有了进步。这是一直以来我始终相信的事实，并不是为自己的迷茫找借口。</p>
<p>不知为何，今天突然感触好深，回想过去，一年多的时间以来，我到底做了些什么，有哪些进步的地方，有哪些改变，很遗憾，细想起来，少，真的很少。反而发现自己失去了好多东西。</p>
<p>以前，自己还是很有计划性的，自制力也强。喜欢看书，看电影，拍照，打球，一到周末，爬山远足是少不了的。这些个爱好对于现在的我来说，好多都被取代。现在的周末，宅取代了所有。说到宅，我也知道是因为游戏的原因，我也承认自己因为游戏改变了好多。</p>
<p>说到游戏，突然想到，到现在为止我曾为之疯狂过的事情有三件，高中那会儿，疯狂的打篮球，大学那会儿，疯狂的打台球，毕业一年后，疯狂的打游戏。为之疯狂的程度，我只想说比你想象中的还要疯狂。如果你要问我后不后悔，我可以确定的告诉你，我并不后悔。我想这就是人生吧。</p>
<p>人生要活的精彩，活的要有激情，不然到老了就没有什么可以值得回忆了。高中太远就不说了。大学那会儿，打一下午篮球，洗完澡然后直接泡在垃圾街边上的露天台球场，一打一晚上，从连握杆都不会到“杀七”。还记得有个下雨的晚上，为了打完最后一场，老板都把其他球桌收拾完等我们了，我们还在为对方撑着伞一定要分出胜负的场景么。晚上躺在寝室的床上，吹牛逼到半夜，吵的隔壁的老王过来敲门喊停。我承认好多次挑起话题的人是我，第一个睡着的人也是我。</p>
<span id="more"></span>

<p>大学时期就养成了熬夜的习惯，虽然这并不是好习惯，但我却“坚持”到了现在。一直觉得睡前躺床上看会书是多么惬意的事。</p>
<p>大学那会，自己喜欢写点日记，写点所谓的文章，还曾在暑假里写过几万字的小小说（讲的是我跟大学室友四人之间及大学期间的一些话题，一些有趣的话跟小事），这两天看看还是会不时的会心一笑，这是一笔很好的财富。现在的我，别说写字了，打开日记本一看，上一次记事已经是半年前了。</p>
<p>天呐，感觉这半年下来，值得回忆的事情真的太少太少了，周末都干嘛了，宅呗，打游戏呗。那学习了些什么？少，少之又少。</p>
<p>2015 的上半年已过，下半年是不是继续这样打酱油下去？我坚决说不。过去的不再回来，“早知道”，“要是”，“如果”这些字眼我通通不想要。我希望每天都要过的有意义，不能再把时间浪费在逛微博，聊天等上面。计划列出来，目标明确起来，为了自己，也为了将来。</p>
<p>周末坚决不能再宅，要好好的列出计划，安排好时间。躺在家中柜子里的相机，我对你说声抱歉，希望你不要嫌弃我，我马上就要回归了。很多很多的事情，需要我去完成，但要一步步的来。我起步了！</p>
<p>我还是我，勿忘初心，勤奋努力。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>不向静中参妙理，纵然颖悟也虚浮</title>
    <url>/2017/diary/to-static-and-wonderful/</url>
    <content><![CDATA[<p>围棋界著名的一句诗：弗思而应诚多败，信手频挥更鲜谋，不向静中参妙理，纵然颖悟也虚浮。</p>
<p>意思大概是平时不去打好基本功，纵然在对弈之时下出妙子也无非是偶然而已，可理解为须寂寞清静才能达到深远的境界。</p>
<p>这句话用我的白话文来说就是，不要心浮气躁，必须得脚踏实地，即使你想建造一座宏伟的高层建筑，那也必须要把根基打结实才行。就像大学期末考试一样，你考 60 分，也许只是最后两周临时抱佛脚的功劳，但是，真正这门课你的掌握度也许只有 20%，甚至都还不到。到了社会，当你面试的时候(尤其是技术相关)，也许这 60 分的能力你能骗过小部分人，但是，一个对知识体系非常清晰，沉淀很深的面试官而言，你只不过是一只三脚猫而已。</p>
<span id="more"></span>

<p>前两天我整理自己简历的同时，也参考了朋友的简历，他在自我评价部分有一个形容词让我触目惊心，真的是很扎心，他大致原话是这样的：注重基础知识和基本原理。</p>
<p>为什么我会这么说，首先也许是因为最近面试处处碰壁，而碰壁的原因是，每当面试官问我某某方案应该怎么实现时，我也许还能够勉强应对，可当面试官再问我之所以使用这个解决方案的思想时，我就一脸萌逼。没错，我更多的时候，只是知所以然而不知其所以然。说白了就是，我其实很多时候都停留在片面，只是想把这个任务做完，而不是做这个任务的同时，考虑到其他问题或者总结归纳。</p>
<p>最近在知乎上看到一个问题，接受自己平庸的那一刻是什么情境？（当我拥有了更开阔的眼界，更高一点的格局，我觉得曾经骄傲的我就像只井底之蛙。而我又不太愿意接受自己是平庸的。）结合自己最近的低落期，发现我原来早就是一只井底之蛙，而我却还相当的骄傲，也非常好的应证了不进则退的道理。而不甘心的我，一直不服气，不肯承认现状的自己，自己的平庸，自己的技术水平，居然还时不时的开始抱怨，抱怨为什么自己的薪资不如人，总觉得自己应该得到更多的回报。于是，一直在不断循环，恶性循环。</p>
<p>智能时代不可避免地带来信息碎片化。在互联网信息无时不刻的轰炸下，我们只能碎片化地工作、沟通、思考。你的一天可能是这样的：随时随地收发邮件和信息，隔不久就要刷刷微博、朋友圈，生怕错过几十个亿，错过拯救世界的机会……</p>
<p>这种碎片化的生活方式，不仅导致我们工作时间的 60%都被浪费了，也让我们失去了专注和深度思考的能力。</p>
<p>所以，承认自己的平庸吧，承认自己的工作效率低下，承认自己一直处于安稳的状态，也承认自己的碌碌无为。也许别人看来自己是相当的努力，但是，这种努力是井底之蛙的努力，工作也是浮浅工作，而不是深度工作。</p>
<p>所以，脚踏实地吧，根基真的是很重要。再谦逊一些，就像乔帮主所说的那样，stay hungry stay foolish！</p>
<h2 id="Start-all-over-again！"><a href="#Start-all-over-again！" class="headerlink" title="Start all over again！"></a>Start all over again！</h2>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>北京出差随笔</title>
    <url>/2021/diary/travel-essays-beijing/</url>
    <content><![CDATA[<blockquote>
<p>时间：2020.8-2021.5<br>事件：邮储项目<br>地点：北京市丰台区马家堡街道北甲地路2号院玺萌大厦，北京市西城区宣武门西大街129号金隅大厦<br>第一次来时住宿地点：汉庭优佳酒店(北京草桥地铁站店)<br>之后地点：草桥东路草桥欣园小区20号院2号楼2单元201室</p>
</blockquote>
<span id="more"></span>

<p>来北京做的一些事：</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><h3 id="1-门户网站-项目负责人"><a href="#1-门户网站-项目负责人" class="headerlink" title="1.门户网站 项目负责人"></a>1.门户网站 项目负责人</h3><p>时间：开发时间大概1个月<br>目的：门户网站成功上线<br>成绩：前期的需求分析，与业务老师沟通，需求文档，各种设计文档的编写，开发计划的梳理等各种事项，对文档的编写的规范性和输出有了一定的见解。门户网站的多浏览器兼容性，响应式设计也有了一定的了解。</p>
<h3 id="2-内管系统负责人"><a href="#2-内管系统负责人" class="headerlink" title="2.内管系统负责人"></a>2.内管系统负责人</h3><ul>
<li>熟悉各个业务模块对手机app的支持</li>
<li>各个内部系统间的对接</li>
<li>代码管理，使用gitlab，根据不同环境进行分配分支(dev、sit、uat、prod)，版本控制，打包封版(tag)</li>
<li>业务模块堆积后对开发性能的提升，缩短编译时间（主要是预编译）</li>
</ul>
<p>项目心得：之前作为研发为主的我，这次真正的被安排到一线，与一线的业务老师沟通需求，斗智斗勇，合理实现业务老师的需求。与实际项目开发相结合，与多方进行各种沟通（业务老师、其他系统、测试人员、运维人员、质量组），多角色之间转换。</p>
<h3 id="3-H5微应用的框架搭建"><a href="#3-H5微应用的框架搭建" class="headerlink" title="3.H5微应用的框架搭建"></a>3.H5微应用的框架搭建</h3><p>虽然之前有过一版框架的梳理，但是已经是三年前了，随着时间的推移，技术的升级和更新，老版本早已过时。经过几天的行情分析，竞品分析，最后整理出了一套适合H5微应用的框架输出给项目组使用。</p>
<hr>
<p><img src="/images/beijing/1.jpg"><br><img src="/images/beijing/2.jpg"><br><img src="/images/beijing/3.jpg"><br><img src="/images/beijing/4.jpg"><br><img src="/images/beijing/5.jpg"><br><img src="/images/beijing/6.jpg"><br><img src="/images/beijing/7.jpg"><br><img src="/images/beijing/8.jpg"><br><img src="/images/beijing/9.jpg"><br><img src="/images/beijing/10.jpg"><br><img src="/images/beijing/11.jpg"><br><img src="/images/beijing/12.jpg"><br><img src="/images/beijing/13.jpg"><br><img src="/images/beijing/14.jpg"><br><img src="/images/beijing/15.jpg"><br><img src="/images/beijing/16.jpg"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>虽说在北京呆了大半年的时间，但由于 996 的工作制，到了周末基本上就是懒在床上了，所以，也没去过几个地方。</p>
<h3 id="故宫"><a href="#故宫" class="headerlink" title="故宫"></a>故宫</h3><p><img src="/images/beijing/17.jpg"><br><img src="/images/beijing/18.jpg"><br><img src="/images/beijing/19.jpg"><br><img src="/images/beijing/20.jpg"><br><img src="/images/beijing/21.jpg"><br><img src="/images/beijing/22.jpg"><br><img src="/images/beijing/23.jpg"><br><img src="/images/beijing/24.jpg"><br><img src="/images/beijing/25.jpg"></p>
<h3 id="天安门广场"><a href="#天安门广场" class="headerlink" title="天安门广场"></a>天安门广场</h3><p><img src="/images/beijing/26.jpg"><br><img src="/images/beijing/27.jpg"><br><img src="/images/beijing/28.jpg"></p>
<h3 id="长城"><a href="#长城" class="headerlink" title="长城"></a>长城</h3><p><img src="/images/beijing/29.jpg"><br><img src="/images/beijing/30.jpg"><br><img src="/images/beijing/31.jpg"><br><img src="/images/beijing/32.jpg"><br><img src="/images/beijing/33.jpg"><br><img src="/images/beijing/34.jpg"><br><img src="/images/beijing/35.jpg"><br><img src="/images/beijing/36.jpg"><br><img src="/images/beijing/37.jpg"></p>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><img src="/images/beijing/38.jpg"><br><img src="/images/beijing/39.jpg"><br><img src="/images/beijing/40.jpg"><br><img src="/images/beijing/41.jpg"><br><img src="/images/beijing/42.jpg"><br><img src="/images/beijing/43.jpg"><br><img src="/images/beijing/44.jpg"><br><img src="/images/beijing/45.jpg"><br><img src="/images/beijing/46.jpg"><br><img src="/images/beijing/47.jpg"><br><img src="/images/beijing/48.jpg"><br><img src="/images/beijing/49.jpg"><br><img src="/images/beijing/50.jpg"><br><img src="/images/beijing/51.jpg"><br><img src="/images/beijing/52.jpg"><br><img src="/images/beijing/53.jpg"><br><img src="/images/beijing/54.jpg"><br><img src="/images/beijing/55.jpg"><br><img src="/images/beijing/56.jpg"><br><img src="/images/beijing/57.jpg"><br><img src="/images/beijing/58.jpg"><br><img src="/images/beijing/59.jpg"><br><img src="/images/beijing/60.jpg"><br><img src="/images/beijing/61.jpg"><br><img src="/images/beijing/62.jpg"><br><img src="/images/beijing/63.jpg"><br><img src="/images/beijing/64.jpg"><br><img src="/images/beijing/65.jpg"><br><img src="/images/beijing/66.jpg"><br><img src="/images/beijing/67.jpg"></p>
<br/>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>旅行</tag>
        <tag>出差</tag>
      </tags>
  </entry>
  <entry>
    <title>深圳出差随笔</title>
    <url>/2018/diary/travel-essays-shenzhen/</url>
    <content><![CDATA[<blockquote>
<p>时间：6.10-9.30<br>事件：支持银户通项目<br>地点：广东省深圳市南山区沙河街道深圳湾科技园<br>第一次来时住宿地点：深圳南山区枫叶品园公寓 ‭400 886 6633‬<br>7 月 1 日回来之后地点： 广东深圳市南山区粤海街道科伟路科苑花园 48 区 1 栋 1 单元 101 室 Ï</p>
</blockquote>
<span id="more"></span>

<p>来深圳做的一些事：</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><h3 id="1-关于-VUE-相关的培训"><a href="#1-关于-VUE-相关的培训" class="headerlink" title="1. 关于 VUE 相关的培训"></a>1. 关于 VUE 相关的培训</h3><p>时间：一周<br>目的：让培训人员对 vue 有一个基本的了解，并能使用 vue 进行项目开发<br>成绩：培训人员对 vue 处于一知半解状态（能使用，但是原理性以及系统文档不会主动去看，去了解），还是需要实际项目进行历练</p>
<h3 id="2-银户通项目基础框架的搭建（使用-vue2-0-webpack-vux）"><a href="#2-银户通项目基础框架的搭建（使用-vue2-0-webpack-vux）" class="headerlink" title="2. 银户通项目基础框架的搭建（使用 vue2.0+webpack+vux）"></a>2. 银户通项目基础框架的搭建（使用 vue2.0+webpack+vux）</h3><ul>
<li>培训文档，前端项目规范，统一编码规范等的编写</li>
<li>公共组件的开发（cfca 密码控件封装，下拉刷新上拉滚动组件等）</li>
<li>代码管理，使用 gitlab，分配合理使用分支，版本控制(master)，打包封版(tag)</li>
<li>协助配合开发人员，让项目正常进行下去</li>
</ul>
<p>项目开发心得：移动端 H5 的开发，而且还是基于小程序 webview 之中的，由于经验不足（比如，小程序与 h5 之间的通信，微信 jdk 的使用，移动端手机不同系统不同品牌的各种 bug 等），磕磕碰碰到不少问题，每个问题都需要花时间去解决去处理，最后好歹也整理出了一套属于项目的开发框架，用的还算顺手，不过后续有可能碰到的问题：手机性能相关的东西，首屏加载时间，页面渲染时间，数据存储等</p>
<h3 id="3-tinyWeb-的形成"><a href="#3-tinyWeb-的形成" class="headerlink" title="3. tinyWeb 的形成"></a>3. tinyWeb 的形成</h3><p>在深圳支持期间，将前端框架取名为 tinyweb，也熬了两三天的夜，写了相关的文档，从介绍，使用，打包等方面进行了详细的说明。<br>并且，还支持配合其他项目组进行项目的开发，比如，动态权限菜单管理，权限指令等，通过电脑远程方式进行开发。</p>
<h3 id="4-内管平台-规则平台的开发"><a href="#4-内管平台-规则平台的开发" class="headerlink" title="4. 内管平台-规则平台的开发"></a>4. 内管平台-规则平台的开发</h3><p>主要是使用 vue 开发了一个普通规则相关的组件，需求非常的繁琐复杂。大概断断续续也花了两周左右的时间，不过收获也是蛮大的，对 vue 的理解更深刻了，代码比以前更简洁</p>
<p>996 的工作制，虽然辛苦却也值得。尤其是快发布上线期间，每天搞到凌晨 2 点甚至通宵，但是一路过来，觉得还是挺有意义的。</p>
<hr>
<p><img src="/images/shenzhen/1.jpg"><br><img src="/images/shenzhen/2.jpg"><br><img src="/images/shenzhen/3.jpg"><br><img src="/images/shenzhen/4.jpg"><br><img src="/images/shenzhen/5.jpg"><br><img src="/images/shenzhen/6.jpg"><br><img src="/images/shenzhen/7.jpg"><br><img src="/images/shenzhen/8.jpg"><br><img src="/images/shenzhen/9.jpg"><br><img src="/images/shenzhen/10.jpg"><br><img src="/images/shenzhen/11.jpg"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>虽说在深圳呆了三个月左右的时间，但由于 996 的工作制，到了周末基本上就是懒在床上了，所以，也没去过几个地方。</p>
<h3 id="深圳大学"><a href="#深圳大学" class="headerlink" title="深圳大学"></a>深圳大学</h3><p><img src="/images/shenzhen/12.jpg"><br><img src="/images/shenzhen/13.jpg"><br><img src="/images/shenzhen/14.jpg"><br><img src="/images/shenzhen/15.jpg"></p>
<h3 id="大梅沙"><a href="#大梅沙" class="headerlink" title="大梅沙"></a>大梅沙</h3><p><img src="/images/shenzhen/16.jpg"><br><img src="/images/shenzhen/17.jpg"><br><img src="/images/shenzhen/18.jpg"><br><img src="/images/shenzhen/19.jpg"></p>
<h3 id="海岸城"><a href="#海岸城" class="headerlink" title="海岸城"></a>海岸城</h3><p><img src="/images/shenzhen/20.jpg"><br><img src="/images/shenzhen/21.jpg"><br><img src="/images/shenzhen/22.jpg"><br><img src="/images/shenzhen/23.jpg"><br><img src="/images/shenzhen/24.jpg"><br><img src="/images/shenzhen/25.jpg"><br><img src="/images/shenzhen/26.jpg"><br><img src="/images/shenzhen/27.jpg"><br><img src="/images/shenzhen/28.jpg"></p>
<h3 id="福地：欢乐海岸"><a href="#福地：欢乐海岸" class="headerlink" title="福地：欢乐海岸"></a>福地：欢乐海岸</h3><p><img src="/images/shenzhen/31.jpeg"><br><img src="/images/shenzhen/32.jpeg"><br><img src="/images/shenzhen/33.jpeg"><br><img src="/images/shenzhen/34.jpeg"></p>
<h3 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h3><p>最后一个周末，也正好是中秋放假，去了趟香港</p>
<p><img src="/images/shenzhen/35.jpg"><br><img src="/images/shenzhen/36.jpg"><br><img src="/images/shenzhen/37.jpg"><br><img src="/images/shenzhen/38.jpg"><br><img src="/images/shenzhen/39.jpg"><br><img src="/images/shenzhen/40.jpg"><br><img src="/images/shenzhen/41.jpg"><br><img src="/images/shenzhen/42.jpg"><br><img src="/images/shenzhen/43.jpg"><br><img src="/images/shenzhen/44.jpg"><br><img src="/images/shenzhen/45.jpg"></p>
<br/>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>旅行</tag>
        <tag>出差</tag>
      </tags>
  </entry>
  <entry>
    <title>升级 Hexo，升级主题 Next</title>
    <url>/2023/diary/update-blog-content/</url>
    <content><![CDATA[<h2 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h2><p>升级 Hexo，添加了搜索功能</p>
<h2 id="升级-Next-主题"><a href="#升级-Next-主题" class="headerlink" title="升级 Next 主题"></a>升级 Next 主题</h2><p>由 6 年前创建的更新至最新版本，添加了新的畅言评论功能</p>
<h2 id="将整个-Hexo-blog-文件夹中文件管理在-github-中"><a href="#将整个-Hexo-blog-文件夹中文件管理在-github-中" class="headerlink" title="将整个 Hexo-blog 文件夹中文件管理在 github 中"></a>将整个 Hexo-blog 文件夹中文件管理在 github 中</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并将 notes 私有化。</span></span><br><span class="line">https://github.com/jiuyuer/notes</span><br></pre></td></tr></table></figure>

<p>将更新的 <code>next</code> 主题也一同提交维护，后续如果升级维护，暂时考虑代码合并替换方式进行。</p>
<h2 id="将-hexo-命令简单化"><a href="#将-hexo-命令简单化" class="headerlink" title="将 hexo 命令简单化"></a>将 hexo 命令简单化</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;g&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo generate&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;d&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo deploy&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;s&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo server&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>开发代码规范文档</title>
    <url>/2018/encyclopedia/code-specification/</url>
    <content><![CDATA[<p>代码规范是程序员的根本，入门第一步，从规范代码开始。</p>
<p>而 <a href="https://cn.eslint.org/">ESLint</a> 就是一款专门用于 Javascript&#x2F;ESscript 代码一致性的“插件”，基于 node.js，或者你可以看做是项目构建系统的一部分。它根本目的是统一项目的代码风格规范，养成规范的写代码习惯，减少不必要的错误和隐患。</p>
<p>所以项目中引入并配置了相关的代码规范约定，用来统一代码风格和规范团队协作开发。</p>
<p>配置文件官方说明，<a href="https://cn.eslint.org/docs/user-guide/configuring">点这里</a></p>
<ol>
<li>extends 继承官方推荐的规则</li>
<li>确定规则使用的环境（可略）</li>
<li>parserOptions 属性配置，一般用于支持 es6</li>
<li>parser，globals，plugins 都可略</li>
<li>最重要的是”rule”属性，配置了我们需要的具体规则</li>
</ol>
<p>ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。</p>
<p>其中 rules 就是配置规则的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="string">&quot;规则名&quot;</span>: [规则值, 规则配置]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>规则值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;off&quot;</span> 或 <span class="number">0</span>    <span class="comment">// 关闭规则</span></span><br><span class="line"><span class="string">&quot;warn&quot;</span> 或 <span class="number">1</span>   <span class="comment">// 开启规则，使用警告级别的错误：warn (不会导致程序退出)</span></span><br><span class="line"><span class="string">&quot;error&quot;</span> 或 <span class="number">2</span>  <span class="comment">// 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span></span><br></pre></td></tr></table></figure>

<p>官方默认规则： <a href="https://cn.eslint.org/docs/rules/">点这里</a></p>
<p>下面是 tinyweb 规则，供参考(也可针对项目的不同，修改规则)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;accessor-pairs&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 强制 getter 和 setter 在对象中成对出现</span></span><br><span class="line">    <span class="string">&#x27;arrow-spacing&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制箭头函数的箭头前后使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;block-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>], <span class="comment">// 禁止或强制在代码块中开括号前和闭括号后有空格</span></span><br><span class="line">    <span class="string">&#x27;brace-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;1tbs&#x27;</span>, &#123;  <span class="comment">// 强制在代码块中使用一致的大括号风格</span></span><br><span class="line">      <span class="string">&#x27;allowSingleLine&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;camelcase&#x27;</span>: [<span class="number">0</span>, &#123;  <span class="comment">// 强制使用骆驼拼写法命名约定</span></span><br><span class="line">      <span class="string">&#x27;properties&#x27;</span>: <span class="string">&#x27;always&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>], <span class="comment">// 要求或禁止末尾逗号</span></span><br><span class="line">    <span class="string">&#x27;comma-spacing&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制在逗号前后使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;comma-style&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;last&#x27;</span>], <span class="comment">// 强制使用一致的逗号风格</span></span><br><span class="line">    <span class="string">&#x27;constructor-super&#x27;</span>: <span class="number">2</span>, <span class="comment">// 要求在构造函数中有 super() 的调用</span></span><br><span class="line">    <span class="string">&#x27;curly&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;multi-line&#x27;</span>], <span class="comment">// 强制所有控制语句使用一致的括号风格</span></span><br><span class="line">    <span class="string">&#x27;dot-location&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;property&#x27;</span>],  <span class="comment">// 强制在点号之前和之后一致的换行</span></span><br><span class="line">    <span class="string">&#x27;eol-last&#x27;</span>: <span class="number">0</span>,  <span class="comment">// 要求或禁止文件末尾存在空行</span></span><br><span class="line">    <span class="string">&#x27;eqeqeq&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;allow-null&#x27;</span>],  <span class="comment">// 要求使用 === 和 !==</span></span><br><span class="line">    <span class="string">&#x27;generator-star-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="comment">// 强制 generator 函数中 * 号周围使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;handle-callback-err&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;^(err|error)$&#x27;</span>],  <span class="comment">// 要求回调函数中有容错处理</span></span><br><span class="line">    <span class="string">&#x27;indent&#x27;</span>: [<span class="number">0</span>, <span class="number">2</span>, &#123;  <span class="comment">// 强制使用一致的缩进</span></span><br><span class="line">      <span class="string">&#x27;SwitchCase&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;jsx-quotes&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;prefer-single&#x27;</span>], <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></span><br><span class="line">    <span class="string">&#x27;key-spacing&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制在对象字面量的属性中键和值之间使用一致的间距</span></span><br><span class="line">      <span class="string">&#x27;beforeColon&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;afterColon&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;keyword-spacing&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制在关键字前后使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;new-cap&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 要求构造函数首字母大写</span></span><br><span class="line">      <span class="string">&#x27;newIsCap&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;capIsNew&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;new-parens&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 要求调用无参构造函数时有圆括号</span></span><br><span class="line">    <span class="string">&#x27;no-array-constructor&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用 Array 构造函数</span></span><br><span class="line">    <span class="string">&#x27;no-caller&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁用 arguments.caller 或 arguments.callee</span></span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用 console</span></span><br><span class="line">    <span class="string">&#x27;no-class-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止修改类声明的变量</span></span><br><span class="line">    <span class="string">&#x27;no-cond-assign&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止条件表达式中出现赋值操作符</span></span><br><span class="line">    <span class="string">&#x27;no-const-assign&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止修改 const 声明的变量</span></span><br><span class="line">    <span class="string">&#x27;no-control-regex&#x27;</span>: <span class="number">0</span>,  <span class="comment">// 禁止在正则表达式中使用控制字符</span></span><br><span class="line">    <span class="string">&#x27;no-delete-var&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止删除变量</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-args&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止 function 定义中出现重名参数</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-class-members&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止类成员中出现重复的名称</span></span><br><span class="line">    <span class="string">&#x27;no-dupe-keys&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止对象字面量中出现重复的 key</span></span><br><span class="line">    <span class="string">&#x27;no-duplicate-case&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止出现重复的 case 标签</span></span><br><span class="line">    <span class="string">&#x27;no-empty-character-class&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止在正则表达式中使用空字符集</span></span><br><span class="line">    <span class="string">&#x27;no-empty-pattern&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止使用空解构模式</span></span><br><span class="line">    <span class="string">&#x27;no-eval&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁用 eval()</span></span><br><span class="line">    <span class="string">&#x27;no-ex-assign&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></span><br><span class="line">    <span class="string">&#x27;no-extend-native&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止扩展原生类型</span></span><br><span class="line">    <span class="string">&#x27;no-extra-bind&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止不必要的 .bind() 调用</span></span><br><span class="line">    <span class="string">&#x27;no-extra-boolean-cast&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止不必要的布尔转换</span></span><br><span class="line">    <span class="string">&#x27;no-extra-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>],  <span class="comment">// 禁止不必要的括号</span></span><br><span class="line">    <span class="string">&#x27;no-fallthrough&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止 case 语句落空</span></span><br><span class="line">    <span class="string">&#x27;no-floating-decimal&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></span><br><span class="line">    <span class="string">&#x27;no-func-assign&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止对 function 声明重新赋值</span></span><br><span class="line">    <span class="string">&#x27;no-implied-eval&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止使用类似 eval() 的方法</span></span><br><span class="line">    <span class="string">&#x27;no-inner-declarations&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;functions&#x27;</span>],  <span class="comment">// 禁止在嵌套的块中出现变量声明或 function 声明</span></span><br><span class="line">    <span class="string">&#x27;no-invalid-regexp&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止 RegExp 构造函数中存在无效的正则表达式字符串</span></span><br><span class="line">    <span class="string">&#x27;no-irregular-whitespace&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止在字符串和注释之外不规则的空白</span></span><br><span class="line">    <span class="string">&#x27;no-iterator&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁用 __iterator__ 属性</span></span><br><span class="line">    <span class="string">&#x27;no-label-var&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 不允许标签与变量同名</span></span><br><span class="line">    <span class="string">&#x27;no-labels&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 禁用标签语句</span></span><br><span class="line">      <span class="string">&#x27;allowLoop&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;allowSwitch&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-lone-blocks&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用不必要的嵌套块</span></span><br><span class="line">    <span class="string">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止空格和 tab 的混合缩进</span></span><br><span class="line">    <span class="string">&#x27;no-multi-spaces&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止使用多个空格</span></span><br><span class="line">    <span class="string">&#x27;no-multi-str&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止使用多行字符串</span></span><br><span class="line">    <span class="string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 禁止出现多行空行</span></span><br><span class="line">      <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-native-reassign&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-negated-in-lhs&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;no-new-object&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁用 Object 的构造函数</span></span><br><span class="line">    <span class="string">&#x27;no-new-require&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止调用 require 时使用 new 操作符</span></span><br><span class="line">    <span class="string">&#x27;no-new-symbol&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止 Symbolnew 操作符和 new 一起使用</span></span><br><span class="line">    <span class="string">&#x27;no-new-wrappers&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></span><br><span class="line">    <span class="string">&#x27;no-obj-calls&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止把全局对象作为函数调用</span></span><br><span class="line">    <span class="string">&#x27;no-octal&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用八进制字面量</span></span><br><span class="line">    <span class="string">&#x27;no-octal-escape&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止在字符串中使用八进制转义序列</span></span><br><span class="line">    <span class="string">&#x27;no-path-concat&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止对 __dirname 和 __filename 进行字符串连接</span></span><br><span class="line">    <span class="string">&#x27;no-proto&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用 __proto__ 属性</span></span><br><span class="line">    <span class="string">&#x27;no-redeclare&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止多次声明同一变量</span></span><br><span class="line">    <span class="string">&#x27;no-regex-spaces&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止正则表达式字面量中出现多个空格</span></span><br><span class="line">    <span class="string">&#x27;no-return-assign&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;except-parens&#x27;</span>], <span class="comment">// 禁止在 return 语句中使用赋值语句</span></span><br><span class="line">    <span class="string">&#x27;no-self-assign&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止自我赋值</span></span><br><span class="line">    <span class="string">&#x27;no-self-compare&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止自身比较</span></span><br><span class="line">    <span class="string">&#x27;no-sequences&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用逗号操作符</span></span><br><span class="line">    <span class="string">&#x27;no-shadow-restricted-names&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止将标识符定义为受限的名字</span></span><br><span class="line">    <span class="string">&#x27;no-spaced-func&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;no-sparse-arrays&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用稀疏数组</span></span><br><span class="line">    <span class="string">&#x27;no-this-before-super&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止在构造函数中，在调用 super() 之前使用 this 或 super</span></span><br><span class="line">    <span class="string">&#x27;no-throw-literal&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止抛出异常字面量</span></span><br><span class="line">    <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用行尾空格</span></span><br><span class="line">    <span class="string">&#x27;no-undef&#x27;</span>: <span class="number">0</span>,  <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class="line">    <span class="string">&#x27;no-undef-init&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止将变量初始化为 undefined</span></span><br><span class="line">    <span class="string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止出现令人困惑的多行表达式</span></span><br><span class="line">    <span class="string">&#x27;no-unmodified-loop-condition&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用一成不变的循环条件</span></span><br><span class="line">    <span class="string">&#x27;no-unneeded-ternary&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 禁止可以在有更简单的可替代的表达式时使用三元操作符</span></span><br><span class="line">      <span class="string">&#x27;defaultAssignment&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-unreachable&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁止在return、throw、continue 和 break 语句之后出现不可达代码</span></span><br><span class="line">    <span class="string">&#x27;no-unsafe-finally&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止在 finally 语句块中出现控制流语句</span></span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: [<span class="number">2</span>, &#123; <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">      <span class="string">&#x27;vars&#x27;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;args&#x27;</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;no-useless-call&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></span><br><span class="line">    <span class="string">&#x27;no-useless-computed-key&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止在对象中使用不必要的计算属性</span></span><br><span class="line">    <span class="string">&#x27;no-useless-constructor&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 禁用不必要的构造函数</span></span><br><span class="line">    <span class="string">&#x27;no-useless-escape&#x27;</span>: <span class="number">0</span>, <span class="comment">// 禁用不必要的转义字符</span></span><br><span class="line">    <span class="string">&#x27;no-whitespace-before-property&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁止属性前有空白</span></span><br><span class="line">    <span class="string">&#x27;no-with&#x27;</span>: <span class="number">2</span>, <span class="comment">// 禁用 with 语句</span></span><br><span class="line">    <span class="string">&#x27;one-var&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></span><br><span class="line">      <span class="string">&#x27;initialized&#x27;</span>: <span class="string">&#x27;never&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;operator-linebreak&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;after&#x27;</span>, &#123;  <span class="comment">// 强制操作符使用一致的换行符</span></span><br><span class="line">      <span class="string">&#x27;overrides&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;before&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;:&#x27;</span>: <span class="string">&#x27;before&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;padded-blocks&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],  <span class="comment">// 要求或禁止块内填充</span></span><br><span class="line">    <span class="string">&#x27;quotes&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;single&#x27;</span>, &#123; <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class="line">      <span class="string">&#x27;avoidEscape&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;allowTemplateLiterals&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;semi&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],  <span class="comment">// 要求或禁止使用分号代替 ASI</span></span><br><span class="line">    <span class="string">&#x27;semi-spacing&#x27;</span>: [<span class="number">2</span>, &#123; <span class="comment">// 强制分号之前和之后使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;space-before-blocks&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>], <span class="comment">// 强制在块之前使用一致的空格</span></span><br><span class="line">    <span class="string">&#x27;space-before-function-paren&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],  <span class="comment">// 强制在 function的左括号之前使用一致的空格</span></span><br><span class="line">    <span class="string">&#x27;space-in-parens&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],  <span class="comment">// 强制在圆括号内使用一致的空格</span></span><br><span class="line">    <span class="string">&#x27;space-infix-ops&#x27;</span>: <span class="number">2</span>, <span class="comment">// 要求操作符周围有空格</span></span><br><span class="line">    <span class="string">&#x27;space-unary-ops&#x27;</span>: [<span class="number">2</span>, &#123;  <span class="comment">// 强制在一元操作符前后使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;words&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;nonwords&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;spaced-comment&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, &#123; <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></span><br><span class="line">      <span class="string">&#x27;markers&#x27;</span>: [<span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;eslint&#x27;</span>, <span class="string">&#x27;eslint-disable&#x27;</span>, <span class="string">&#x27;*package&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;,&#x27;</span>]</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;template-curly-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>], <span class="comment">// 要求或禁止模板字符串中的嵌入表达式周围空格的使用</span></span><br><span class="line">    <span class="string">&#x27;use-isnan&#x27;</span>: <span class="number">2</span>, <span class="comment">// 要求使用 isNaN() 检查 NaN</span></span><br><span class="line">    <span class="string">&#x27;valid-typeof&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></span><br><span class="line">    <span class="string">&#x27;wrap-iife&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;any&#x27;</span>],  <span class="comment">// 要求 IIFE 使用括号括起来</span></span><br><span class="line">    <span class="string">&#x27;yield-star-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;both&#x27;</span>],  <span class="comment">// 强制在 yield* 表达式中 * 周围使用空格</span></span><br><span class="line">    <span class="string">&#x27;yoda&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>], <span class="comment">// 要求或禁止 “Yoda” 条件</span></span><br><span class="line">    <span class="string">&#x27;prefer-const&#x27;</span>: <span class="number">2</span>,  <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class="line">    <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="number">2</span> : <span class="number">0</span>, <span class="comment">// 禁用 debugger</span></span><br><span class="line">    <span class="string">&#x27;object-curly-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, &#123; <span class="comment">// 强制在大括号中使用一致的空格</span></span><br><span class="line">      <span class="attr">objectsInObjects</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;array-bracket-spacing&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>] <span class="comment">// 强制数组方括号中使用一致的空格</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>组件库文档</title>
    <url>/2018/encyclopedia/component-library-document/</url>
    <content><![CDATA[<p>后续会有一个以上的项目需要维护，多个项目需要开发类似功能的情况，开发一个通用的组件库并维护是需要的。</p>
<p>目前 tinyweb 中引入了第三方 UI 组件库 **<a href="http://element-cn.eleme.io/#/zh-CN/component/installation">element-ui</a>**（因为组件本身已经有很完善的文档说明，所以不再重复编写）</p>
<p>但是考虑到后续要开发维护属于自己的组件库，并且解耦第三方 UI 库，以及考虑到开源协作相关</p>
<p>列了个方案如下：</p>
<p>参考 element 以及 iview 的风格，构建开发属于自己的组件库项目（单独立项），git 仓库管理并设置分支策略，有对应组件文档维护以及详细 demo 展示，至于如何开源协作，需要一起沟通出相应的规范及流程。</p>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>开发规范</title>
    <url>/2018/encyclopedia/development-of-specification/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个软件的生命周期中，80%的花费在于维护。几乎没有任何一个软件，在其整个生命同期中，均由最初的开发人员来维护。</p>
<h2 id="规范目的"><a href="#规范目的" class="headerlink" title="规范目的"></a>规范目的</h2><p>改善软件的可读性、提高代码质量、确保代码的高可维护性。包括但不限于各类资源文件的定义、命名规则、代码规范。侧重于技术要求，所有开发人员在实际开发及维护中必须严格遵守。各模块组长有责任督小组成员遵从规范，并定期做抽查，确保模块质量。对于不符合规范的代码，责令相关开发人员改正。</p>
<h2 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h2><ul>
<li>安装好 IDE（vscode），需要安装对应的插件，setting 文件的配置，具体看开发快速上手文档。</li>
<li>TAB 键用两个空格代替（WINDOWS 下 TAB 键占四个空格，LINUX 下 TAB 键占八个空格）。</li>
<li>文件内容编码均统一为 UTF-8。</li>
</ul>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>遵循以下规则</p>
<ol>
<li>有意义的名词、简短、具有可读性</li>
<li>以小写开头 camelCase (小驼峰式命名)</li>
<li>公共组件命名以公司名称简拼为命名空间(yht-xx.vue)，后续升级为组件库形式</li>
<li>文件夹命名主要以功能模块代表命名 camelCase (小驼峰式命名)</li>
</ol>
<blockquote>
<p>同时还需要注意：必须符合自定义元素规范: 使用连字符分隔单词，切勿使用保留字。yht- 前缀作为命名空间: 如果非常通用的话可使用一个单词来命名，这样可以方便于其它项目里复用。</p>
</blockquote>
<span id="more"></span>

<h2 id="结构化规范"><a href="#结构化规范" class="headerlink" title="结构化规范"></a>结构化规范</h2><h3 id="框架目录结构"><a href="#框架目录结构" class="headerlink" title="框架目录结构"></a>框架目录结构</h3><p>我们已经为你生成了一个完整的开发框架，提供了涵盖中后台开发的各类功能和坑位，下面是整个项目的目录结构。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── build                      // 构建相关</span><br><span class="line">├── config                     // 配置相关</span><br><span class="line">├── src                        // 源代码</span><br><span class="line">│   ├── api                    // 所有请求</span><br><span class="line">│   ├── assets                 // 本地静态资源</span><br><span class="line">│   ├── components             // 通用组件</span><br><span class="line">│   ├── directive              // 全局指令</span><br><span class="line">│   ├── filters                // 全局 filter</span><br><span class="line">│   ├── icons                  // 项目所有 svg icons</span><br><span class="line">│   ├── lang                   // 国际化 language</span><br><span class="line">│   ├── router                 // 路由</span><br><span class="line">│   ├── store                  // 全局store管理</span><br><span class="line">│   ├── styles                 // 全局样式</span><br><span class="line">│   ├── utils                  // 工具库</span><br><span class="line">│   ├── vendor                 // 公用vendor</span><br><span class="line">│   ├── views                  // 业务组件</span><br><span class="line">│   ├── main.js                // 入口 加载组件 初始化等</span><br><span class="line">│   └── permission.js          // 权限管理</span><br><span class="line">├── static                     // 第三方不打包资源</span><br><span class="line">│   └── Tinymce                // 富文本</span><br><span class="line">├── .babelrc                   // babel-loader 配置</span><br><span class="line">├── eslintrc.js                // eslint 配置项</span><br><span class="line">├── .gitignore                 // git 忽略项</span><br><span class="line">├── favicon.ico                // favicon图标</span><br><span class="line">├── index.html                 // html模板</span><br><span class="line">└── package.json               // package.json</span><br></pre></td></tr></table></figure>

<h3 id="vue-文件基本结构"><a href="#vue-文件基本结构" class="headerlink" title=".vue 文件基本结构"></a>.vue 文件基本结构</h3><p>单文件组件应该总是让 <code>&lt;template&gt;</code> 、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>标签的顺序保持一致。且 <code>&lt;style&gt;</code> 要放在最后，因为另外两个标签至少要有一个。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--必须在div中编写页面--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明语言，并且添加scoped--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个重要的事情值得注意，关注点分离不等于文件类型分离。在现代 UI 开发中，我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。</p>
<p>即便你不喜欢单文件组件，你仍然可以把 JavaScript、CSS 分离成独立的文件然后做到热重载和预编译。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- my-component.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>This will be pre-compiled<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./my-component.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">&quot;./my-component.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="vue-文件方法声明顺序-建议"><a href="#vue-文件方法声明顺序-建议" class="headerlink" title=".vue 文件方法声明顺序(建议)"></a>.vue 文件方法声明顺序(建议)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- components</span><br><span class="line">- props</span><br><span class="line">- data</span><br><span class="line">- created</span><br><span class="line">- mounted</span><br><span class="line">- activited</span><br><span class="line">- update</span><br><span class="line">- beforeRouteUpdate</span><br><span class="line">- metods</span><br><span class="line">- filter</span><br><span class="line">- computed</span><br><span class="line">- watch</span><br></pre></td></tr></table></figure>

<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><p>代码注释在一个项目的后期维护中显的尤为重要，所以我们要为每一个被复用的组件编写组件使用说明，为组件中每一个方法编写方法说明。</p>
<p>以下情况，务必添加注释</p>
<ol>
<li>公共组件使用说明</li>
<li>各组件中重要函数或者类说明</li>
<li>复杂的业务逻辑处理说明</li>
<li>特殊情况的代码处理说明,对于代码中特殊用途的变量、存在临界值、函数中使用的 hack、使用了某种算法或思路等需要进行注释描述</li>
<li>注释块必须以 &#x2F;**（至少两个星号）开头**&#x2F;；</li>
<li>单行注释使用 &#x2F;&#x2F;；</li>
</ol>
<h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">普通方法一般使用单行注释; <span class="comment">// 来说明该方法主要作用</span></span><br></pre></td></tr></table></figure>

<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件使用说明，和调用说明</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@module</span> 组件存放位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 组件描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 组件作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年11月06日17:22:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; [title]    - 参数说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; [columns]  - 参数说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span> 调用示例</span></span><br><span class="line"><span class="comment"> * &lt;yht-table :title=&quot;title&quot; :columns=&quot;columns&quot; :tableData=&quot;tableData&quot;&gt;&lt;/yht-table&gt;</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>优秀的项目源码，即使是多人开发，看代码也如出一人之手。统一的编码规范，可使代码更易于阅读，易于理解，易于维护。尽量按照 <strong>ESLint</strong> 格式要求编写代码</p>
<ol>
<li><p>使用 ES6 风格编码源码</p>
<ul>
<li><p>坚持使用大写驼峰命名法来命名类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ExceptionService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">exceptionService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义变量使用 let，定义常量使用 const</p>
</li>
<li><p>使用 export，import 模块化</p>
</li>
</ul>
</li>
<li><p>组件 props 定义应该尽量详细</p>
<ul>
<li>提供默认值</li>
<li>使用 type 属性校验类型</li>
<li>使用 props 之前先检查该 prop 是否存在</li>
</ul>
</li>
<li><p>谨慎使用 this.$refs</p>
</li>
<li><p>为 v-for 设置键值，总是用 key 配合 v-for。</p>
</li>
<li><p>调试信息 console.log() debugger 使用完及时删除</p>
</li>
<li><p>模板中的组件名使用 kebab-case (短横线分隔命名)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> <span class="comment">&lt;!--使用 kebab-case (短横线分隔命名)--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--反例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">myComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">myComponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多个属性的元素<br>多个属性的元素应该分多行撰写，每个属性一行。（可在 vscode 中直接配置）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;[https://vuejs.org/images/logo.png](https://vuejs.org/images/logo.png)&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;Vue Logo&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">foo</span>=<span class="string">&quot;a&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bar</span>=<span class="string">&quot;b&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">baz</span>=<span class="string">&quot;c&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--反例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;[https://vuejs.org/images/logo.png](https://vuejs.org/images/logo.png)&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Vue Logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">foo</span>=<span class="string">&quot;a&quot;</span>  <span class="attr">bar</span>=<span class="string">&quot;b&quot;</span> <span class="attr">baz</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指令缩写<br>都用指令缩写 (用 : 表示 v-bind: 和用 @ 表示 v-on:)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正例</span></span><br><span class="line">&lt;input</span><br><span class="line">@input=<span class="string">&quot;onInput&quot;</span></span><br><span class="line">@focus=<span class="string">&quot;onFocus&quot;</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反例</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">v-bind:value</span>=<span class="string">&quot;newTodoText&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">:placeholder</span>=<span class="string">&quot;newTodoInstructions&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>样式<br>所有全局样式都在 @&#x2F;src&#x2F;styles 目录下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── styles</span><br><span class="line">│   ├── btn.scss                 # 按钮样式</span><br><span class="line">│   ├── element-ui.scss          # 全局自定义 element-ui 样式</span><br><span class="line">│   ├── index.scss               # 全局通用样式</span><br><span class="line">│   ├── mixin.scss               # 全局mixin</span><br><span class="line">│   ├── sidebar.scss             # sidebar css</span><br><span class="line">│   ├── transition.scss          # vue transition 动画</span><br><span class="line">│   └── variables.scss           # 全局变量</span><br></pre></td></tr></table></figure>

<p>常见的工作流程是，全局样式都写在 src&#x2F;styles 目录下，每个页面自己对应的样式都写在自己的 .vue 文件之中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* global styles */</span></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"><span class="comment">/* local styles */</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>开发规范</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架选型说明</title>
    <url>/2018/encyclopedia/how-to-choose-the-front-frame/</url>
    <content><![CDATA[<p>目前 vue，angular，react 这三个前端框架非常流行，但是在很多场景下，我们在选择技术路线的时候总是很纠结，不知道该选择哪一种，这个问题的本质是对框架的优劣认识不清晰。在这里不详细对比技术细节，因为技术细节差异不是我们选择框架的首要因素。</p>
<h2 id="如何选择框架"><a href="#如何选择框架" class="headerlink" title="如何选择框架"></a>如何选择框架</h2><p>我们该怎样选择一个框架，我觉得可以从以下几个角度去分析对比几个框架的优劣</p>
<ul>
<li><strong>这个框架的使用场景。</strong>比如是否同时适用于 Web 端和原生 App 或者快速搭建一个小型项目等等。</li>
<li><strong>团队当下的技术能力。</strong>学习新框架的时间成本，后期团队维护的成本。</li>
<li><strong>框架能解决哪些问题。</strong>优劣势是什么。</li>
<li><strong>框架的生态系统。</strong>是否有繁荣的生态系统供我们学习使用。</li>
<li><strong>跨平台性。</strong>是否需要同时支持移动端和 pc 端</li>
</ul>
<h2 id="框架的共同点"><a href="#框架的共同点" class="headerlink" title="框架的共同点"></a>框架的共同点</h2><p>都有很好的性能(这里的 angular 指的是 2.0+)，都支持数据绑定，组件等基本功能。</p>
<span id="more"></span>

<h2 id="框架的不同点"><a href="#框架的不同点" class="headerlink" title="框架的不同点"></a>框架的不同点</h2><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>这是一个给开发者一整套解决方案的框架，相对于 vue 和 react，angular 不需要搭配其他库，就可以构建出一个大型项目，但它并不太适合开发小型应用。下面是 angular 的一些特点~</p>
<p>1.<strong>这是一个完整的框架拥有良好的项目结构。</strong>通常情况下，我们编写的 js 代码是没有正规的项目结构的，是因为在小型项目中对结构的要求很低，但是在大型项目中则完全不同，比如 webapp 中 ionic 框架就是用的 Angular 作为内核个人觉得也是看中了 angular 的这个特点。但是会丢失一些灵活性。</p>
<p>2.<strong>拥有自己的构建工具。</strong>在 Angular-CLI 使用打包编译，生成组件等都有相应的命令行，非常方便快捷，虽然 vue 和 React 也有构建工具，但是局限性很大，需要配合其他构建工具，个人觉得 Angular-CLI 足够强大，这也是一套完整的框架带来的红利，不必在选择库上浪费时间。</p>
<p>3.<strong>体积较大。</strong>虽然在 angular2+ 之后使用了 AOT 和 tree-shaking，但是相对于其他轻量级框架来说还是略显臃肿。加载较慢</p>
<p>4.<strong>学习成本较高。</strong>需要很多基础概念和使用较复杂的 api 接口，入门相对困难。而且 angular2.0+ 用的是 ts 语言，需要对 ts 语言有一定程度的了解。而且从 angular1.x 升级到 2.x 的时候框架几乎是重写了一遍，导致之前用 angular1 写的程序维护起来比较困难。如果是新入门学习 angular，推荐从 2 开始学起。</p>
<p>5.<strong>跨平台优势。</strong>有 ionic 等使用 angular 作为内核的框架，如果是用 angular 开发 pc 端+移动端的跨平台开发，组件服务指令都可以复用，这对开发者来说是非常不错的，react 有 React Native 同样也是跨平台非常不错。vue 有与阿里合作 Weex，但是目前来说跟前两个还有很大差距。</p>
<p>6.<strong>生态系统庞大。</strong>angular 和 react 都有庞大的生态系统，vue 相对较差</p>
<blockquote>
<p>总结：它是一个成熟完善的框架，而 React 和 Vue 只是一个 UI 组件库。angular 适用于大型项目，所以会有一些代价，比如学习成本高，如果你只是想用到组件，数据绑定等基础功能去开发一个小型应用，那么 angular 不是最好的选择</p>
</blockquote>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>特点：<strong>灵活，构建项目可大可小，学习成本低，性能好，适合开发小型应用。</strong>这里不是说它不能构建大型应用，只不过个人觉得你如果想开发一个尽可能的小和快的应用，我建议使用 vue</p>
<p>1.<strong>灵活性。</strong>它从不限制你用什么样的代码组织结构，更加随意。</p>
<p>2.<strong>实用性。</strong>它虽然很轻量，但却拥有很强大的实用性，数据绑定，计算属性侦听器，组件等常用功能不次于 angular。在很多方面比 angular 更容易上手</p>
<p>3.<strong>体积小。</strong>vue 相对于 angular 体积小了很多。</p>
<p>4.<strong>学习成本较低。</strong>你只需要有良好的 HTML 和 JavaScript 基础就可以通过官网上的阅读指南快速投入开发，相比于 react 和 angular 都有很大的优势，angular 需要学习各种各样的 api，理解各种基础概念，还有学习 ts 语言才能进行开发；react 需要知道 JSX 和 ES2015 还需要学习构建系统等</p>
<p>5.<strong>跨平台优势较差。</strong>与其他两个框架相比，跨平台优势较差，虽然与阿里合作 weex 但是差距还很大。</p>
<blockquote>
<p>总结：轻量，学习成本低等等，优点很多。缺点就是他的生态社区跟 angular 和 react 目前还差很远</p>
</blockquote>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>个人觉得 React 和 Vue 有很多相似之处</p>
<blockquote>
<ul>
<li>轻量级，响应式组件</li>
<li>都利用  “Virtual DOM” 虚拟 DOM 实现快速渲染</li>
<li>都服务器端渲染</li>
<li>易于集成路由工具，打包工具以及状态管理工具</li>
<li>优秀的支持和社区</li>
</ul>
</blockquote>
<p>1.<strong>灵活性。</strong>这点跟 vue 很像，React 可以与已知的库或框架很好地配合。</p>
<p>2.<strong>生态圈强大。</strong>因为 react 把路由库和状态管理库交给社区维护，虽然相对来说这些方面不如 vue 和 angular 的官方发布稳定，但是造就了生态圈的繁荣。</p>
<p>3.<strong>跨平台优势。</strong>React Native 能使你用相同的组件模型编写有本地渲染能力的 APP (iOS 和 Android)。能同时跨多平台开发，类似于 ionic。</p>
<p>4.<strong>学习成本一般。</strong>在你开始学 React 前，你需要知道 JSX 和 ES2015，相对于 vue 是学习难度高，相对于 angular 来说比较好学，如果要构架大型应用，它的生态是相对复杂，个人觉得没有 angular 官方发布的文档清晰。</p>
<blockquote>
<p>总结：react 和 vue 一样只关注视图层，只是一个 UI 组件库，这跟 angular 有本质的区别，如果 react 想开发大型应用需要配合第三方库，他的跨平台优势和生态优势大于 vue。</p>
</blockquote>
<p>还有其他的一些前端框架像 Ember，Knockout 等就不一一列举了，可以 <a href="https://cn.vuejs.org/v2/guide/comparison.html">点这里</a> 查看他们的差异</p>
<h2 id="选择-Vue-理由"><a href="#选择-Vue-理由" class="headerlink" title="选择 Vue 理由"></a>选择 Vue 理由</h2><p>首先我想说，没有哪个框架是绝对的好与不好，只有合适与否。之所以选择 Vue 的理由有如下几个：</p>
<ol>
<li>学习成本较低，原因在上文中已说明</li>
<li>模板和渲染函数的弹性选择</li>
<li>简单的语法及项目创建</li>
<li>更快的渲染速度和更小的体积</li>
</ol>
<h2 id="第三方-UI-组件库选择"><a href="#第三方-UI-组件库选择" class="headerlink" title="第三方 UI 组件库选择"></a>第三方 UI 组件库选择</h2><p><strong>Element UI VS iView</strong></p>
<p>主要从以下几个方面来做对比</p>
<blockquote>
<ul>
<li>使用率（npm 平均下载频率，组件数量，star, issue…)</li>
<li>API 风格</li>
<li>打包优化</li>
<li>与设计师友好性</li>
</ul>
</blockquote>
<h3 id="使用率（npm-平均下载频率，组件数量，star-issue…"><a href="#使用率（npm-平均下载频率，组件数量，star-issue…" class="headerlink" title="使用率（npm 平均下载频率，组件数量，star, issue…)"></a>使用率（npm 平均下载频率，组件数量，star, issue…)</h3><p>npm 下载次数及 issue，目前明显未解决 bug 遗留数量,</p>
<blockquote>
<p>PS：这个应该跟生态也有关系， 用 element 的人多，发现 bug 的几率更大，另外 iview 里面有很多 issue 写明是 UI 组件的问题 但未标明是确切的 bug</p>
<p><img src="/images/baike/iview.png"><br><img src="/images/baike/element-ui.png"></p>
</blockquote>
<p><strong>以上截图截止时间：2018.11.1</strong><br>以上对比其实可以看出， element 开发者团队规模大于 iview 团队，其结果就是 无论是提交代码频率， 发布版本数量 都比 iview 更强！</p>
<p>其他数据不一一列举了，可以去 github 上自行查看<br><strong><a href="https://github.com/iview/iview">iview</a></strong><br><strong><a href="https://github.com/ElemeFE/element">element</a></strong></p>
<blockquote>
<p>结论：</p>
<ul>
<li>element 生态更好，使用频率远超过 iview ,element 开发团队实力更强</li>
<li>一些小众组件上各有所长 整体 iview 更丰富（时间轴，加载进度条，气泡卡片，BackTop，图钉等）</li>
<li>两者 api 总体比较 ，iview 要比 element 简洁许多。 饿了么更侧重于在 template 里直接去渲染模板</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>技术选型</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Mac 上使用网络位置</title>
    <url>/2018/encyclopedia/mac-network-location/</url>
    <content><![CDATA[<blockquote>
<p>借助“网络”偏好设置中的“位置”功能，您可以在不同的网络设置组之间快速切换。</p>
</blockquote>
<p>在不同的网络设置组（位置）之间切换的功能在以下情况下非常有用：</p>
<ul>
<li>您在工作场所和家中使用相同类型的网络（如以太网），但在工作场所使用的设置不允许您的 Mac 自动连接到家中所用的相同类型网络。</li>
<li>您的 Mac 在工作场所和家中连接到多种类型的网络服务（如 Wi-Fi 和以太网），但是，在工作场所，您希望您的 Mac 先尝试连接到以太网网络，而在家中，则希望先尝试连接到 Wi-Fi 网络。换言之，您希望针对每个位置设置不同的服务顺序。</li>
<li>您的 Mac 无法连接到网络，并且您想要快速重设您的网络设置以用于测试，同时不丢失当前的网络设置。</li>
</ul>
<p>在上述每个示例中，“网络”偏好设置中的“位置”功能均可发挥作用。以下步骤适用于使用 <a href="https://support.apple.com/zh-cn/HT201260">OS X v10.6 或更高版本的</a> Mac 电脑。</p>
<hr>
<h2 id="如何创建新的网络位置"><a href="#如何创建新的网络位置" class="headerlink" title="如何创建新的网络位置"></a>如何创建新的网络位置</h2><ol>
<li><p>选取苹果菜单 () &gt;“系统偏好设置”，然后点按“网络”。</p>
</li>
<li><p>“位置”弹出式菜单中会显示您当前所选网络设置组的名称。默认位置名称为“自动”。从该菜单中选取“编辑位置”。<br><img src="/images/baike/macos-sierra-system-preferences-network-location-edit.png"></p>
</li>
<li><p>此时，将打开一个位置对话框。点按位置列表下方的 “添加”按钮，然后为新位置键入一个名称，如“工作”或“家庭”或“移动”：<br><img src="/images/baike/macos-sierra-system-preferences-network-location-edit-2.png"></p>
</li>
<li><p>点按“完成”。“位置”菜单现在应显示新位置的名称。点按“应用”后，您对网络设置所做的全部更改都将存储到该位置。您之前位置中的网络设置在您离开时会保留，因此您可以随时切换回来。</p>
</li>
<li><p>点按“应用”以存储您的设置，并从之前的位置切换到新的位置。您的 Mac 会自动尝试为每种类型的网络确定正确的设置。如果您需要进一步调整设置，请记得再次点按“应用”。如果您的新设置不允许您连接到您的网络，请点按“向导”。</p>
</li>
</ol>
<span id="more"></span>

<hr>
<h2 id="如何在网络位置之间进行切换"><a href="#如何在网络位置之间进行切换" class="headerlink" title="如何在网络位置之间进行切换"></a>如何在网络位置之间进行切换</h2><p>如果您有多个位置，您可以使用以下任一方法在这些位置之间进行切换：</p>
<ul>
<li>如上文所述，请使用“网络”偏好设置中的“位置”弹出式菜单。选择位置后请记得点按“应用”。</li>
<li>或者从菜单栏中选取苹果菜单 &gt;“位置”，然后从子菜单中选取您的位置。</li>
</ul>
<hr>
<h2 id="如何更改网络服务顺序"><a href="#如何更改网络服务顺序" class="headerlink" title="如何更改网络服务顺序"></a>如何更改网络服务顺序</h2><p>如果您正在使用网络位置，而您希望每个位置在连接时首选不同的网络服务（如 Wi-Fi 或以太网），请按照以下步骤更改每个位置中的服务顺序（也称为“端口优先顺序”）。</p>
<ol>
<li>选取苹果菜单 &gt;“系统偏好设置”，然后点按“网络”。</li>
<li>使用“位置”菜单来选取想要修改的位置。</li>
<li>点按服务列表下方的 “操作”菜单，然后选取“设置服务顺序”。</li>
<li>拖动列表中的服务以更改其顺序。您的 Mac 将先尝试连接列表顶部的服务，然后继续按降序连接，直到连接成功。<blockquote>
<p>虚拟专用网络 (VPN) 连接不能重新排序，因为它们始终优先于其他连接。<br><img src="/images/baike/macos-sierra-system-preferences-network-set-service-order.png"></p>
</blockquote>
</li>
<li>点按“好”，然后点按“应用”，以激活更新的服务顺序。</li>
</ol>
<hr>
<h2 id="如何阻止使用某个网络服务"><a href="#如何阻止使用某个网络服务" class="headerlink" title="如何阻止使用某个网络服务"></a>如何阻止使用某个网络服务</h2><p>默认情况下，名为“自动”的位置可激活所有可用网络（也称为“端口”或“网络接口”），无论它们是否用于连接到网络。您的 Mac 将自动搜索这些服务以进行网络或互联网连接。例如，您可能会在家中使用 Wi-Fi 网络而在工作场所使用以太网网络。您的 Mac 在连接时会自动检测要使用哪个网络服务。</p>
<p>如果您想要确保您的 Mac 不使用某个特定网络服务（如 Wi-Fi），您可以在您的所有网络位置停用该服务：</p>
<ol>
<li>选取苹果菜单 &gt;“系统偏好设置”，然后点按“网络”。</li>
<li>使用“位置”菜单来选取想要修改的位置。</li>
<li>点按服务列表下方的 <span id="style"><img src="/images/baike/elcapitan-system-preferences-gear-icon.png"></span>“操作”菜单，然后选取“停用服务”。</li>
<li>点按“应用”。</li>
</ol>
<style>
#style a{
  cursor: default;
  border-bottom:none;
}
#style img{
  display:inline !important;
  width:22px; height:14px;
  margin: 0;
  padding: 0;
  border: none;
}
</style>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>网络位置</tag>
      </tags>
  </entry>
  <entry>
    <title>如何撰写PRD文档</title>
    <url>/2018/encyclopedia/how-to-write-the-PRD-document/</url>
    <content><![CDATA[<p>产品经理主要有两项职责：</p>
<ol>
<li>评估产品机会</li>
<li>定义要开发的产品；</li>
</ol>
<p>定义开发的产品则需要通过产品需求文档(PRD)来描述产品的特征和功能。</p>
<h2 id="PRD-开发需求文档）的作用"><a href="#PRD-开发需求文档）的作用" class="headerlink" title="PRD(开发需求文档）的作用"></a>PRD(开发需求文档）的作用</h2><p>在学习如何撰写 PRD 之前，我们先要明白写 PRD 的目的是什么：</p>
<h3 id="①-概念化”阶段进入到“图纸化”"><a href="#①-概念化”阶段进入到“图纸化”" class="headerlink" title="① 概念化”阶段进入到“图纸化”"></a>① <strong>概念化”阶段进入到“图纸化”</strong></h3><p>我们之前在市场需求文档（MRD）中阐述到的功能，都是表达的一个意向，不考虑实现方法和细节。而 PRD 则是将概念图纸化，需要阐述详细的细节和实现模型。产品人员可以通过撰写 PRD，梳理清楚方案实现过程中的各种问题和影响。</p>
<h3 id="②-向项目成员传达需求的意义和明细"><a href="#②-向项目成员传达需求的意义和明细" class="headerlink" title="② 向项目成员传达需求的意义和明细"></a>② <strong>向项目成员传达需求的意义和明细</strong></h3><p>PRD 的主要面向对象是项目经理、开发、设计和测试。如何向这些不同的角色表达清楚需求明细，就需要一份规范的 PRD 文档来描述。项目经理通过文档可以迅速了解任务的规模和相关接口，而开发设计人员通过文档可以了解页面元素和用例规则，测试人员可以提前根据文档撰写测试用例。PRD 文档在形式上是项目启动的必要元素之一。</p>
<h3 id="③-管理归档需求"><a href="#③-管理归档需求" class="headerlink" title="③ 管理归档需求"></a>③ <strong>管理归档需求</strong></h3><p>大都数的新需求都需要迭代几个版本后才能走向成熟稳定的阶段，如果没有 PRD 文档，在大型项目中，需求的迭代变更将变的无据可循。PRD 的文档修订编号和命名也是项目规范化管理的主要方法之一。</p>
<h2 id="PRD-的表现形式"><a href="#PRD-的表现形式" class="headerlink" title="PRD 的表现形式"></a>PRD 的表现形式</h2><p>一般企业内部的 PRD 文档选择 wiki 系统或 word 文档。wiki 在协同和保密方面会有优势，而且能够记录修改文档的每一次变更。而 word 在阅读修改方面比较有优势，一般使用 Word 加 SVN 的方式来管理更新文档。这个可根据每个企业的管理规范来选择那种方法更合适。</p>
<h2 id="PRD-的主要构成"><a href="#PRD-的主要构成" class="headerlink" title="PRD 的主要构成"></a>PRD 的主要构成</h2><p>一份基础的 PRD 文档主要由三部分组成</p>
<h3 id="①-引言"><a href="#①-引言" class="headerlink" title="① 引言"></a>① <strong>引言</strong></h3><p>引言部分主要包括：需求背景、需求目的、需求概要、涉及范围、全局规则和名词说明，交互原型地址等。引言部分的写作目的是让阅读者快速理解需求背景和概要。如果是公司内部文档，引言部分可以从简写作。</p>
<h3 id="②-业务建模"><a href="#②-业务建模" class="headerlink" title="② 业务建模"></a>② <strong>业务建模</strong></h3><p>建模的目的是为了帮助阅读对象更好的理解需要开发的需求，常用的模型种类包括：用例图、实体图、状态图、流程图等。常用的建模语言如 UML。</p>
<h3 id="③-业务模块"><a href="#③-业务模块" class="headerlink" title="③ 业务模块"></a>③ <strong>业务模块</strong></h3><p>业务模块包含具体页面的元素、用例规则，以及相关的原型，流程图。业务模块的描述是整个文档最核心的部分，下面博主用案例来描述一下业务模块的编写方法。</p>
<br/>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>PRD文档</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>几种常见的开源协议</title>
    <url>/2018/encyclopedia/open-source-licenses/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开源软件(Open source software)的源代码对有追求的程序员来说是一无尽的宝藏，此外正确的使用开源软件，可以提高开发软件时的效率、提升软件质量。但是在使用和借鉴开源软件的时候，我们不得不关心一下它对使用者的诸多限制，比较常见的方式即协议授权(licence)，这些协议中明确说明了使用者应该遵循的原则。</p>
<p>现在开源协议众多，大概有 50 多种，下面只对几种常见协议做介绍。<br>首先看一张总结很好的图【摘自阮一峰】<br><img src="/images/baike/open-source-software.png"></p>
<span id="more"></span>

<h2 id="BSD-协议"><a href="#BSD-协议" class="headerlink" title="BSD 协议"></a>BSD 协议</h2><p>BSD 开源协议是一个给予使用者很大自由的协议。开发者可以自由使用和修改源代码，也可以讲修改后的源代码作为开源或者专有软件再发布。但是有一下几个要求：</p>
<p>如果再发布的产品中含有源代码，则在源代码中必须带有原来代码中的 BSD 协议。</p>
<p>如果再发布的只是二进制类库&#x2F;软件，则需要再类库&#x2F;软件的文档和版权申明中包含原有代码中的 BSD 协议。</p>
<p>不可以用开源代码的作者&#x2F;机构名字和原来产品的名字做市场推广。</p>
<p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD 由于允许使用者修改和重新发布代码，也允许使用或在 BSD 代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选 BSD 协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>
<h2 id="Apache-Licence-2-0-Apache-2-0"><a href="#Apache-Licence-2-0-Apache-2-0" class="headerlink" title="Apache Licence 2.0(Apache-2.0)"></a>Apache Licence 2.0(Apache-2.0)</h2><p>Apache Licence 是著名的非盈利开源组织 Apache 采用的协议。该协议和 BSD 类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。</p>
<p>但是也需要遵循以下条件：</p>
<ul>
<li>需要给代码的用户一份 Apache Licence。</li>
<li>如果修改了代码，需要再被修改的文件中说明。</li>
<li>在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li>
<li>如果再发布的产品中包含一个 Notice 文件，则在 Notice 文件中需要带有 Apache Licence。你可以再 Notice 中增加自己的许可，但是不可以表现为对 Apache Licence 构成更改。</li>
</ul>
<p>使用这个协议的好处是:</p>
<ul>
<li>永久权利 一旦被授权，永久拥有。</li>
<li>全球范围的权利 在一个国家获得授权，适用于所有国家。假如你在美国，许可是从印度授权的，也没有问题。</li>
<li>授权免费 无版税， 前期、后期均无任何费用。</li>
<li>授权无排他性 任何人都可以获得授权</li>
<li>授权不可撤消 一旦获得授权，没有任何人可以取消。比如，你基于该产品代码开发了衍生产品，你不用担心会在某一天被禁止使用该代码</li>
<li>Apache Licence 也是对商业应用友好的许可。使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布&#x2F;销售。</li>
</ul>
<h2 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h2><p>我们很熟悉的 Linux 就是采用了 GPL。GPL 协议和 BSD, Apache Licence 等鼓励代码重用的许可很不一样。GPL 的出发点是代码的开源&#x2F;免费使用和引用&#x2F;修改&#x2F;衍生代码的开源&#x2F;免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种 linux，包括商业公司的 linux 和 linux 上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。</p>
<p>GPL 协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用 GPL 协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL 协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>
<p>由于 GPL 严格要求使用了 GPL 类库的软件产品必须使用 GPL 协议，对于使用 GPL 协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成&#x2F;采用作为类库和二次开发的基础。</p>
<p>其它细节如再发布的时候需要伴随 GPL 协议等和 BSD&#x2F;Apache 等类似。</p>
<h2 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h2><p>LGPL 是 GPL 的一个为主要为类库使用设计的开源协议。和 GPL 要求任何使用&#x2F;修改&#x2F;衍生之 GPL 类库的的软件必须采用 GPL 协议不同。LGPL 允许商业软件通过类库引用(link)方式使用 LGPL 类库而不需要开源商业软件的代码。这使得采用 LGPL 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>
<p>但是如果修改 LGPL 协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 LGPL 协议。因此 LGPL 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 LGPL 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<p>GPL&#x2F;LGPL 都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>
<h2 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h2><p>MIT 是和 BSD 一样宽范的许可协议,源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称 X11 协议。作者只想保留版权,而无任何其他了限制。MIT 与 BSD 类似，但是比 BSD 协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用 MIT 的软件项目有：jquery、Node.js。</p>
<p>MIT 与 BSD 类似，但是比 BSD 协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用 MIT 的软件项目有：jquery、Node.js。</p>
<h2 id="MPL-Mozilla-Public-License-1-1"><a href="#MPL-Mozilla-Public-License-1-1" class="headerlink" title="MPL (Mozilla Public License 1.1)"></a>MPL (Mozilla Public License 1.1)</h2><p>MPL 协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者 。这种授权维护了商业软件的利益，它要求基于这种软件的修改无偿贡献版权给该软件。这样，围绕该软件的所有代码的版权都集中在发起开发人的手中。但 MPL 是允许修改，无偿使用得。MPL 软件对链接没有要求。</p>
<h2 id="EPL-Eclipse-Public-License-1-0"><a href="#EPL-Eclipse-Public-License-1-0" class="headerlink" title="EPL (Eclipse Public License 1.0)"></a>EPL (Eclipse Public License 1.0)</h2><p>EPL 允许 Recipients 任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。<br>使用 EPL 协议，需要遵守以下规则：</p>
<p>当一个 Contributors 将源码的整体或部分再次开源发布的时候,必须继续遵循 EPL 开源协议来发布,而不能改用其他协议发布.除非你得到了原“源码”Owner 的授权；</p>
<p>EPL 协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,或者当你再发布的是 Object Code 的时候,你必须声明它的 Source Code 是可以获取的,而且要告知获取方法；</p>
<p>当你需要将 EPL 下的源码作为一部分跟其他私有的源码混和着成为一个 Project 发布的时候,你可以将整个 Project&#x2F;Product 以私人的协议发布,但要声明哪一部分代码是 EPL 下的,而且声明那部分代码继续遵循 EPL；</p>
<p>独立的模块(Separate Module),不需要开源。</p>
<p>转自： <a href="https://blog.csdn.net/qq_22494029/article/details/79731340">https://blog.csdn.net/qq_22494029/article/details/79731340</a></p>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>开源协议</tag>
        <tag>MIT</tag>
      </tags>
  </entry>
  <entry>
    <title>培训文档（基于Vue2.0的项目开发）</title>
    <url>/2018/encyclopedia/training-documents/</url>
    <content><![CDATA[<p>注：<a href="https://cn.vuejs.org/">Vue2.0 中文文档</a> ，如果对自己英文有信心，也可以直接阅读 <a href="https://vuejs.org/">英文文档</a>。</p>
<h2 id="起步：从了解-Vue-开始"><a href="#起步：从了解-Vue-开始" class="headerlink" title="起步：从了解 Vue 开始"></a>起步：从了解 Vue 开始</h2><ol>
<li><p>扎实的 JavaScript &#x2F; HTML &#x2F; CSS 基本功。这是前置条件。</p>
</li>
<li><p>通读官方教程 (guide) 的基础篇。不要用任何构建工具，就只用最简单的 &lt;script&gt;，把教程里的例子模仿一遍，理解用法。<strong>不推荐上来就直接用 vue-cli 构建项目，尤其是如果没有 Node&#x2F;Webpack 基础。</strong></p>
</li>
<li><p>照着官网上的示例，自己想一些类似的例子，模仿着实现来练手，加深理解。</p>
</li>
<li><p>阅读官方教程进阶篇的前半部分，到『自定义指令 (Custom Directive) 』为止。着重理解 Vue 的响应式机制和组件生命周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。</p>
</li>
<li><p>阅读教程里关于路由和状态管理的章节，然后根据需要学习 vue-router 和 vuex。同样的，先不要管构建工具，以跟着文档里的例子理解用法为主。</p>
</li>
<li><p>走完基础文档后，如果你对于基于 Node 的前端工程化不熟悉，就需要补课了。下面这些严格来说并不是 Vue 本身的内容，也不涵盖所有的前端工程化知识，但对于大型的 Vue 工程是前置条件，也是合格的『前端工程师』应当具备的知识。</p>
</li>
</ol>
<h2 id="前端生态-x2F-工程化"><a href="#前端生态-x2F-工程化" class="headerlink" title="前端生态&#x2F;工程化"></a>前端生态&#x2F;工程化</h2><ol>
<li><p>了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015&#x2F;16 的新特性，理解 ES2015 modules，适当关注<a href="https://github.com/tc39/proposals">还未成为标准的提案</a>。</p>
</li>
<li><p>学习命令行的使用。建议用 Mac。</p>
</li>
<li><p>学习 Node.js 基础。<strong>建议使用 <a href="https://github.com/creationix/nvm">nvm</a> 这样的工具来管理机器上的 Node 版本，并且将 npm 的 registry 注册表配置为<a href="https://npm.taobao.org/">淘宝的镜像源</a>。</strong>至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意最新版本的 Node (6+) 已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。</p>
</li>
<li><p>了解如何使用 &#x2F; 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境。</p>
</li>
<li><p>学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念&#x2F;使用方法即可，比如如何搭配 Webpack 使用 Babel。学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 <a href="https://webpack.js.org/guides/getting-started/">Webpack 2.0 的文档</a>。</p>
</li>
</ol>
<span id="more"></span>
<h2 id="Vue-进阶"><a href="#Vue-进阶" class="headerlink" title="Vue 进阶"></a>Vue 进阶</h2><ol>
<li><p>有了 Node 和 Webpack 的基础，可以通过 vue-cli 来搭建基于 Webpack ，并且支持单文件组件的项目了。建议用 webpack-simple 这个模板开始，并阅读官方教程进阶篇剩余的内容以及 <a href="https://vue-loader.vuejs.org/">vue-loader 的文档</a>，了解一些进阶配置。有兴趣的可以自己亲手从零开始搭一个项目加深理解。</p>
</li>
<li><p>根据 <a href="https://github.com/vuejs/vue-hackernews-2.0">例子</a> 尝试在 Webpack 模板基础上整合 <a href="https://vue-loader.vuejs.org/zh/guide/">Vue-router</a> 和 <a href="https://vuex.vuejs.org/zh/">Vuex</a></p>
</li>
<li><p>深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。</p>
</li>
<li><p>（可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。其实更重要的是理解它所解决的问题并搞清楚你是否需要它。</p>
</li>
<li><p>阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。</p>
</li>
<li><p>参考 <a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup">贡献指南</a> 阅读 Vue 的源码，理解内部实现细节。（需要了解 <a href="https://flow.org/">Flow</a>）</p>
</li>
</ol>
<h2 id="了解-ES6"><a href="#了解-ES6" class="headerlink" title="了解 ES6"></a>了解 ES6</h2><p>推荐阮一峰老师的 <a href="http://es6.ruanyifeng.com/#README">ECMAScript 6 入门</a></p>
<p>重点学习：</p>
<ul>
<li>let 和 const 命令</li>
<li>变量的解构赋值</li>
<li>箭头函数表达式</li>
<li>Module 的语法</li>
<li>Promise 对象</li>
</ul>
<h2 id="Sass-x2F-Less-x2F-PostCSS-…"><a href="#Sass-x2F-Less-x2F-PostCSS-…" class="headerlink" title="Sass&#x2F;Less&#x2F;PostCSS …"></a>Sass&#x2F;Less&#x2F;PostCSS …</h2><p><a href="https://www.sass.hk/">Sass</a></p>
<p>世界上最成熟、最稳定、最强大的专业级 CSS 扩展语言！</p>
<p><a href="http://www.bootcss.com/p/lesscss/">Less</a></p>
<p>一种 动态 样式 语言.<br>LESS 将 CSS 赋予了动态语言的特性，如 变量， 继承， 运算， 函数. LESS 既可以在 客户端 上运行 (支持 IE 6+, Webkit, Firefox)，也可以借助 Node.js 或者 Rhino 在服务端运行。</p>
<p><a href="https://segmentfault.com/a/1190000011595620">PostCSS</a><br>…</p>
<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>会一些 npm 基础，知道如何用 git-bash 来安装依赖，会一些常用的命令。</p>
<p>这方面的知识可以参阅 <a href="https://segmentfault.com/a/1190000005799797">npm 入门文档</a></p>
<ul>
<li>npm install [package][—save] [—saveDev]</li>
<li>npm update</li>
<li>npm uninstall <package></li>
<li>npm start</li>
<li>npm run <scripts></li>
</ul>
<h2 id="项目管理相关"><a href="#项目管理相关" class="headerlink" title="项目管理相关"></a>项目管理相关</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/">Git</a></h3><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>GIT 不仅仅是个版本控制系统，它也是个内容管理系统(CMS)，工作管理系统等。<br>如果你是一个具有使用 SVN 背景的人，你需要做一定的思想转换，来适应 GIT 提供的一些概念和特征。</p>
<p>Git 与 SVN 区别点：</p>
<ol>
<li>GIT 是分布式的，SVN 不是：这是 GIT 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li>
<li>GIT 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs 等的文件夹里。</li>
<li>GIT 分支和 SVN 的分支不同：分支在 SVN 中一点不特别，就是版本库中的另外的一个目录。</li>
<li>GIT 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 GIT 缺少的最大的一个特征。</li>
<li>GIT 的内容完整性要优于 SVN：GIT 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>
</ol>
<p>Git 完整命令手册地址：<a href="http://git-scm.com/docs">http://git-scm.com/docs</a></p>
<h3 id="接口文档（API-文档）"><a href="#接口文档（API-文档）" class="headerlink" title="接口文档（API 文档）"></a>接口文档（API 文档）</h3><p>随着互联网技术的发展，现在的网站架构基本都由原来的后端渲染，变成了：前端渲染、后端分离的形态，而且前端技术和后端技术在各自的道路上越走越远。<br>前端和后端的唯一联系，变成了 API 接口；API 文档变成了前后端开发人员联系的纽带，变得越来越重要</p>
<h4 id="API-文档工具"><a href="#API-文档工具" class="headerlink" title="API 文档工具"></a>API 文档工具</h4><ul>
<li><p><a href="http://rapapi.org/org/index.do">RAP</a><br>RAP 是一个可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性， 围绕接口定义，通过一系列自动化工具提升我们的协作效率。我们的口号：提高效率，回家吃晚饭！</p>
</li>
<li><p><a href="https://swagger.io/">Swaggger</a>（推荐）<br>The Best APIs are Built with Swagger Tools</p>
</li>
<li><p><a href="http://www.xiaoyaoji.cn/">小幺鸡</a><br>小幺鸡，简单好用的在线接口文档管理工具</p>
</li>
</ul>
<h3 id="数据-Mock"><a href="#数据-Mock" class="headerlink" title="数据 Mock"></a>数据 Mock</h3><p><a href="https://www.easy-mock.com/">Easy-Mock</a><br>是一个  可视化，并且能快速生成模拟数据的服务。</p>
<h2 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── build                      // 构建相关  </span><br><span class="line">├── config                     // 配置相关</span><br><span class="line">├── src                        // 源代码</span><br><span class="line">│   ├── api                    // 所有请求统一调用并管理</span><br><span class="line">│   ├── assets                 // 主题 字体等静态资源</span><br><span class="line">│   ├── components             // 全局公用组件</span><br><span class="line">│   ├── filters                // 全局 filter</span><br><span class="line">│   ├── router                 // 路由</span><br><span class="line">│   ├── store                  // 全局 store管理</span><br><span class="line">│   ├── styles                 // 全局样式</span><br><span class="line">│   ├── utils                  // 全局公用方法</span><br><span class="line">│   ├── views                  // 路由页面组件</span><br><span class="line">│   ├── main.js                // 入口 加载组件 初始化等</span><br><span class="line">├── static                     // 第三方不打包资源</span><br><span class="line">├── .babelrc                   // babel-loader 配置</span><br><span class="line">├── .eslintrc.js               // eslint 配置项</span><br><span class="line">├── .gitignore                 // git 忽略项</span><br><span class="line">├── favicon.ico                // favicon图标</span><br><span class="line">├── index.html                 // html模板</span><br><span class="line">└── package.json               // package.json</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># serve with hot reload at localhost:9525</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production with minification</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>强烈建议不要用直接使用 cnpm 安装有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="引入第三方库"><a href="#引入第三方库" class="headerlink" title="引入第三方库"></a>引入第三方库</h2><h3 id="VUX"><a href="#VUX" class="headerlink" title="VUX"></a><a href="https://doc.vux.li/zh-CN/">VUX</a></h3><p>VUX（读音 [v’ju:z]，同 views）是基于 WeUI 和 Vue(2.x)开发的移动端 UI 组件库，主要服务于微信页面。</p>
<p>组件地址：<a href="https://doc.vux.li/zh-CN/components/actionsheet.html">https://doc.vux.li/zh-CN/components/actionsheet.html</a><br>DEMO 地址：<a href="https://vux.li/demos/v2/">https://vux.li/demos/v2/</a></p>
<h3 id="WeUI"><a href="#WeUI" class="headerlink" title="WeUI"></a><a href="https://github.com/Tencent/weui/blob/master/README_cn.md">WeUI</a></h3><p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信 Web 开发量身设计，可以令用户的使用感知更加统一。包含 button、cell、dialog、 progress、 toast、article、actionsheet、icon 等各式元素。</p>
<p>DEMO 地址：<a href="https://weui.io/">https://weui.io</a></p>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>培训文档</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用命令将本地项目上传到git</title>
    <url>/2018/encyclopedia/upload-projects-git/</url>
    <content><![CDATA[<ol>
<li>通过命令 git init 把这个目录变成 git 可以管理的仓库（先进入项目文件夹）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li>用命令 git commit 告诉 Git，把文件提交到仓库。引号内为提交说明<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>关联到远程库 git remote add origin 你的远程库地址<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/cade8800/ionic-demo.git</span><br></pre></td></tr></table></figure></li>
<li>获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></li>
<li>把本地库的内容推送到远程，使用 git push 命令，实际上是把当前分支 master 推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>状态查询命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/images/baike/git-project.png"><br><br/></p>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 CentOS7 心得</title>
    <url>/2018/encyclopedia/using-centos/</url>
    <content><![CDATA[<p>最近在阿里云上购置了一个云服务，系统是 CentOS7 的，对于不懂 Linux 的菜鸟来说，买了之后也是一脸蒙逼，简直无从下手。<br>幸好有强大的搜索引擎，折腾了两天，总算有些收获。</p>
<h2 id="收获一：使用-MAC-终端登录"><a href="#收获一：使用-MAC-终端登录" class="headerlink" title="收获一：使用 MAC 终端登录"></a>收获一：使用 MAC 终端登录</h2><p>登录阿里云，拿到外网的 ip 地址，然后打开 MAC 终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@xx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>没错，就这么简单，然后我们就可以在服务器上愉快的玩耍了。</p>
<h2 id="收获二：文件上传下载"><a href="#收获二：文件上传下载" class="headerlink" title="收获二：文件上传下载"></a>收获二：文件上传下载</h2><p>scp <a href="https://www.cnblogs.com/webnote/p/5877920.html">了解一下</a></p>
<h3 id="上传文件到服务器"><a href="#上传文件到服务器" class="headerlink" title="上传文件到服务器"></a>上传文件到服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r test.txt root@xx.xxx.xxx.xxx:~</span><br></pre></td></tr></table></figure>

<h3 id="从服务器下载文件"><a href="#从服务器下载文件" class="headerlink" title="从服务器下载文件"></a>从服务器下载文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r root@xx.xxx.xxx.xxx:~/test.txt ~/Desktop/</span><br></pre></td></tr></table></figure>

<h2 id="收获三：在-CentOS7-上安装-Node-js"><a href="#收获三：在-CentOS7-上安装-Node-js" class="headerlink" title="收获三：在 CentOS7 上安装 Node.js"></a>收获三：在 CentOS7 上安装 Node.js</h2><p>这个也折腾了好久，网上的教程也挺多的，但是本人遇到的几个坑说明一下</p>
<ul>
<li>源码安装，推荐但是并不是最有效率的，因为下载过来的源码需要经过解压，编译（很花费时间，而且需要安装 gcc 来作为编译软件），安装</li>
<li>使用已编译版本安装，这是我目前使用的方法，好处不用说了，坏处是版本固定，安装完之后，需要将 node 和 npm 配置成全局环境</li>
</ul>
<h2 id="收获四：在-CentOS7-上安装-mongodb"><a href="#收获四：在-CentOS7-上安装-mongodb" class="headerlink" title="收获四：在 CentOS7 上安装 mongodb"></a>收获四：在 CentOS7 上安装 mongodb</h2><h3 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本自己选择</span></span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.12.tgz</span><br></pre></td></tr></table></figure>

<h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-3.2.12.tgz</span><br></pre></td></tr></table></figure>

<h3 id="3、移动到指定位置"><a href="#3、移动到指定位置" class="headerlink" title="3、移动到指定位置"></a>3、移动到指定位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span>  mongodb-linux-x86_64-3.2.12/ /usr/local/mongodb</span><br></pre></td></tr></table></figure>

<h3 id="4、在-x2F-usr-x2F-local-x2F-mongodb-下创建文件夹"><a href="#4、在-x2F-usr-x2F-local-x2F-mongodb-下创建文件夹" class="headerlink" title="4、在&#x2F;usr&#x2F;local&#x2F;mongodb 下创建文件夹"></a>4、在&#x2F;usr&#x2F;local&#x2F;mongodb 下创建文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/db</span><br><span class="line"><span class="built_in">mkdir</span>  /logs</span><br></pre></td></tr></table></figure>

<h3 id="5、启动"><a href="#5、启动" class="headerlink" title="5、启动"></a>5、启动</h3><p>在&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mongod</span><br></pre></td></tr></table></figure>

<p>PS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 使用命令启动mongodb数据库</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mongodb/bin</span><br><span class="line">./mongod -dbpath=/usr/local/mongodb/data -logpath=/usr/local/mongodb/logs/mongodb.log -logappend -port=27017 -fork</span><br><span class="line">  <span class="comment">#  常用的启动参数：</span></span><br><span class="line">  <span class="comment">#  --dbpath：指定存储数据的文件夹</span></span><br><span class="line">  <span class="comment">#  --logpath：指定日志存储文件</span></span><br><span class="line">  <span class="comment">#  --logappend：日志以增加方式产生</span></span><br><span class="line">  <span class="comment">#  --port指定端口，如果不写的话，默认是27017</span></span><br></pre></td></tr></table></figure>

<h3 id="6、关闭"><a href="#6、关闭" class="headerlink" title="6、关闭"></a>6、关闭</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mongod --shutdown</span><br></pre></td></tr></table></figure>

<h2 id="收获五：在-CentOS7-上安装-redis"><a href="#收获五：在-CentOS7-上安装-redis" class="headerlink" title="收获五：在 CentOS7 上安装 redis"></a>收获五：在 CentOS7 上安装 redis</h2><p>其实跟安装 mongodb 大同小异，搜一下网上一大堆</p>
<h2 id="收获六：后台启动-node-服务，关闭-ssh-时，不会断开"><a href="#收获六：后台启动-node-服务，关闭-ssh-时，不会断开" class="headerlink" title="收获六：后台启动 node 服务，关闭 ssh 时，不会断开"></a>收获六：后台启动 node 服务，关闭 ssh 时，不会断开</h2><blockquote>
<p>有两种方法</p>
<ul>
<li>利用 forever 在 Linux 上实现 Node.js 项目自启动</li>
<li>nohup</li>
</ul>
</blockquote>
<p>对于 Linux 高手来说不算什么，所以，这只是 Linux 菜鸟的日常记录（无辜笑脸）<br><br></p>
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>你和她的爱情故事</title>
    <url>/2015/prose/you-and-her-love-story/</url>
    <content><![CDATA[<h4 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a><center>（一）</center></h4><p>2008 年的秋天，那个清澈的夜晚，你在一大片陌生的面孔中莫名其妙地发现了她。所谓莫名其妙是朦胧诗派的写法，实际上是你搭讪了她的朋友，然后通过她的朋友顺利地要到了她的 QQ。几个月后，你跟她说：我发掘了你。那时她还不大适应你这种种表达方式，所以她微微地愕然了一下。</p>
<p>有首歌唱：我遇见你是最美丽的意外。你觉得自己遇见她这个美丽的意外实在是有点意外，因为她让你中毒了，并且毒性极大。杨过中了情花毒，一思念小龙女胸口就是那个痛！你中的这个毒好比电脑一开机就卡死，没法运转。</p>
<h4 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a><center>（二）</center></h4><p>从此之后，在黎明或是午夜，你总会从许许多多的梦中惊醒。你总会在梦里看到各种各样形形色色的面孔在背后追赶着自己：有古惑仔挥舞着尖刀卖命地追着你砍；有警察举着枪在你后面乱射；更有些人死命地咬着你，嘴里在不停地叫着喊着快还钱还钱快还钱……</p>
<p>你认为这大概是自己白天追她追得太厉害了，所以到了晚上得自我找点平衡，于是不自学地就老做梦让别人追。</p>
<span id="more"></span>

<h4 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a><center>（三）</center></h4><p>你觉得自己不是很优秀，原因如下：虽然你自认有点才，但是却没什么财，所以这很致命。</p>
<p>人为财死，鸟为食亡。当你的才华还不能当钞票用的时候，你就算不上是有才。</p>
<p>你当时还不知道自己其实算不上有才，所以你盲目地、狗急跳墙地急于向她展示自己那点还称不上是才华的才华。你在展示自己才华的时候又犯了一个很大的错误。你没有给她写情书而是写了一个小说。</p>
<p>其实写小说也没啥，但致命的是，你却在自己的小说里把自己写得一无是处一塌糊涂一文不名一穷二白。</p>
<p>小说是虚构的，但你的小说写得很好，所以她很傻很天真地认为这就是真实的，于是她认定了你就是小说里那个烂人。</p>
<h4 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a><center>（四）</center></h4><p>之后，你在她眼中俨然成了烂人的代名词，而你却还不知道这到底发生了什么事。</p>
<p>你依旧奋力追赶她，因为你一直觉得自己是优秀的代名词，所以你觉得自己没理由追不到她。</p>
<p>世界上最悲哀的事莫过于，你认为对方把你当成一朵花，其实她只当你是一坨粪。</p>
<p>你在不知不觉中把世界上最悲哀的事给经历了，所以你还不知道自己从此之后应该刀枪不入百毒不侵了。这就好比武侠小说中打通任督二脉的主人公，从此之后平步江湖惩恶扬善扬名立万。</p>
<h4 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a><center>（五）</center></h4><p>你始终不知道自己已经把情感的任督二脉打通了，所以你还是很虚心地向某一情场高手讨教泡妞绝招。高手故扮深沉，惜字如金。老半天才吐出 14 个字：忍一时风平浪静，退一步海阔天空。</p>
<p>对此你苦思了几个夜晚，依旧无法参透其中的奥秘。你觉得自己不仅 EQ 低，IQ 也不怎么高。那天刚好下了点雨，于是你的悲伤就逆流成河了。</p>
<p>你恨铁不成钢，所以你跑到附近化学系去请教钢铁是怎么炼成的。那位化学系的哥们跟你长篇大论说，这个炼钢嘛行要有铁。你在旁边点头，于是他接着说，炼铁的时候，把铁矿石和碳放在一起反应，使碳将铁矿石中的铁还原出来。用碳将铁的氧化物还原成铁，炼钢就是将铁水中含有的过量的碳清除。</p>
<p>在你差不多要晕掉的时候，你同学补了一句，过量的碳与氧气反应生成一氧化碳和二氧化碳，同时调整硫、磷、锰等元素的含量，这样就能炼出不同种类的钢了。</p>
<p>于是你彻底晕掉了。半天后你清醒过来，于是你问了一句：女生是怎么追到的？</p>
<p>化学系的哥们儿扶了扶厚厚的眼镜，然后无可奈何地说，这个问题不在我的研究范围之内。</p>
<h4 id="（六）"><a href="#（六）" class="headerlink" title="（六）"></a><center>（六）</center></h4><p>你对她越来越感到力不从心。打电话她不接，约吃饭她不理，但是送礼物她却照收不误……</p>
<p>对此你无可奈何。在日复一日的无可奈何中，你终于觉悟了。你知道除了“忍”之外，第二个办法就是“退”。</p>
<p>忍一时真的就能风平浪静吗？答案是否定的。你知道，只有忍一世才能风平浪静。</p>
<p>退一步是否真的就海阔天空？答案也是否定的。你知道，退出江湖才是真正的海阔天空。</p>
<p>古代兵书有云：退避三舍，欲擒故纵。你似懂非懂。</p>
<p>你开始忍，你 QQ 隐身飞信隐身 MSN 隐身，你忍着不给她打电话忍着不去想她忍着身边的哥们儿说你死活泡不到妞……</p>
<h4 id="（七）"><a href="#（七）" class="headerlink" title="（七）"></a><center>（七）</center></h4><p>忍着不去思念一个人就好比忍着一泡尿不撒，这是很难受的一个事，毕竟不撒尿膀胱受不住，不去思念一个人脑袋又控制不了。</p>
<p>你听着许巍年轻时那些绝望悲切得要死的歌曲，那厮唱：我只有两天，一天用来出生，一天用来死亡。你觉得自己要是只有两天，那一天用来想她，另一天还是得用来想她。</p>
<p>忍了半个月后，你终于百忍成金，你觉得自己差不多已经放下屠刀了，即将立地成佛。</p>
<p>没想到几天后你和她再度相遇，你认为大家彼此都绝交半个月了，QQ 不聊，电话不通，飞信短信不发，就让她尘归尘土归土，随风去吧。但是出于礼貌，你还是跟她打了个招呼。这时你发现她对你绽放了一个灿烂的笑容，于是你觉得学校情人坡下面那漫山遍野的野菊花开放了。</p>
<p>野菊花都有春天，况且自己这么一个大活人呢。你开始密谋策划第二次爱情进攻。</p>
<h4 id="（八）"><a href="#（八）" class="headerlink" title="（八）"></a><center>（八）</center></h4><p>你想了很久也没有想出一招制胜的办法，毕竟这追女生不是打架，不能操个板凳或板儿砖直接把对方拍倒完事。</p>
<p>事情进入到一个最棘手的阶段，你束手无策，事情无从发展。这好比小说写到了一半，却突然没办法接下去了，于是只能半路卡住。</p>
<p>在没有办法的办法中，你只能故伎重演，打电话聊 QQ 聊 MSN 聊飞信，你无所不用其极，目的也只是为了能把她约出来，至于出来后是去吃饭去图书馆还是去参加无聊的校园活动，这些都无所谓，重要的是你们能在一起。</p>
<p>在反复的死缠烂打以及屡败屡战中，你学会了声东击西、欲擒故纵，另外你还左右开弓把她身边的同学给摆平了。于是接下来，你约她一起逃课，一起钓鱼，一起放风筝，还有在停电的夜晚双双装鬼吓人，看校园十大歌手比赛双双把嗓子喊破……</p>
<h4 id="（九）"><a href="#（九）" class="headerlink" title="（九）"></a><center>（九）</center></h4><p>你认为自己和她已经把恋爱的所有前提工作都做完了，就差表白然后牵手亲嘴，最后两人躲在黑漆漆的角落做着不可告人的秘密等等。你一直想找一个惊世骇俗并且浪漫无比最好还能让全校女生尖叫让全校男生惊叹的一个表白方法，但你抓破脑袋焦头烂额还是没能想出什么好主意。你去问百度问谷歌问天涯问雅虎，答案无非都是玫瑰蜡烛加吉他唱歌之类的陈旧招数，你对这些老套的方法不屑一顾。</p>
<h4 id="（十）"><a href="#（十）" class="headerlink" title="（十）"></a><center>（十）</center></h4><p>你觉得自己修了那么久的渠，就等水一到，这渠就成了，但是这水该怎么引过来呢？对此你恨不得操一抽水机把水抽过来，好让它水到渠成，但是爱情抽水机到哪儿找去呢？</p>
<p>如此庸人自扰纠结了好几天之后，你终于下定决心孤注一掷背水一战，你并没有找到石破天惊浪漫的表白方法，所以你干脆什么都不准备，你觉得这叫无招胜有招。</p>
<p>那天晚上她上完课，你过去接她然后一起去喝奶茶，在路上你很平静地对她说，我们在一起吧。她没有说话，似乎在思考，又似乎是默认了。你只能继续说话打破这沉默，你说，如果可以的话，请把手给我。于是，你和她的手握在了一起。</p>
<p>那时是 11 月的冬天，而你觉得生活已经面朝大海，春暖花开。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>爱情</tag>
      </tags>
  </entry>
  <entry>
    <title>懒加载</title>
    <url>/2023/study-notes/lazy-loading/</url>
    <content><![CDATA[<h2 id="懒加载（延迟加载）"><a href="#懒加载（延迟加载）" class="headerlink" title="懒加载（延迟加载）"></a>懒加载（延迟加载）</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading#javascript">https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading#javascript</a></p>
<h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><ol>
<li>监听 scroll 事件时判断元素当前相对视图的位置</li>
<li>通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">IntersectionObserver</a>（重叠观察者，用于判断两个元素是否重叠，不用进行事件的监听，兼容性）。现有的方案：<br>lazysizes ：<a href="https://github.com/aFarkas/lazysizes">https://github.com/aFarkas/lazysizes</a><br>vue-lazyload ：<a href="https://github.com/hilongjw/vue-lazyload">https://github.com/hilongjw/vue-lazyload</a><br>Lozad.js：<a href="https://github.com/ApoorvSaxena/lozad.js">https://github.com/ApoorvSaxena/lozad.js</a></li>
</ol>
<h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>JavaScript、CSS 和 HTML 可以被分割成较小的代码块。这样就可以在前期发送所需的最小代码，改善页面加载时间。其余的可以按需加载。</p>
<ul>
<li>入口点分离：通过应用的入口点分离代码</li>
<li>动态分离：通过动态 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import">import()</a> 语句分离代码</li>
</ul>
<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>脚本类型模块：任何类型为 type&#x3D;”module” 的脚本标签都被视为一个 JavaScript 模块，并且默认情况下会被延迟。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化-前端规范方案</title>
    <url>/2023/study-notes/fe-standard/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="Code-standard"><a href="#Code-standard" class="headerlink" title="Code standard"></a>Code standard</h3><p><code>代码规范</code> 是前端工程化落地的基石，用于约束 <code>编码规范</code> 和 <code>编码风格</code>，它的好处是：</p>
<ul>
<li>强制规范代码风格统一，保持一样的编码习惯</li>
<li>增加代码的可维护性和可接入性，即使有新成员的加入也能快速适应项目的架构与需求</li>
<li>保障项目的整体质量，可减少无用代码、重复代码、错误代码和 BUG 代码的产生几率</li>
</ul>
<h3 id="Git-Commit-Message"><a href="#Git-Commit-Message" class="headerlink" title="Git Commit Message"></a>Git Commit Message</h3><p><code>commit message</code> 是开发的日常操作, 写好 <code>log</code> 不仅有助于他人 <code>review</code>, 还可以有效的输出 <code>CHANGELOG</code>, 对项目的管理实际至关重要, 但是实际工作中却常常被大家忽略.</p>
<p>那如何在前端项目中统一 <strong>代码规范</strong>，以及 <strong>Commit Message</strong> 的规范？<br>我这边结合实际项目以及目前较受欢迎的相关工具，给大家分享一套解决方案。</p>
<p>使用到的工具：</p>
<ul>
<li><a href="https://eslint.org/">eslint</a>：JavaScript 代码检测工具，检测并提示错误或警告信息</li>
<li><a href="https://prettier.io/">prettier</a>：代码自动格式化工具，更好的代码风格效果</li>
<li><a href="https://typicode.github.io/husky/">husky</a>：Git hooks 工具, 可以在执行 git 命令时，执行自定义的脚本程序</li>
<li><a href="https://github.com/okonet/lint-staged">lint-staged</a>：对暂存区 (git add) 文件执行脚本检测校验</li>
<li><a href="https://commitlint.js.org/">commitlint</a>：帮助你的团队遵守提交约定。通过支持 npm 安装的配置，它可以很容易地共享提交约定。</li>
</ul>
<span id="more"></span>

<h2 id="配置-eslint-amp-prettier"><a href="#配置-eslint-amp-prettier" class="headerlink" title="配置 eslint &amp; prettier"></a>配置 eslint &amp; prettier</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm i eslint prettier @typescript-eslint/parser -D</span><br><span class="line">pnpm i @typescript-eslint/eslint-plugin -D</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>可以在 vscode 插件中安装 Prettier 和 Eslint 插件，在设置中开启保存文件则进行格式化；</li>
<li>也可配置 scripts 命令（这会检测你指定目录的所有文件，当然会比较耗时）。</li>
<li>另外可结合 lint-staged 只对 commited 后的文件进行格式化重写（见下面的 pre-commit git-hooks 触发）</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置 package.json 文件内容</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src --ext js,jsx,.vue,.ts,.tsx --report-unused-disable-directives --max-warnings 0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write src/**/*/*.&#123;js,jsx,ts,tsx&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="通过配置文件，统一代码格式化的格式"><a href="#通过配置文件，统一代码格式化的格式" class="headerlink" title="通过配置文件，统一代码格式化的格式"></a>通过配置文件，统一代码格式化的格式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.cjs 文件，常规配置方案。 PS:后缀.js可能会报CommonJS 语法错误（如下），将后缀改为.cjs即可</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .pretterrc.cjs 文件 PS:后缀.js可能会报CommonJS 语法错误（如下），将后缀改为.cjs即可</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>, <span class="comment">// 强制在语句末尾使用分号。</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 不允许在多行结构的最后一个元素或属性后添加逗号。\</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 使用单引号而不是双引号来定义字符串。</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">120</span>, <span class="comment">// 指定每行代码的最大字符宽度，超过这个宽度的代码将被换行</span></span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&#x27;avoid&#x27;</span> <span class="comment">// 箭头函数参数只有一个时是否要有小括号（avoid - 省略）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他更多配置</span></span><br><span class="line">  <span class="comment">// bracketSpacing: true, // 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class="line">  <span class="comment">// disableLanguages: [&#x27;vue&#x27;], // 不格式化vue文件，vue文件的格式化单独设置</span></span><br><span class="line">  <span class="comment">// endOfLine: &#x27;auto&#x27;, // 结尾是 \n \r \n\r auto</span></span><br><span class="line">  <span class="comment">// eslintIntegration: false, //不让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="comment">// htmlWhitespaceSensitivity: &#x27;ignore&#x27;,</span></span><br><span class="line">  <span class="comment">// ignorePath: &#x27;.prettierignore&#x27;, // 不使用prettier格式化的文件填写在项目的.prettierignore文件中</span></span><br><span class="line">  <span class="comment">// jsxBracketSameLine: true, // 在jsx中把&#x27;&gt;&#x27; 是否单独放一行</span></span><br><span class="line">  <span class="comment">// jsxSingleQuote: true, // 在jsx中使用单引号代替双引号</span></span><br><span class="line">  <span class="comment">// parser: &#x27;babylon&#x27;, // 格式化的解析器，默认是babylon</span></span><br><span class="line">  <span class="comment">// requireConfig: false, // Require a &#x27;prettierconfig&#x27; to format prettier</span></span><br><span class="line">  <span class="comment">// stylelintIntegration: false, //不让prettier使用stylelint的代码格式进行校验</span></span><br><span class="line">  <span class="comment">// trailingComma: &#x27;es5&#x27;, // 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class="line">  <span class="comment">// tslintIntegration: false // 不让prettier使用tslint的代码格式进行校验=</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Commit-Message-规范"><a href="#Commit-Message-规范" class="headerlink" title="Commit Message 规范"></a>Commit Message 规范</h2><p>我们在使用 Git 托管代码时，规范化的 Commit Message 可以帮助大家直观清晰地理解每次修改的内容，不仅能帮助别人 Review，还可以有效地输出 ChangeLog。那么要想前端工程化项目更易于维护，最好有一套 Git 提交说明的 规范化模板</p>
<p>目前最受开发人员肯定的规范是前端框架 Angular 提出的 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular 提交信息规范</a>，包含 页眉(header)、正文(body)和页脚(footer)，每次提交必须包含页眉内容，每次提交的信息不超过 100 个字符，提交格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页眉设置"><a href="#页眉设置" class="headerlink" title="页眉设置"></a>页眉设置</h3><p>页眉的格式指定为提交类型(type)、作用域(scope，可选)和主题(subject)</p>
<h4 id="提交类型-type"><a href="#提交类型-type" class="headerlink" title="提交类型(type)"></a>提交类型(type)</h4><p>提交类型指定为下面其中一个：</p>
<ul>
<li>feat：新增功能</li>
<li>fix：Bug 修复</li>
<li>docs：文档更新</li>
<li>ci：脚本更新，修改了 CI 配置文件或脚本</li>
<li>pref：性能优化，提高性能的代码更改</li>
<li>build：更新构建，构建系统或者外部依赖项进行了修改、更新</li>
<li>test：新增测试，增加确实的测试或者矫正已存在的测试</li>
<li>refactor：代码重构，非新增功能也非修复缺陷</li>
<li>chore：事务变动，改动其他不影响代码的事务</li>
<li>revert：代码回滚，撤销某次代码提交</li>
<li>merge：分支合并，合并分支代码到其他分支</li>
<li>style：格式变动，不影响代码逻辑</li>
<li>release：版本发布</li>
</ul>
<h4 id="作用域-scope，可选"><a href="#作用域-scope，可选" class="headerlink" title="作用域(scope，可选)"></a>作用域(scope，可选)</h4><p>用于说明 commit 的影响范围（选填）<br>（比如按下面这些划分方案填写）</p>
<ul>
<li>按功能划分（如：数据层 - Data、视图层 - View 和 控制层 - Control）</li>
<li>按交互层划分（如：组件 - Component、布局 - Layout、流程 - Flow、视图 - View 和 页面 - Page）</li>
<li>按改动文件划分（如：某个文件 - Button.tsx，全部改动 -*）</li>
</ul>
<h4 id="主题-subject"><a href="#主题-subject" class="headerlink" title="主题(subject)"></a>主题(subject)</h4><p>用于说明 commit 的细节描述（选填）。以精炼简洁的文字（中文还是英文就看各自规定了，一般推荐使用英文）说明提交的改动，比如可以遵循这些规则：</p>
<ul>
<li>以动词开头（如：update，更新）</li>
<li>使用第一人称现在时</li>
<li>首字母无需大写，重点区分的（如某组件）首字母无需大写</li>
<li>不以句号（. &#x2F; 。）结尾</li>
</ul>
<p>commit 信息示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feat(Component): add Layout component</span><br><span class="line">feat(Button.tsx): change the default size of the button</span><br><span class="line">fix(EmitEvent): handle event on blur (closes #28)</span><br></pre></td></tr></table></figure>

<h3 id="正文设置"><a href="#正文设置" class="headerlink" title="正文设置"></a>正文设置</h3><p>和主题设置类似，使用命令式、现在时态</p>
<p>应该包含修改的动机以及和之前行为的对比</p>
<h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><h4 id="Breaking-changes"><a href="#Breaking-changes" class="headerlink" title="Breaking changes"></a>Breaking changes</h4><p>不兼容修改指的是本次提交修改了不兼容之前版本的 API 或者环境变量</p>
<p>所有不兼容修改都必须在页脚中作为中断更改块提到，以 BREAKING CHANGE:开头，后跟一个空格或者两个换行符，其余的信息就是对此次修改的描述，修改的理由和修改注释</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed and</span><br><span class="line">    the inject option <span class="keyword">for</span> the directive controller injection was removed.</span><br><span class="line"></span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line"></span><br><span class="line">    Before:</span><br><span class="line"></span><br><span class="line">    。。。</span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">    After:</span><br><span class="line"></span><br><span class="line">    。。。</span><br><span class="line">    。。。</span><br><span class="line"></span><br><span class="line">    The removed `inject` wasn<span class="string">&#x27;t generaly useful for directives so there should be no code using it.</span></span><br></pre></td></tr></table></figure>

<h4 id="引用提交的问题"><a href="#引用提交的问题" class="headerlink" title="引用提交的问题"></a>引用提交的问题</h4><p>如果本次提交目的是修改 issue 的话，需要在页脚引用该 issue</p>
<p>以关键字 Closes 开头，比如</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Closes <span class="comment">#234</span></span><br></pre></td></tr></table></figure>

<p>如果修改了多个 bug，以逗号隔开</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Closes <span class="comment">#123, #245, #992</span></span><br></pre></td></tr></table></figure>

<h3 id="回滚设置"><a href="#回滚设置" class="headerlink" title="回滚设置"></a>回滚设置</h3><p>当此次提交包含回滚(revert)操作，那么页眉以”revert:”开头，同时在正文中添加”This reverts commit hash”，其中 hash 值表示被回滚前的提交</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">revert:&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">This reverts commit <span class="built_in">hash</span></span><br><span class="line">&lt;other-body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure>

<p><br/><br/></p>
<h2 id="方案实现：-husky-commitlint"><a href="#方案实现：-husky-commitlint" class="headerlink" title="方案实现： husky+commitlint"></a>方案实现： <code>husky+commitlint</code></h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm i husky lint-staged @commitlint/cli @commitlint/config-conventional -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="初始化-husky，创建-husky-文件夹（本质就是创建要触发的-git-hooks）"><a href="#初始化-husky，创建-husky-文件夹（本质就是创建要触发的-git-hooks）" class="headerlink" title="初始化 husky，创建 .husky 文件夹（本质就是创建要触发的 git-hooks）"></a>初始化 husky，创建 .husky 文件夹（本质就是创建要触发的 git-hooks）</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx husky install</span><br><span class="line"><span class="comment"># 安装 git hooks，创建 .husky 目录</span></span><br><span class="line"><span class="comment"># 结果：husky - Git hooks installed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">npx husky-init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它会在 package.json 文件的 scripts 字段中</span></span><br><span class="line"><span class="comment"># 创建 &quot;prepare&quot;: &quot;husky install&quot; 命令</span></span><br><span class="line"><span class="comment"># 同时在 .husky 目录下创建 pre-commit 文件</span></span><br><span class="line"><span class="comment"># 结果：husky - created .husky/pre-commit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改-husky-x2F-pre-commit-文件："><a href="#修改-husky-x2F-pre-commit-文件：" class="headerlink" title="修改 .husky&#x2F;pre-commit 文件："></a>修改 .husky&#x2F;pre-commit 文件：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># npm test  # 这句删掉，改为下面这行，进行代码格式化检测</span></span><br><span class="line">npx lint-staged</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置-package-json-文件内容"><a href="#配置-package-json-文件内容" class="headerlink" title="配置 package.json 文件内容"></a>配置 package.json 文件内容</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* lint-staged 配置 */</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.&#123;js,jsx,vue,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;eslint --fix --ext .js,.jsx,.vue,.ts,.tsx&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-eslintrc-cjs-文件和-pretterrc-cjs-文件"><a href="#创建-eslintrc-cjs-文件和-pretterrc-cjs-文件" class="headerlink" title="创建 .eslintrc.cjs 文件和 .pretterrc.cjs 文件"></a>创建 .eslintrc.cjs 文件和 .pretterrc.cjs 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.cjs 文件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .pretterrc.cjs 文件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>;</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>;</span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">80</span>;</span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">  <span class="attr">arrowParens</span>: <span class="string">&#x27;avoid&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在-husky-目录下添加-commit-msg-hook"><a href="#在-husky-目录下添加-commit-msg-hook" class="headerlink" title="在 .husky 目录下添加 commit-msg hook"></a>在 .husky 目录下添加 commit-msg hook</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg <span class="string">&#x27;npx --no -- commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果：husky - created .husky/commit-msg</span></span><br><span class="line"><span class="comment"># .husky/commit-msg 文件内容：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx --no -- commitlint --edit <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建-commitlint-config-cjs-文件"><a href="#创建-commitlint-config-cjs-文件" class="headerlink" title="创建 commitlint.config.cjs 文件"></a>创建 commitlint.config.cjs 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  规范commit日志</span></span><br><span class="line"><span class="comment">  https://commitlint.js.org</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> types = [</span><br><span class="line">    <span class="string">&#x27;build&#x27;</span>, <span class="comment">// 主要目的是修改项目构建系统（例如glup，webpack，rollup的配置等）的提交</span></span><br><span class="line">    <span class="string">&#x27;ci&#x27;</span>, <span class="comment">// 修改项目的持续集成流程（Kenkins、Travis等）的提交</span></span><br><span class="line">    <span class="string">&#x27;chore&#x27;</span>, <span class="comment">// 构建过程或辅助工具的变化</span></span><br><span class="line">    <span class="string">&#x27;docs&#x27;</span>, <span class="comment">// 文档提交（documents）</span></span><br><span class="line">    <span class="string">&#x27;feat&#x27;</span>, <span class="comment">// 新增功能（feature）</span></span><br><span class="line">    <span class="string">&#x27;fix&#x27;</span>, <span class="comment">// 修复 bug</span></span><br><span class="line">    <span class="string">&#x27;pref&#x27;</span>, <span class="comment">// 性能、体验相关的提交</span></span><br><span class="line">    <span class="string">&#x27;refactor&#x27;</span>, <span class="comment">// 代码重构</span></span><br><span class="line">    <span class="string">&#x27;revert&#x27;</span>, <span class="comment">// 回滚某个更早的提交</span></span><br><span class="line">    <span class="string">&#x27;style&#x27;</span>, <span class="comment">// 不影响程序逻辑的代码修改、主要是样式方面的优化、修改</span></span><br><span class="line">    <span class="string">&#x27;test&#x27;</span> <span class="comment">// 测试相关的开发,</span></span><br><span class="line">  ],</span><br><span class="line">  typeEnum = &#123;</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;type-enum&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, types]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">value</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> types;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">Level [0..2]: 0 disables the rule. For 1 it will be considered a warning for 2 an error.</span></span><br><span class="line"><span class="comment">https://commitlint.js.org/#/reference-rules</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: typeEnum.<span class="property">rules</span>[<span class="string">&#x27;type-enum&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-full-stop&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">0</span>, <span class="string">&#x27;never&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="配置完毕，测试"><a href="#配置完毕，测试" class="headerlink" title="配置完毕，测试"></a>配置完毕，测试</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➡️ git commit -m <span class="string">&quot;tes: 错误示例 🙅&lt;200d&gt;♂️&quot;</span></span><br><span class="line"></span><br><span class="line">✔ Preparing lint-staged...</span><br><span class="line">✔ Running tasks <span class="keyword">for</span> staged files...</span><br><span class="line">✔ Applying modifications from tasks...</span><br><span class="line">✔ Cleaning up temporary files...</span><br><span class="line"></span><br><span class="line">Commit Msg:  tes: 错误示例 🙅‍♂️</span><br><span class="line"></span><br><span class="line">   ERROR  invalid commit message format.</span><br><span class="line"></span><br><span class="line">  Proper commit message format is required <span class="keyword">for</span> automated changelog generation. Examples:</span><br><span class="line"></span><br><span class="line">    feat(compiler): add <span class="string">&#x27;comments&#x27;</span> option</span><br><span class="line">    fix(input): handle events on blur (close <span class="comment">#28)</span></span><br><span class="line"></span><br><span class="line">  See .github/commit-convention.md <span class="keyword">for</span> more details.</span><br><span class="line"></span><br><span class="line">husky - commit-msg hook exited with code 1 (error)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，整体来说也只是一个推荐性的规范方案，commit 同样可以通过 -n 或者是 -no-verify 直接绕开 commit 检测</p>
<h2 id="添加-ChangeLog"><a href="#添加-ChangeLog" class="headerlink" title="添加 ChangeLog"></a>添加 ChangeLog</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pnpm i conventional-changelog-cli -D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置-scripts-（packages-json）"><a href="#配置-scripts-（packages-json）" class="headerlink" title="配置 scripts （packages.json）"></a>配置 scripts （packages.json）</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>conventional-changelog-cli 不会覆盖任何以前的变更日志。 新增的日志基于自上一个 commit 的 “Feature”, “Fix”, “Performance Improvement” 或 “Breaking Changes”</p>
<h2 id="另外：结合-husky-和自定义-verifyCommits-js-来实现"><a href="#另外：结合-husky-和自定义-verifyCommits-js-来实现" class="headerlink" title="另外：结合 husky 和自定义 verifyCommits.js 来实现"></a>另外：结合 husky 和自定义 verifyCommits.js 来实现</h2><p>主要处理逻辑是，修改<code>.husky/commit-commit</code>文件中的执行语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scripts/verifyCommits.js 即为我们自定义的校验文件</span></span><br><span class="line"><span class="comment"># .husky/commit-msg 文件内容：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"><span class="comment"># npx --no -- commitlint --edit &quot;&quot; 将此语句改为下面直接node执行脚本。</span></span><br><span class="line">node scripts/verifyCommits.js <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>$1</code> 必须在 <code>.husky/commit-msg</code> 文件中写上（在我们使用<code> git commit -m &quot;[msg]&quot;</code> 时，会传递给 <code>$1</code> 参数），否则我们执行自定义校验 commit 文件时是无法拿到 commit 信息 的（当时花费好长时间去踩这个问题点）</p>
</blockquote>
<h3 id="创建-scripts-x2F-verifyCommits-js-文件"><a href="#创建-scripts-x2F-verifyCommits-js-文件" class="headerlink" title="创建 scripts&#x2F;verifyCommits.js 文件"></a>创建 scripts&#x2F;verifyCommits.js 文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);</span><br><span class="line"><span class="comment">// const msgPath = process.env.GIT_PARAMS // 此为 undefined 拿不到 msg 信息</span></span><br><span class="line"><span class="comment">// process.env 对象中没有任何 commit 信息，process.argv 中本来也没有</span></span><br><span class="line"><span class="comment">// pre-commit 里的 $1 必填，这里才能拿到本次的 CommitMsg</span></span><br><span class="line"><span class="keyword">const</span> msgPath =</span><br><span class="line">  process.<span class="property">env</span>.<span class="property">GIT_PARAMS</span> || process.<span class="property">env</span>.<span class="property">HUSKY_GIT_PARAMS</span> || process.<span class="property">argv</span>[<span class="number">2</span>]; <span class="comment">//使用环境变量获取到commit message</span></span><br><span class="line"><span class="comment">// console.log(process.argv,&#x27;process.argv&#x27;);</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(msgPath, <span class="string">&#x27;utf-8&#x27;</span>).<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">// 空行，下面打印提示信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">bgBlueBright</span>.<span class="title function_">white</span>(<span class="string">&#x27;Commit Msg: &#x27;</span>), msg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(); <span class="comment">// 打印提示信息后空行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commitRE =</span><br><span class="line">  <span class="regexp">/^(revert: )?(feat|fix|docs|style|refactor|perf|test|workflow|ci|chore|types|build)(\(.+\))?: .&#123;1,50&#125;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!commitRE.<span class="title function_">test</span>(msg)) &#123;</span><br><span class="line">  <span class="comment">// 下面是一些错误日志提醒</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(</span><br><span class="line">    <span class="string">`  <span class="subst">$&#123;chalk.bgRed.white(<span class="string">&#x27; ERROR &#x27;</span>)&#125;</span> <span class="subst">$&#123;chalk.red(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">`提交日志不符合规范`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>\n\n<span class="subst">$&#123;chalk.red(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">`  合法的提交日志格式如下(emoji 和 模块可选填)：\n\n`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>    </span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`[&lt;emoji&gt;] [revert: ?]&lt;type&gt;[(scope)?]: &lt;message&gt;\n`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`💥 feat(模块): 添加了个很棒的功能`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`🐛 fix(模块): 修复了一些 bug`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`📝 docs(模块): 更新了一下文档`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`🌷 UI(模块): 修改了一下样式`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`🏰 chore(模块): 对脚手架做了些更改`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(<span class="string">`🌐 locale(模块): 为国际化做了微小的贡献\n`</span>)&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.green(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">`其他提交类型: refactor, perf, workflow, build, CI, typos, tests, types, wip, release, dep\n`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span></span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;chalk.red(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">`See https://github.com/vuejs/core/blob/main/.github/commit-convention.md\n`</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>); <span class="comment">// 如果不规范退出运行进程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const childProcess = require(&#x27;child_process&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 提交记录</span></span><br><span class="line"><span class="comment">// const commitStages = childProcess.execSync(&#x27;git diff --name-status HEAD~3&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//   encoding: &#x27;utf8&#x27;,</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// console.log(&#x27;提交记录：&#x27;, commitStages);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
        <tag>前端工程化</tag>
        <tag>husky</tag>
        <tag>eslint</tag>
        <tag>prettier</tag>
        <tag>commitlint</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 &amp;&amp; React 对比学习</title>
    <url>/2023/study-notes/vue3-react-learn/</url>
    <content><![CDATA[<h2 id="Vue3-x2F-React-对比学习"><a href="#Vue3-x2F-React-对比学习" class="headerlink" title="Vue3&#x2F;React 对比学习"></a>Vue3&#x2F;React 对比学习</h2><p>针对以下几个点，参照官方文档，进行对比学习。</p>
<ul>
<li>添加样式</li>
<li>组件传值</li>
<li>操作 DOM</li>
<li>条件渲染</li>
<li>列表渲染</li>
<li>计算属性</li>
<li>侦听器</li>
</ul>
<blockquote>
<p><strong>说明</strong>： vue3.0 的示例中，使用了 unplugin-auto-import&#x2F;vite。<br>自动导入了 Vue 相关函数，如：ref, reactive, defineProps, defineEmits 等</p>
</blockquote>
<span id="more"></span>

<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><h4 id="vue3-0"><a href="#vue3-0" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/class-and-style.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 给 :class (v-bind:class 的缩写) 传递一个对象来动态切换 class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 直接绑定一个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> classObject = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">active</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定内联样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在组件上使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果你的组件有多个根元素，你将需要指定哪个根元素来接收这个 class。你可以通过组件的 $attrs 属性来实现指定： --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyComponent 模板使用 $attrs 时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;$attrs.class&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这将被渲染为： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react"><a href="#react" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/JedWatson/classnames#readme</span></span><br><span class="line"><span class="comment">// A simple JavaScript utility for conditionally joining classNames together.</span></span><br><span class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">className</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">item-ddd</span>&#x27;, &#x27;<span class="attr">item-eee</span>&#x27;]&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span> // <span class="attr">使用</span> <span class="attr">className</span> <span class="attr">来指定一个</span> <span class="attr">CSS</span> <span class="attr">的</span> <span class="attr">class</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">backgroundColor:</span> &#x27;<span class="attr">black</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">color:</span> &#x27;<span class="attr">pink</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Improve the videophone<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Prepare aeronautics lectures<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Work on the alcohol-fuelled engine<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;classNames(props.className,</span> &#x27;<span class="attr">aaa</span>&#x27;, &#x27;<span class="attr">bbb</span>&#x27;)&#125;&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><h4 id="vue3-0-1"><a href="#vue3-0-1" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/components/props.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:data</span>=<span class="string">&quot;data&quot;</span> <span class="attr">:version</span>=<span class="string">&quot;version&quot;</span> @<span class="attr">submit</span>=<span class="string">&quot;emitFun&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;xiao ming&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> version = <span class="string">&#x27;3.0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">emitFun</span> = e =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;emitFun&#x27;</span>, e);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; props.data.name &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&#123;&#123; data.age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; version &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleSubmit&quot;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="title class_">Object</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">version</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;submit&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props 单向数据流：所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着你不应该在子组件中去更改一个 prop。</span></span></span><br><span class="line"><span class="language-javascript">    props.<span class="property">version</span> = <span class="string">&#x27;2.0&#x27;</span>; <span class="comment">// ❌ 警告！prop 是只读的！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，而对 Vue 来说，禁止这样的改动，虽然可能生效，但有很大的性能损耗，比较得不偿失。</span></span></span><br><span class="line"><span class="language-javascript">    props.<span class="property">data</span>.<span class="property">age</span> = <span class="number">33</span>; <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在最佳实践中，你应该尽可能避免这样的更改，除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该抛出一个事件来通知父组件做出改变</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="string">&#x27;ok!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react-1"><a href="#react-1" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/learn/passing-props-to-a-component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xiao ming&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="string">&#x27;3.0&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">emitFun</span> = e =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;emitFun&#x27;</span>, e);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> <span class="attr">version</span>=<span class="string">&#123;version&#125;</span> <span class="attr">submit</span>=<span class="string">&#123;emitFun&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;props&#x27;</span>, props);</span><br><span class="line">  <span class="comment">// 子传父</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    props.<span class="title function_">submit</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.data.name&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;props.data.age&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.version&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure>

<h3 id="操作-DOM"><a href="#操作-DOM" class="headerlink" title="操作 DOM"></a>操作 DOM</h3><h4 id="vue3-0-2"><a href="#vue3-0-2" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/template-refs.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> input = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> child = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// null 注意，你只可以在组件挂载后才能访问模板引用。如果你想在模板中的表达式上访问 input，在初次渲染时会是 null。这是因为在初次渲染前这个元素还不存在呢！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>); <span class="comment">// &lt;div&gt;&lt;input&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">value</span>); <span class="comment">// Proxy 对象 child.value.a = 1; child.value.b = 2;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 如果你需要侦听一个模板引用 ref 的变化，确保考虑到其值为 null 的情况：</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (input.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      input.<span class="property">value</span>.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 此时还未挂载，或此元素已经被卸载（例如通过 v-if 控制）</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 使用了 <span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> 的组件是默认私有的：一个父组件无法访问到一个使用了 <span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"> 的子组件中的任何东西，除非子组件在其中通过 defineExpose 宏显式暴露：</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">  <span class="keyword">const</span> a = <span class="number">1</span>;</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">  <span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="number">2</span>);</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"></span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">  <span class="title function_">defineExpose</span>(&#123;</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">    a,</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">    b</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-handlebars"></span></span></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react-2"><a href="#react-2" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/reference/react/useRef</span></span><br><span class="line"><span class="comment">// https://zh-hans.react.dev/learn/manipulating-the-dom-with-refs</span></span><br><span class="line"><span class="comment">// https://zh-hans.react.dev/reference/react/useImperativeHandle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; forwardRef, useEffect, useImperativeHandle, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> child = <span class="title function_">useRef</span>(<span class="literal">null</span>); <span class="comment">// react-dom.development.js:86 Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">current</span>); <span class="comment">// null  🚩 不要在渲染期间读取 ref</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">current</span>); <span class="comment">// null  🚩 不要在渲染期间读取 ref</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ✅ 你可以在 effects 中读取和写入 ref</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">current</span>); <span class="comment">// &lt;div&gt;&lt;input&gt;&lt;/div&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">current</span>); <span class="comment">// &#123;a: 1, b: 2&#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ✅ 你可以在事件处理程序中读取和写入 ref</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">current</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">current</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;input&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&#123;child&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">&#123;&#125;, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(</span><br><span class="line">    ref,</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Parent</span>;</span><br></pre></td></tr></table></figure>

<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="vue3-0-3"><a href="#vue3-0-3" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/conditional.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if,v-else,v-else-if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-show --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if vs. v-show​</span></span><br><span class="line"><span class="comment">v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</span></span><br><span class="line"><span class="comment">v-if 也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</span></span><br><span class="line"><span class="comment">相比之下，v-show 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换。</span></span><br><span class="line"><span class="comment">总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 v-show 较好；如果在运行时绑定条件很少改变，则 v-if 会更合适。 --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react-3"><a href="#react-3" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/learn/conditional-rendering</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Item</span>(<span class="params">&#123; name, isPacked &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 一、选择性地包含 JSX</span></span><br><span class="line">  <span class="comment">// if (isPacked) &#123;</span></span><br><span class="line">  <span class="comment">//   return &lt;li className=&quot;item&quot;&gt;&#123;name&#125; ✔&lt;/li&gt;;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return &lt;li className=&quot;item&quot;&gt;&#123;name&#125;&lt;/li&gt;;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二、与运算符（&amp;&amp;）</span></span><br><span class="line">  <span class="comment">// &lt;li className=&quot;item&quot;&gt;</span></span><br><span class="line">  <span class="comment">//   &#123;name&#125; &#123;isPacked &amp;&amp; &#x27;✔&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// &lt;/li&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三、三目运算符（? :） PS:选择性地将 JSX 赋值给变量</span></span><br><span class="line">  <span class="keyword">const</span> itemContent = isPacked ? <span class="language-xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span>&#123;name + &#x27; ✔&#x27;&#125;<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span> : name;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;itemContent&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">PackingList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sally Ride 的行李清单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">isPacked</span>=<span class="string">&#123;true&#125;</span> <span class="attr">name</span>=<span class="string">&quot;宇航服&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">isPacked</span>=<span class="string">&#123;true&#125;</span> <span class="attr">name</span>=<span class="string">&quot;带金箔的头盔&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">isPacked</span>=<span class="string">&#123;false&#125;</span> <span class="attr">name</span>=<span class="string">&quot;Tam 的照片&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 摘要</span></span><br><span class="line"><span class="comment">// 在 React，你可以使用 JavaScript 来控制分支逻辑。</span></span><br><span class="line"><span class="comment">// 你可以使用 if 语句来选择性地返回 JSX 表达式。</span></span><br><span class="line"><span class="comment">// 你可以选择性地将一些 JSX 赋值给变量，然后用大括号将其嵌入到其他 JSX 中。</span></span><br><span class="line"><span class="comment">// 在 JSX 中，&#123;cond ? &lt;A /&gt; : &lt;B /&gt;&#125; 表示 “当 cond 为真值时, 渲染 &lt;A /&gt;，否则 &lt;B /&gt;”。</span></span><br><span class="line"><span class="comment">// 在 JSX 中，&#123;cond &amp;&amp; &lt;A /&gt;&#125; 表示 “当 cond 为真值时, 渲染 &lt;A /&gt;，否则不进行渲染”。</span></span><br><span class="line"><span class="comment">// 快捷的表达式很常见，但如果你更倾向于使用 if，你也可以不使用它们，。</span></span><br></pre></td></tr></table></figure>

<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="vue3-0-4"><a href="#vue3-0-4" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/list.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高。这意味着 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- key 这个特殊的 attribute 主要作为 Vue 的虚拟 DOM 算法提示，在比较新旧节点列表时用于识别 vnode。 在没有 key 的情况下，Vue 将使用一种最小化元素移动的算法，并尽可能地就地更新/复用相同类型的元素。如果传了 key，则将根据 key 的变化顺序来重新排列元素，并且将始终移除/销毁 key 已经不存在的元素。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不建议使用 index 作为key， 数组项的顺序在插入、删除或者重新排序等操作中会发生改变，此时把索引顺序用作 key 值会产生一些微妙且令人困惑的 bug --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</span></span><br><span class="line"><span class="comment">push()</span></span><br><span class="line"><span class="comment">pop()</span></span><br><span class="line"><span class="comment">shift()</span></span><br><span class="line"><span class="comment">unshift()</span></span><br><span class="line"><span class="comment">splice()</span></span><br><span class="line"><span class="comment">sort()</span></span><br><span class="line"><span class="comment">reverse()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span>&#123;&#123; todo.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react-4"><a href="#react-4" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/learn/rendering-lists</span></span><br><span class="line"><span class="comment">// 用 key 保持列表项的顺序</span></span><br><span class="line"><span class="comment">// 这些 key 会告诉 React，每个组件对应着数组里的哪一项，所以 React 可以把它们匹配起来。这在数组项进行移动（例如排序）、插入或删除等操作时非常重要。一个合适的 key 可以帮助 React 推断发生了什么，从而得以正确地更新 DOM 树。</span></span><br><span class="line"><span class="comment">// React 中为什么需要 key？</span></span><br><span class="line"><span class="comment">// 设想一下，假如你桌面上的文件都没有文件名，取而代之的是，你需要通过文件的位置顺序来区分它们———第一个文件，第二个文件，以此类推。也许你也不是不能接受这种方式，可是一旦你删除了其中的一个文件，这种组织方式就会变得混乱无比。原来的第二个文件可能会变成第一个文件，第三个文件会成为第二个文件……</span></span><br><span class="line"><span class="comment">// React 里需要 key 和文件夹里的文件需要有文件名的道理是类似的。它们（key 和文件名）都让我们可以从众多的兄弟元素中唯一标识出某一项（JSX 节点或文件）。而一个精心选择的 key 值所能提供的信息远远不止于这个元素在数组中的位置。即使元素的位置在渲染的过程中发生了改变，它提供的 key 值也能让 React 在整个生命周期中一直认得它。</span></span><br><span class="line"><span class="comment">// 陷阱：你可能会想直接把数组项的索引当作 key 值来用，实际上，如果你没有显式地指定 key 值，React 确实默认会这么做。但是数组项的顺序在插入、删除或者重新排序等操作中会发生改变，此时把索引顺序用作 key 值会产生一些微妙且令人困惑的 bug。</span></span><br><span class="line"><span class="comment">// 与之类似，请不要在运行过程中动态地产生 key，像是 key=&#123;Math.random()&#125; 这种方式。这会导致每次重新渲染后的 key 值都不一样，从而使得所有的组件和 DOM 元素每次都要重新创建。这不仅会造成运行变慢的问题，更有可能导致用户输入的丢失。所以，使用能从给定数据中稳定取得的值才是明智的选择。</span></span><br><span class="line"><span class="comment">// 有一点需要注意，组件不会把 key 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： &lt;Profile key=&#123;id&#125; userId=&#123;id&#125; /&gt;。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">0</span>, <span class="comment">// 在 JSX 中作为 key 使用</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;凯瑟琳·约翰逊&#x27;</span>,</span><br><span class="line">    <span class="attr">profession</span>: <span class="string">&#x27;数学家&#x27;</span>,</span><br><span class="line">    <span class="attr">accomplishment</span>: <span class="string">&#x27;太空飞行相关数值的核算&#x27;</span>,</span><br><span class="line">    <span class="attr">imageId</span>: <span class="string">&#x27;MK3eW3A&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>, <span class="comment">// 在 JSX 中作为 key 使用</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;马里奥·莫利纳&#x27;</span>,</span><br><span class="line">    <span class="attr">profession</span>: <span class="string">&#x27;化学家&#x27;</span>,</span><br><span class="line">    <span class="attr">accomplishment</span>: <span class="string">&#x27;北极臭氧空洞的发现&#x27;</span>,</span><br><span class="line">    <span class="attr">imageId</span>: <span class="string">&#x27;mynHUSa&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>, <span class="comment">// 在 JSX 中作为 key 使用</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;穆罕默德·阿卜杜勒·萨拉姆&#x27;</span>,</span><br><span class="line">    <span class="attr">profession</span>: <span class="string">&#x27;物理学家&#x27;</span>,</span><br><span class="line">    <span class="attr">accomplishment</span>: <span class="string">&#x27;关于基本粒子间弱相互作用和电磁相互作用的统一理论&#x27;</span>,</span><br><span class="line">    <span class="attr">imageId</span>: <span class="string">&#x27;bE7W1ji&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>, <span class="comment">// 在 JSX 中作为 key 使用</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;珀西·莱温·朱利亚&#x27;</span>,</span><br><span class="line">    <span class="attr">profession</span>: <span class="string">&#x27;化学家&#x27;</span>,</span><br><span class="line">    <span class="attr">accomplishment</span>: <span class="string">&#x27;开创性的可的松药物、类固醇和避孕药&#x27;</span>,</span><br><span class="line">    <span class="attr">imageId</span>: <span class="string">&#x27;IOjWm71&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">4</span>, <span class="comment">// 在 JSX 中作为 key 使用</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;苏布拉马尼扬·钱德拉塞卡&#x27;</span>,</span><br><span class="line">    <span class="attr">profession</span>: <span class="string">&#x27;天体物理学家&#x27;</span>,</span><br><span class="line">    <span class="attr">accomplishment</span>: <span class="string">&#x27;白矮星质量计算&#x27;</span>,</span><br><span class="line">    <span class="attr">imageId</span>: <span class="string">&#x27;lrWQx8l&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> listItems = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;person.name&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#x27; &#x27; + person.profession + &#x27; &#x27;&#125;因&#123;person.accomplishment&#125;而闻名世界</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  ));</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><h4 id="vue3-0-5"><a href="#vue3-0-5" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/computed.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个计算属性 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 计算属性缓存 vs 方法</span></span><br><span class="line"><span class="comment">若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的</span></span><br><span class="line"><span class="comment">不同之处在于计算属性值会基于其响应式依赖被缓存</span></span><br><span class="line"><span class="comment">一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 author.books 不改变，无论多少次访问 publishedBooksMessage 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</span></span><br><span class="line"><span class="comment">相比之下，方法调用总是会在重渲染发生时再次执行函数。</span></span><br><span class="line"><span class="comment">为什么需要缓存呢？想象一下我们有一个非常耗性能的计算属性 list，需要循环一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于 list。没有缓存的话，我们会重复执行非常多次 list 的 getter，然而这实际上没有必要！如果你确定不需要缓存，那么也可以使用方法调用。 --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="react-5"><a href="#react-5" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/reference/react/useMemo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// useMemo 是一个 React Hook，它在每次重新渲染的时候能够缓存计算的结果</span></span><br><span class="line"><span class="comment">// 通过将 visibleTodos 的计算函数包裹在 useMemo 中，你可以确保它在重新渲染之间具有相同值，直到依赖项发生变化。你 不必 将计算函数包裹在 useMemo 中，除非你出于某些特定原因这样做。在此示例中，这样做的原因是你将它传递给包裹在 memo 中的组件，这使得它可以跳过重新渲染。</span></span><br><span class="line"><span class="keyword">import</span> &#123; useMemo, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodoList</span>(<span class="params">&#123; todos, tab, theme &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 告诉 React 在重新渲染之间缓存你的计算结果...</span></span><br><span class="line">  <span class="keyword">const</span> visibleTodos = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">filterTodos</span>(todos, tab),</span><br><span class="line">    [todos, tab] <span class="comment">// ...所以只要这些依赖项不变...</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;theme&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* ... List 也就会接受到相同的 props 并且会跳过重新渲染 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">List</span> <span class="attr">items</span>=<span class="string">&#123;visibleTodos&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">List</span> = <span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">List</span>(<span class="params">&#123; items &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><h4 id="vue3-0-6"><a href="#vue3-0-6" class="headerlink" title="vue3.0"></a>vue3.0</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://cn.vuejs.org/guide/essentials/watchers.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> question = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> answer = <span class="title function_">ref</span>(<span class="string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 可以直接侦听一个 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">    question,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> (newQuestion, oldQuestion) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (newQuestion.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        answer.<span class="property">value</span> = <span class="string">&#x27;Thinking...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://yesno.wtf/api&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          answer.<span class="property">value</span> = (<span class="keyword">await</span> res.<span class="title function_">json</span>()).<span class="property">answer</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">          answer.<span class="property">value</span> = <span class="string">&#x27;Error! Could not reach the API. &#x27;</span> + error;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 直接给 watch() 传入一个响应式对象，会隐式地创建一个深层侦听器——该回调函数在所有嵌套的变更时都会被触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 相比之下，一个返回响应式对象的 getter 函数，只有在返回不同的对象时，才会触发回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 显式地加上 deep 选项，强制转成深层侦听器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 即时回调的侦听器: 通过传入 immediate: true 选项来强制侦听器的回调立即执行</span></span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 侦听数据源类型</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个 ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function"><span class="params">newX</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function"><span class="params">sum</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，你不能直接侦听响应式对象的属性值，例如:</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，因为 watch() 得到的参数是一个 number</span></span><br><span class="line"><span class="title function_">watch</span>(obj.<span class="property">count</span>, <span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要用一个返回该属性的 getter 函数</span></span><br><span class="line"><span class="comment">// 提供一个 getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// watchEffect()</span></span><br><span class="line"><span class="keyword">const</span> todoId = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  todoId,</span><br><span class="line">  <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 watchEffect()</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这个例子中，回调会立即执行，不需要指定 immediate: true。在执行期间，它会自动追踪 todoId.value 作为依赖（和计算属性类似）。每当 todoId.value 变化时，回调会再次执行。有了 watchEffect()，我们不再需要明确传递 todoId 作为源值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// watch vs. watchEffect​</span></span><br><span class="line"><span class="comment">// watch 和 watchEffect 都能响应式地执行有副作用的回调。它们之间的主要区别是追踪响应式依赖的方式：</span></span><br><span class="line"><span class="comment">// - watch 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调。watch 会避免在发生副作用时追踪依赖，因此，我们能更加精确地控制回调函数的触发时机。</span></span><br><span class="line"><span class="comment">// - watchEffect，则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。这更方便，而且代码往往更简洁，但有时其响应性依赖关系会不那么明确。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调的触发时机</span></span><br><span class="line"><span class="comment">// 如果想在侦听器回调中能访问被 Vue 更新之后的 DOM，你需要指明 flush: &#x27;post&#x27; 选项</span></span><br><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置刷新的 watchEffect() 有个更方便的别名 watchPostEffect()</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watchPostEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 在 Vue 更新后执行 */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="react-6"><a href="#react-6" class="headerlink" title="react"></a>react</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://zh-hans.react.dev/reference/react/useEffect</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createConnection &#125; <span class="keyword">from</span> <span class="string">&#x27;./chat.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChatRoom</span>(<span class="params">&#123; roomId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [serverUrl, setServerUrl] = <span class="title function_">useState</span>(<span class="string">&#x27;https://localhost:1234&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = <span class="title function_">createConnection</span>(serverUrl, roomId);</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      connection.<span class="title function_">disconnect</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [serverUrl, roomId]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个例子: 在自定义 Hook 中封装 Effect</span></span><br><span class="line"><span class="comment">// 这个 useChatRoom 自定义 Hook 把 Effect 的逻辑“隐藏”在一个更具声明性的 API 之后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useChatRoom</span>(<span class="params">&#123; serverUrl, roomId &#125;</span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      <span class="attr">serverUrl</span>: serverUrl,</span><br><span class="line">      <span class="attr">roomId</span>: roomId</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> connection = <span class="title function_">createConnection</span>(options);</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> connection.<span class="title function_">disconnect</span>();</span><br><span class="line">  &#125;, [roomId, serverUrl]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后你可以像这样从任何组件使用它</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChatRoom</span>(<span class="params">&#123; roomId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [serverUrl, setServerUrl] = <span class="title function_">useState</span>(<span class="string">&#x27;https://localhost:1234&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useChatRoom</span>(&#123;</span><br><span class="line">    <span class="attr">roomId</span>: roomId,</span><br><span class="line">    <span class="attr">serverUrl</span>: serverUrl</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Vue3.0</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>node 相关常备命令</title>
    <url>/2022/slag/about-node-npm/</url>
    <content><![CDATA[<h3 id="清空-node-modules-缓存"><a href="#清空-node-modules-缓存" class="headerlink" title="清空 node_modules 缓存"></a>清空 node_modules 缓存</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 删除package-lock.json</span><br><span class="line">2. npm cache clean -f</span><br><span class="line">3. 删除npm_nodemodules</span><br><span class="line">4. npm install</span><br></pre></td></tr></table></figure>

<h3 id="nvm-使用"><a href="#nvm-使用" class="headerlink" title="nvm 使用"></a>nvm 使用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有安装的版本</span></span><br><span class="line">$ nvm <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 列出所有远程服务器的版本（官方 node version list）</span></span><br><span class="line">$ nvm ls-remote</span><br><span class="line"><span class="comment"># 显示当前的版本</span></span><br><span class="line">$ nvm current</span><br><span class="line"><span class="comment"># 给不同的版本号添加别名</span></span><br><span class="line">$ nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;</span><br><span class="line"><span class="comment"># 删除已定义的别名</span></span><br><span class="line">$ nvm <span class="built_in">unalias</span> &lt;name&gt;</span><br><span class="line"><span class="comment"># 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</span></span><br><span class="line">$ nvm reinstall-packages &lt;version&gt;</span><br><span class="line"><span class="comment"># 查看更多命令可在终端输入</span></span><br><span class="line">$ nvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本，可模糊安装，如：安装 v4.4.0，既可 $ nvm install v4.4.0，又可 $ nvm install 4.4</span></span><br><span class="line">$ nvm install &lt;version&gt;</span><br><span class="line"><span class="comment"># 删除已安装的指定版本，语法与 install 用法一致</span></span><br><span class="line">$ nvm uninstall &lt;version&gt;</span><br><span class="line"><span class="comment"># 临时版本 - 只在当前窗口生效指定版本</span></span><br><span class="line">$ nvm use &lt;version&gt;</span><br><span class="line"><span class="comment"># 永久版本 - 所有窗口生效指定版本</span></span><br><span class="line">$ nvm <span class="built_in">alias</span> default &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h3 id="node、nvm、npm、npx、nrm-区别"><a href="#node、nvm、npm、npx、nrm-区别" class="headerlink" title="node、nvm、npm、npx、nrm 区别"></a><code>node</code>、<code>nvm</code>、<code>npm</code>、<code>npx</code>、<code>nrm</code> 区别</h3><ul>
<li>node：是一个基于 Chrome V8 引擎的 JS 运行环境。</li>
<li>npm：是 node.js 默认的包管理系统（用 JavaScript 编写的），在安装的 node 的时候，npm 也会跟着一起安装，管理 node 中的第三方插件。</li>
<li>npx：npm 从 v5.2.0 开始新增了 npx 命令，&gt;&#x3D; 该版本会自动安装 npx，附带：<a href="https://blog.csdn.net/zz00008888/article/details/126117685">npx 有什么作用跟意义？为什么要有 npx？什么场景使用？</a>。</li>
<li>nrm：是一个 npm 源管理工具，使用它可以快速切换 npm 源，默认是官方源，当 npm 下载包过慢时，可能需要切换到第三方源（例如：淘宝、科大…），还有公司私有源地址等等。</li>
<li>nvm：node 版本管理器，也就是说：一个 nvm 可以管理多个 node 版本（包含 npm 与 npx），可以方便快捷的 安装、切换 不同版本的 node。</li>
</ul>
<h3 id="node、nvm、npm、npx、nrm-关系"><a href="#node、nvm、npm、npx、nrm-关系" class="headerlink" title="node、nvm、npm、npx、nrm 关系"></a><code>node</code>、<code>nvm</code>、<code>npm</code>、<code>npx</code>、<code>nrm</code> 关系</h3><p>nvm 管理 node (包含 npm 与 npx) 的版本，npm 可以管理 node 的第三方插件，nrm 可以管理 npm 的源地址（当然也可以直接使用 npm 自带命令管理，看个人习惯）。</p>
<p>切换不同的 node 版本，npm 与 npx 的版本也会跟着变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nvm use v8.16.0</span><br><span class="line">Now using node v8.16.0 (npm v6.4.1)</span><br><span class="line"></span><br><span class="line">$ nvm use v14.15.4</span><br><span class="line">Now using node v14.15.4 (npm v6.14.10)</span><br><span class="line"></span><br><span class="line">$ nvm use v18.6.0</span><br><span class="line">Now using node v18.6.0 (npm v8.13.2)</span><br></pre></td></tr></table></figure>

<h3 id="Mac-系统-Node-版本管理"><a href="#Mac-系统-Node-版本管理" class="headerlink" title="Mac 系统 Node 版本管理"></a>Mac 系统 Node 版本管理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1. 查看所有node版本</span><br><span class="line">npm view node versions</span><br><span class="line">2. 全局安装n模块</span><br><span class="line">npm install -g n</span><br><span class="line">3. 安装指定版本</span><br><span class="line">sudo n XXX</span><br><span class="line">4. 卸载指定版本</span><br><span class="line">sudo n <span class="built_in">rm</span> XXX</span><br></pre></td></tr></table></figure>

<h3 id="fork-别人的代码，更新主分支最新代码"><a href="#fork-别人的代码，更新主分支最新代码" class="headerlink" title="fork 别人的代码，更新主分支最新代码"></a>fork 别人的代码，更新主分支最新代码</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fork分支更新流程：</span><br><span class="line">1. 首先要确认是否建立了主项目的远程源: $ git remote -v</span><br><span class="line">2. 则说明没有建立远程的repo源，需要添加主repo的源：</span><br><span class="line">   git remote add upstream https://github.com/b******/c*****.git    <span class="comment"># git remote add upstream URL</span></span><br><span class="line">3. 添加完之后再次使用 git remote -v 来确认</span><br><span class="line">   $ git remote -v  <span class="comment"># 有 upstream 这样就是已经创建了主repo的远程源。</span></span><br><span class="line">4. 拉取主repo源代码: git fetch upstream</span><br><span class="line">5. 合并主repo代码到本地代码：git merge upstream/main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>由对象组成的数组如何去重？</title>
    <url>/2018/slag/an-array-of-objects-to-heavy/</url>
    <content><![CDATA[<p>需求：将下面 data 数组中 id 重复的数据去掉？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201801</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201804</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201802</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201801</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201805</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201803</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201805</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201804</span>, <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">201805</span>, <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>下面列了两种办法来解决：</p>
<h2 id="一、数组的-reduce-方法"><a href="#一、数组的-reduce-方法" class="headerlink" title="一、数组的 reduce()方法"></a>一、数组的 reduce()方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">data = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preVal, curVal</span>) =&gt;</span> &#123;</span><br><span class="line">  hash[curVal.<span class="property">id</span>] ? <span class="string">&#x27;&#x27;</span> : (hash[curVal.<span class="property">id</span>] = <span class="literal">true</span> &amp;&amp; preVal.<span class="title function_">push</span>(curVal));</span><br><span class="line">  <span class="keyword">return</span> preVal;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<h3 id="上述方法的实现思路"><a href="#上述方法的实现思路" class="headerlink" title="上述方法的实现思路"></a>上述方法的实现思路</h3><p>利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce()</a>方法的累积器作用，在对由对象组成的数组进行遍历时，通过对象 <code>hash</code> 来标记数组中每个元素 id 是否出现过，如果出现过，那么遍历到的当前元素则不会放入到累积器中，如果没有出现，则添加到累积器中，这样保证了最后返回值中每个数据 id 的唯一性。</p>
<p>关于数组的 reduce()方法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">点这里</a>，MDN 上已经写的很清楚了，自己理解。</p>
<h2 id="二、for-循环遍历"><a href="#二、for-循环遍历" class="headerlink" title="二、for 循环遍历"></a>二、for 循环遍历</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeRepeat</span>(<span class="params">arr, key</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i][key] === arr[j][key]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">        j = j - <span class="number">1</span>; <span class="comment">// 关键，因为splice()删除元素之后，会使得数组长度减小，此时如果没有j=j-1的话，会导致相同id项在重复两次以上之后无法进行去重，且会错误删除id没有重复的项。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeRepeat</span>(data, <span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="上述方法的实现思路-1"><a href="#上述方法的实现思路-1" class="headerlink" title="上述方法的实现思路"></a>上述方法的实现思路</h3><p>利用 for 循环遍历数组，并将数组中的每一个元素与剩余元素一一进行比较，如果在剩余元素中出现 id 相同的项，则通过 <code>splice()</code>方法将相同 id 项删除，这样在最终得到的数组中每个数据 id 将是唯一的。通过 <code>splice()</code>方法删除元素后，会使得数组长度减小，为了实现去重应该执行 <code>j = j-1</code>。上面将去重方法直接封装成函数 <code>removeRepeat</code>，使用时可以直接调用该函数，并传入要去重的数组和唯一属性名。</p>
<br/>

<p>转自 <a href="https://blog.csdn.net/XuM222222/article/details/80657316">https://blog.csdn.net/XuM222222/article/details/80657316</a></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios发送请求时params和data的区别</title>
    <url>/2018/slag/axios-data-params/</url>
    <content><![CDATA[<p>在使用 axios 时，注意到配置选项中包含 params 和 data 两者，以为他们是相同的，实则不然。</p>
<p>因为 params 是添加到 url 的请求字符串中的，用于 get 请求。</p>
<p>而 data 是添加到请求体(body)中的， 用于 post 请求。</p>
<p>比如对于下面的 get 请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://onana.cn/openapi/api?info=20ff1803ff65429b8&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">info</span>: <span class="string">&#x27;西安天气&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果我们将 params 修改为 data，那么是不能请求成功的，因为 get 请求中不存在 data 这个选项。</p>
<h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip:"></a>Tip:</h4><blockquote>
<p>HTTP 请求过程中</p>
</blockquote>
<ul>
<li><p>GET 请求：表单参数以 name&#x3D;value&amp;name1&#x3D;value1 的形式附到 url 的后面</p>
</li>
<li><p>POST 请求：表单参数是在请求体中，也是 name&#x3D;value&amp;name1&#x3D;value1 的形式在请求体中。</p>
</li>
<li><p>POST 表单请求提交时，使用的 Content-Type 是 application&#x2F;x-www-form-urlencoded，而使用原生 AJAX 的 POST 请求如果不指定请求头 RequestHeader，默认使用的 Content-Type 是 text&#x2F;plain;charset&#x3D;UTF-8。在 html 中 form 的 Content-type 默认值：Content-type：application&#x2F;x-www-form-urlencoded。如果使用 ajax 请求，在请求头中出现 request payload 导致参数的方式改变了，那么解决办法就是：</p>
<blockquote>
<p>headers: {‘Content-Type’:’application&#x2F;x-www-form-urlencoded’}</p>
</blockquote>
</li>
</ul>
<p>这样，问题就可以解决。</p>
<br/>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
        <tag>Axios</tag>
      </tags>
  </entry>
  <entry>
    <title>用 CSS/CSS3 实现水平居中和垂直居中</title>
    <url>/2018/slag/css-vertical-and-horizontal-center/</url>
    <content><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>只需要把行内元素包裹在一个属性 <code>display</code> 为 <code>block</code> 的父层元素中，并且把父层元素添加如下属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* 这里可以设置顶端外边距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个块状元素"><a href="#多个块状元素" class="headerlink" title="多个块状元素"></a>多个块状元素</h3><p>将元素的 <code>display</code> 属性设置为 <code>inline-block</code>，并且把父元素的 <code>text-align</code> 属性设置为 <code>center</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个块状元素-使用-flexbox-布局实现"><a href="#多个块状元素-使用-flexbox-布局实现" class="headerlink" title="多个块状元素 (使用 flexbox 布局实现)"></a>多个块状元素 (使用 flexbox 布局实现)</h3><p>使用 <code>flexbox</code>，只需要把待处理的块状元素的父元素添加属性 <code>display:flex</code> 及 <code>justify-content:center</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="单行的行内元素"><a href="#单行的行内元素" class="headerlink" title="单行的行内元素"></a>单行的行内元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下代码中，将a元素的height和line-height设置的和父元素一样高度即可实现垂直居中 */</span></span><br><span class="line"><span class="selector-class">.parent</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多行的行内元素"><a href="#多行的行内元素" class="headerlink" title="多行的行内元素"></a>多行的行内元素</h3><p>组合使用 <code>display:table-cell</code> 和 <code>vertical-align:middle</code> 属性来定义需要居中的元素的父容器元素生成效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 以下属性垂直居中 */</span></span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="已知高度的块状元素"><a href="#已知高度的块状元素" class="headerlink" title="已知高度的块状元素"></a>已知高度的块状元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; <span class="comment">/* margin-top值为自身高度的一半 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="已知高度和宽度的元素"><a href="#已知高度和宽度的元素" class="headerlink" title="已知高度和宽度的元素"></a>已知高度和宽度的元素</h3><h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h4><p>这是一种不常见的居中方法，可自适应，比方案 2 更智能，如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">75px</span>; <span class="comment">/* 设置margin-left / margin-top 为自身高度的一半 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="未知高度和宽度元素"><a href="#未知高度和宽度元素" class="headerlink" title="未知高度和宽度元素"></a>未知高度和宽度元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/* 使用css3的transform来实现 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用-flex-布局实现"><a href="#使用-flex-布局实现" class="headerlink" title="使用 flex 布局实现"></a>使用 flex 布局实现</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">/* 注意这里需要设置高度来查看垂直居中效果 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>Css/Css3</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6常用方法</title>
    <url>/2018/slag/es6/</url>
    <content><![CDATA[<h2 id="let-命令-和-const-命令"><a href="#let-命令-和-const-命令" class="headerlink" title="let 命令 和 const 命令"></a>let 命令 和 const 命令</h2><h3 id="let-命令："><a href="#let-命令：" class="headerlink" title="let 命令："></a>let 命令：</h3><p>let 用于声明变量，但是所有声明的变量只在 let 命令所在的代码块有效。<br>let 不允许在同以作用域中重复声明变量。<br>let 不存在变量提升，所以变量一定要在声明后使用，否则会报错。</p>
<h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令:"></a>const 命令:</h3><p>const 命令用来声明常量，一旦声明，其值就不能改变，即 const 一旦声明常量就必须立刻初始化，不能留到以后赋值。<br>const 命令只是保证变量名指向的地址不变，并步保证该地址的数据不变。</p>
<h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><p>let 和 const 命令声明的变量都只在它们所在的块级作用域中才有效。<br>如果区块中存在 let 和 const 命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域。</p>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>ES6 允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，称为解构。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c,d] = [“aa”, “bb”, <span class="number">77</span>,<span class="number">88</span>];  <span class="comment">//数组结构</span></span><br><span class="line"><span class="keyword">let</span> [a,b,[c,d],e] =[“aa”,’bb’,[<span class="number">33</span>,<span class="number">44</span>],<span class="number">55</span>];  <span class="comment">//嵌套数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a,b,,e] =[“aa”,’bb’,[<span class="number">33</span>,<span class="number">44</span>],<span class="number">55</span>]; <span class="comment">//空缺变量</span></span><br><span class="line"><span class="keyword">let</span> [a,b,,e,f] =[“aa”,’bb’,[<span class="number">33</span>,<span class="number">44</span>],<span class="number">55</span>]; <span class="comment">//多余变量</span></span><br><span class="line"><span class="keyword">let</span> [a,b,,e,f=’hello’] =[“aa”,’bb’,[<span class="number">33</span>,<span class="number">44</span>],<span class="number">55</span>]; <span class="comment">//默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">uid</span>: <span class="number">121</span>, <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">uid</span> = <span class="number">111</span>;</span><br><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">uid</span>: id, <span class="attr">uname</span>: name &#125; = obj; <span class="comment">//顺序改变无影响</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//小括号：</span></span><br><span class="line"><span class="keyword">let</span> uid, uname;</span><br><span class="line">(&#123; uid, uname &#125; = obj); <span class="comment">//必须有小括号，否则&#123;&#125;就会被解读为语句块</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uname); <span class="comment">//张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  PS: 可嵌套 ，可有默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = <span class="string">&#x27;倚天屠龙&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);</span><br></pre></td></tr></table></figure>

<h3 id="函数参数解构"><a href="#函数参数解构" class="headerlink" title="函数参数解构"></a>函数参数解构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">uid</span>: <span class="number">121</span>, <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">analysis</span>(<span class="params">&#123; uid, uname &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uid);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------以下也正确</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">analysis</span>(<span class="params">&#123; uname &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(uname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">analysis</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  PS: 参数中数组、字符串、默认值、缺位均支持 。</span></span><br></pre></td></tr></table></figure>

<h2 id="数组操作-Array"><a href="#数组操作-Array" class="headerlink" title="数组操作 Array"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">数组操作 Array</a></h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>方法对数组的每个元素执行一次提供的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">array1.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output: &quot;a&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;b&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;c&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> result = words.<span class="title function_">filter</span>(<span class="function"><span class="params">word</span> =&gt;</span> word.<span class="property">length</span> &gt; <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> doubles = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x ** <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// doubles is now [1, 25, 100, 225]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">let</span> halves = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> roots = numbers.<span class="title function_">map</span>(<span class="title class_">Math</span>.<span class="property">sqrt</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// roots is now [1, 2, 3]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 4, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">includes</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="title function_">includes</span>(<span class="string">&#x27;cat&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pets.<span class="title function_">includes</span>(<span class="string">&#x27;at&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数表达式"><a href="#箭头函数表达式" class="headerlink" title="箭头函数表达式"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数表达式</a></h2><p>语法比函数表达式更短，并且没有自己的 this，arguments，super 或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> materials = [<span class="string">&#x27;Hydrogen&#x27;</span>, <span class="string">&#x27;Helium&#x27;</span>, <span class="string">&#x27;Lithium&#x27;</span>, <span class="string">&#x27;Beryllium&#x27;</span>];</span><br><span class="line"></span><br><span class="line">materials.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">material</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> material.<span class="property">length</span>;</span><br><span class="line">&#125;); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line">materials.<span class="title function_">map</span>(<span class="function"><span class="params">material</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> material.<span class="property">length</span>;</span><br><span class="line">&#125;); <span class="comment">// [8, 6, 7, 9]</span></span><br><span class="line"></span><br><span class="line">materials.<span class="title function_">map</span>(<span class="function"><span class="params">material</span> =&gt;</span> material.<span class="property">length</span>); <span class="comment">// [8, 6, 7, 9]</span></span><br></pre></td></tr></table></figure>

<h2 id="import"><a href="#import" class="headerlink" title="import"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import">import</a></h2><p>import 语句用于导入由另一个模块导出的绑定。无论是否声明了 strict mode ，导入的模块都运行在严格模式下。import 语句不能在嵌入式脚本中使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> defaultExport <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">export</span> &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">export</span> <span class="keyword">as</span> alias &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; export1 , export2 &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; export1 , export2 <span class="keyword">as</span> alias2 , [...] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultExport, &#123; <span class="keyword">export</span> [ , [...] ] &#125; <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> defaultExport, * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">&quot;module-name&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;module-name&quot;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>defaultExport</p>
</blockquote>
<ul>
<li>将引用模块默认导出的名称。</li>
</ul>
<blockquote>
<p>module-name</p>
</blockquote>
<ul>
<li>要导入的模块。这通常是包含模块的.js 文件的相对或绝对路径名，不包括.js 扩展名。某些打包工具可以允许或要求使用该扩展；检查你的运行环境。只允许单引号和双引号的字符串。</li>
</ul>
<blockquote>
<p>name</p>
</blockquote>
<ul>
<li>引用时将用作一种命名空间的模块对象的名称。</li>
</ul>
<blockquote>
<p>export, exportN</p>
</blockquote>
<ul>
<li>要导入的导出名称。</li>
</ul>
<blockquote>
<p>alias, aliasN</p>
</blockquote>
<ul>
<li>将引用指定的导入的名称。</li>
</ul>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a></h2><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a><a href="http://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></h3><ul>
<li>Promise 的含义</li>
<li>基本用法</li>
<li>Promise.prototype.then()</li>
<li>Promise.prototype.catch()</li>
<li>Promise.prototype.finally()</li>
<li>Promise.all()</li>
<li>Promise.race()</li>
<li>Promise.resolve()</li>
<li>Promise.reject()</li>
<li>应用</li>
<li>Promise.try()</li>
</ul>
<h2 id="Sass-x2F-Less-x2F-PostCSS"><a href="#Sass-x2F-Less-x2F-PostCSS" class="headerlink" title="Sass&#x2F;Less&#x2F;PostCSS"></a>Sass&#x2F;Less&#x2F;PostCSS</h2><h3 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a><a href="https://www.sass.hk/">Sass</a></h3><p>世界上最成熟、最稳定、最强大的专业级 CSS 扩展语言！</p>
<h3 id="Less"><a href="#Less" class="headerlink" title="Less"></a><a href="http://www.bootcss.com/p/lesscss/">Less</a></h3><p>一种 动态 样式 语言.<br>LESS 将 CSS 赋予了动态语言的特性，如 变量， 继承， 运算， 函数. LESS 既可以在 客户端 上运行 (支持 IE 6+, Webkit, Firefox)，也可以借助 Node.js 或者 Rhino 在服务端运行。</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>fork 别人的代码，如何更新主分支最新代码</title>
    <url>/2022/slag/git-fork/</url>
    <content><![CDATA[<blockquote>
<p>fork 操作：就是从别的大佬远程端 <code>git仓库</code> 拷贝一份到自己的 <code>git仓库</code>。</p>
</blockquote>
<p>在开发学习时，经常通过 fork 别人的 git 开源项目进行开发学习。<br>所以在我们开发完成后，想合并到大佬的主分支去，我们需要进行创建一个 <code>merge request</code>， 提交给主分支代码管理员进行代码审核，审核通过后允许 <code>merge</code>，这样我们开发的代码就会合并到主项目中。</p>
<p>那么大佬的主分支有更新了，我们怎样将主分支的更新代码拉取、合并到本地呢？</p>
<h2 id="fork-分支更新流程："><a href="#fork-分支更新流程：" class="headerlink" title="fork 分支更新流程："></a>fork 分支更新流程：</h2><h3 id="1-首先要确认是否建立了主项目的远程源："><a href="#1-首先要确认是否建立了主项目的远程源：" class="headerlink" title="1. 首先要确认是否建立了主项目的远程源："></a>1. 首先要确认是否建立了主项目的远程源：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<p>如果只显示自己的两个源（fetch, push）如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tonyt@xiaofeng web-poc % git remote -v</span><br><span class="line">origin  http://10.25.0.130/web-tools/web-poc.git (fetch)</span><br><span class="line">origin  http://10.25.0.130/web-tools/web-poc.git (push)</span><br></pre></td></tr></table></figure>

<h3 id="2-则说明没有建立远程的-repo-源，需要添加主-repo-的源："><a href="#2-则说明没有建立远程的-repo-源，需要添加主-repo-的源：" class="headerlink" title="2. 则说明没有建立远程的 repo 源，需要添加主 repo 的源："></a>2. 则说明没有建立远程的 repo 源，需要添加主 repo 的源：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/b******/c*****.git    # git remote add upstream URL</span><br></pre></td></tr></table></figure>

<p>这里的 upstream 是我们建立的远程 branch 的一个本地名。对于 url 一般有 https 与 ssh 的方式，如果是 ssh 方式，则需要添加 ssh 的 url,不能添加 https 的方式，否则不能在 ssh 下访问该 url。</p>
<h3 id="3-添加完之后再次使用-git-remote-v-来确认。"><a href="#3-添加完之后再次使用-git-remote-v-来确认。" class="headerlink" title="3. 添加完之后再次使用 git remote -v 来确认。"></a>3. 添加完之后再次使用 <code>git remote -v</code> 来确认。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tonyt@xiaofeng web-poc % git remote -v</span><br><span class="line">origin  http://10.25.2.87:9980/root/web-poc.git (fetch)</span><br><span class="line">origin  http://10.25.2.87:9980/root/web-poc.git (push)</span><br><span class="line">upstream        http://10.25.0.130/web-tools/web-poc.git (fetch)</span><br><span class="line">upstream        http://10.25.0.130/web-tools/web-poc.git (push)</span><br></pre></td></tr></table></figure>

<p>有 upstream 这样就是已经创建了主 repo 的远程源。</p>
<h3 id="4-拉取主-repo-源代码："><a href="#4-拉取主-repo-源代码：" class="headerlink" title="4. 拉取主 repo 源代码："></a>4. 拉取主 repo 源代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch upstream</span><br></pre></td></tr></table></figure>

<h3 id="5-合并主-repo-代码到本地代码："><a href="#5-合并主-repo-代码到本地代码：" class="headerlink" title="5. 合并主 repo 代码到本地代码："></a>5. 合并主 repo 代码到本地代码：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge upstream/master</span><br></pre></td></tr></table></figure>

<h3 id="6-大功告成！！！！"><a href="#6-大功告成！！！！" class="headerlink" title="6. 大功告成！！！！"></a>6. 大功告成！！！！</h3>]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>fork</tag>
      </tags>
  </entry>
  <entry>
    <title>EsLint 配置参数以及常见规则列表</title>
    <url>/2018/slag/esLint-rule/</url>
    <content><![CDATA[<p>项目中有一个文件，.eslintrc.js，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;babel-eslint&#x27;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&#x27;html&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// check if imports actually resolve</span></span><br><span class="line">  <span class="string">&#x27;settings&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;import/resolver&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;webpack&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;config&#x27;</span>: <span class="string">&#x27;build/webpack.base.conf.js&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="comment">//it is base on https://github.com/vuejs/eslint-config-vue</span></span><br><span class="line">  <span class="string">&#x27;rules&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;accessor-pairs&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;arrow-spacing&#x27;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">      <span class="string">&#x27;before&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;after&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中 rules 就是配置规则的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="string">&quot;规则名&quot;</span>: [规则值, 规则配置]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>规则值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;off&quot;</span>或者<span class="number">0</span>      <span class="comment">//关闭规则关闭</span></span><br><span class="line"><span class="string">&quot;warn&quot;</span>或者<span class="number">1</span>     <span class="comment">//在打开的规则作为警告（不影响退出代码）</span></span><br><span class="line"><span class="string">&quot;error&quot;</span>或者<span class="number">2</span>    <span class="comment">//把规则作为一个错误（退出代码触发时为1）</span></span><br></pre></td></tr></table></figure>

<p>更多详细的说明请移步 <a href="https://eslint.org/docs/rules/">configuring</a>，中文接口，<a href="http://eslint.cn/docs/rules/">点这里</a></p>
<span id="more"></span>

<p>常见规则列表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line"><span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用数组构造器</span></span><br><span class="line"><span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用按位运算符</span></span><br><span class="line"><span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line"><span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line"><span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止给类赋值</span></span><br><span class="line"><span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line"><span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用console</span></span><br><span class="line"><span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止修改const声明的变量</span></span><br><span class="line"><span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line"><span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用continue</span></span><br><span class="line"><span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line"><span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用debugger</span></span><br><span class="line"><span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>, <span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line"><span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>, <span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line"><span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>, <span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line"><span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>, <span class="comment">//函数参数不能重复</span></span><br><span class="line"><span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>, <span class="comment">//switch中的case标签不能重复</span></span><br><span class="line"><span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>, <span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line"><span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>, <span class="comment">//块语句中的内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>, <span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line"><span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用空label</span></span><br><span class="line"><span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line"><span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止使用eval</span></span><br><span class="line"><span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line"><span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止扩展native对象</span></span><br><span class="line"><span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line"><span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止不必要的bool转换</span></span><br><span class="line"><span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止非必要的括号</span></span><br><span class="line"><span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止多余的冒号</span></span><br><span class="line"><span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止switch穿透</span></span><br><span class="line"><span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line"><span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止重复的函数声明</span></span><br><span class="line"><span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止隐式转换</span></span><br><span class="line"><span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用隐式eval</span></span><br><span class="line"><span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止行内备注</span></span><br><span class="line"><span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>], <span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line"><span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止无效的正则表达式</span></span><br><span class="line"><span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line"><span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>, <span class="comment">//不能有不规则的空格</span></span><br><span class="line"><span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line"><span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>, <span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line"><span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止标签声明</span></span><br><span class="line"><span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line"><span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line"><span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line"><span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>], <span class="comment">//声明时不能混用声明类型</span></span><br><span class="line"><span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>], <span class="comment">//禁止混用tab和空格</span></span><br><span class="line"><span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>], <span class="comment">//换行风格</span></span><br><span class="line"><span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>, <span class="comment">//不能用多余的空格</span></span><br><span class="line"><span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>, <span class="comment">//字符串不能用\换行</span></span><br><span class="line"><span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">  <span class="string">&quot;max&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;], <span class="comment">//空行最多不能超过2行</span></span><br><span class="line"><span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>, <span class="comment">//不能重写native对象</span></span><br><span class="line"><span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>, <span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line"><span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line"><span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line"><span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>, <span class="comment">//禁止使用new Function</span></span><br><span class="line"><span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用new Object()</span></span><br><span class="line"><span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用new require</span></span><br><span class="line"><span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line"><span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>, <span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line"><span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用八进制数字</span></span><br><span class="line"><span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line"><span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止给参数重新赋值</span></span><br><span class="line"><span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>, <span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line"><span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用++，--</span></span><br><span class="line"><span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用process.env</span></span><br><span class="line"><span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用process.exit()</span></span><br><span class="line"><span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止使用__proto__属性</span></span><br><span class="line"><span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止重复声明变量</span></span><br><span class="line"><span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line"><span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>, <span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line"><span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>, <span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line"><span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line"><span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>, <span class="comment">//不能比较自身</span></span><br><span class="line"><span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用逗号运算符</span></span><br><span class="line"><span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>, <span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line"><span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>, <span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line"><span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>, <span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line"><span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line"><span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>, <span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line"><span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>, <span class="comment">//禁止使用三目运算符</span></span><br><span class="line"><span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>, <span class="comment">//一行结束后面不要有空格</span></span><br><span class="line"><span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>, <span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line"><span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line"><span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>, <span class="comment">//不能有未定义的变量</span></span><br><span class="line"><span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>, <span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line"><span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>, <span class="comment">//不能使用undefined</span></span><br><span class="line"><span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>, <span class="comment">//避免多行表达式</span></span><br><span class="line"><span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>, <span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line"><span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line"><span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>, <span class="comment">//不能有无法执行的代码</span></span><br><span class="line"><span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止无用的表达式</span></span><br><span class="line"><span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">  <span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span></span><br><span class="line">&#125;], <span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line"><span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>, <span class="comment">//未定义前不能使用</span></span><br><span class="line"><span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止不必要的call和apply</span></span><br><span class="line"><span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>, <span class="comment">//禁用void操作符</span></span><br><span class="line"><span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>, <span class="comment">//禁用var，用let和const代替</span></span><br><span class="line"><span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">  <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>],</span><br><span class="line">  <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;], <span class="comment">//不能有警告备注</span></span><br><span class="line"><span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>, <span class="comment">//禁用with</span></span><br><span class="line"><span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line"><span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>, <span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line"><span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>, <span class="comment">//=&gt;的前/后括号</span></span><br><span class="line"><span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>, <span class="comment">//在对象中使用getter/setter</span></span><br><span class="line"><span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>, <span class="comment">//块语句中使用var</span></span><br><span class="line"><span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>], <span class="comment">//大括号风格</span></span><br><span class="line"><span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>, <span class="comment">//避免多次调用回调什么的</span></span><br><span class="line"><span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>, <span class="comment">//强制驼峰法命名</span></span><br><span class="line"><span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line"><span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>, <span class="comment">//逗号前后的空格</span></span><br><span class="line"><span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>], <span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>], <span class="comment">//循环复杂度</span></span><br><span class="line"><span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line"><span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>, <span class="comment">//return 后面是否允许省略</span></span><br><span class="line"><span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>], <span class="comment">//this别名</span></span><br><span class="line"><span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>, <span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line"><span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>], <span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line"><span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>, <span class="comment">//switch语句最后必须有default</span></span><br><span class="line"><span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>, <span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line"><span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">  <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;], <span class="comment">//避免不必要的方括号</span></span><br><span class="line"><span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>, <span class="comment">//文件以单一的换行符结束</span></span><br><span class="line"><span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>, <span class="comment">//必须使用全等</span></span><br><span class="line"><span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>, <span class="comment">//函数表达式必须有名字</span></span><br><span class="line"><span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>], <span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line"><span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>, <span class="comment">//生成器函数*的前后空格</span></span><br><span class="line"><span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>, <span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line"><span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>, <span class="comment">//nodejs 处理错误</span></span><br><span class="line"><span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>, <span class="comment">//变量名长度</span></span><br><span class="line"><span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>], <span class="comment">//缩进风格</span></span><br><span class="line"><span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>, <span class="comment">//声明时必须赋初值</span></span><br><span class="line"><span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">  <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;], <span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line"><span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>, <span class="comment">//行前/行后备注</span></span><br><span class="line"><span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>], <span class="comment">//嵌套块深度</span></span><br><span class="line"><span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>], <span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>], <span class="comment">//回调嵌套深度</span></span><br><span class="line"><span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>], <span class="comment">//函数最多只能有3个参数</span></span><br><span class="line"><span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>], <span class="comment">//函数内最多有几个声明</span></span><br><span class="line"><span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>, <span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line"><span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>, <span class="comment">//new时必须加小括号</span></span><br><span class="line"><span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>, <span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line"><span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line"><span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>, <span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line"><span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>, <span class="comment">//连续声明</span></span><br><span class="line"><span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line"><span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>], <span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line"><span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>, <span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line"><span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>, <span class="comment">//首选const</span></span><br><span class="line"><span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>, <span class="comment">//首选展开运算</span></span><br><span class="line"><span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>, <span class="comment">//首选Reflect的方法</span></span><br><span class="line"><span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>], <span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;quote-props&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line"><span class="string">&quot;radix&quot;</span>: <span class="number">2</span>, <span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line"><span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>, <span class="comment">//命名检测</span></span><br><span class="line"><span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>, <span class="comment">//生成器函数必须有yield</span></span><br><span class="line"><span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//语句强制分号结尾</span></span><br><span class="line"><span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">  <span class="string">&quot;before&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;after&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;], <span class="comment">//分号前后空格</span></span><br><span class="line"><span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>, <span class="comment">//变量声明时排序</span></span><br><span class="line"><span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//关键字后面是否要空一格</span></span><br><span class="line"><span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>], <span class="comment">//小括号里面要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>, <span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line"><span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>, <span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line"><span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123;</span><br><span class="line">  <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;], <span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line"><span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>, <span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line"><span class="string">&quot;strict&quot;</span>: <span class="number">2</span>, <span class="comment">//使用严格模式</span></span><br><span class="line"><span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>, <span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line"><span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>, <span class="comment">//jsdoc规则</span></span><br><span class="line"><span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>, <span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line"><span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>, <span class="comment">//var必须放在作用域顶部</span></span><br><span class="line"><span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>], <span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line"><span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>, <span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line"><span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>] <span class="comment">//禁止尤达条件</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>新手向：Vue 2.0 的建议学习顺序</title>
    <url>/2018/slag/how-to-learn-vue/</url>
    <content><![CDATA[<blockquote>
<p>注：2.0 已经有 <a href="https://cn.vuejs.org/">中文文档</a> 。如果对自己英文有信心，也可以直接阅读 <a href="https://vuejs.org/">英文文档</a>。<br>此指南仅供参考，请根据自身实际情况灵活调整。<br>欢迎转载，请注明出处。</p>
</blockquote>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ol>
<li><p>扎实的 JavaScript &#x2F; HTML &#x2F; CSS 基本功。这是前置条件。</p>
</li>
<li><p>通读官方教程 (guide) 的基础篇。不要用任何构建工具，就只用最简单的 &lt;script&gt;，把教程里的例子模仿一遍，理解用法。<strong>不推荐上来就直接用 vue-cli 构建项目，尤其是如果没有 Node&#x2F;Webpack 基础。</strong></p>
</li>
<li><p>照着官网上的示例，自己想一些类似的例子，模仿着实现来练手，加深理解。</p>
</li>
<li><p>阅读官方教程进阶篇的前半部分，到『自定义指令 (Custom Directive) 』为止。着重理解 Vue 的响应式机制和组件生命周期。『渲染函数（Render Function)』如果理解吃力可以先跳过。</p>
</li>
<li><p>阅读教程里关于路由和状态管理的章节，然后根据需要学习 vue-router 和 vuex。同样的，先不要管构建工具，以跟着文档里的例子理解用法为主。</p>
</li>
<li><p>走完基础文档后，如果你对于基于 Node 的前端工程化不熟悉，就需要补课了。下面这些严格来说并不是 Vue 本身的内容，也不涵盖所有的前端工程化知识，但对于大型的 Vue 工程是前置条件，也是合格的『前端工程师』应当具备的知识。</p>
</li>
</ol>
<h2 id="前端生态-x2F-工程化"><a href="#前端生态-x2F-工程化" class="headerlink" title="前端生态&#x2F;工程化"></a>前端生态&#x2F;工程化</h2><ol>
<li><p>了解 JavaScript 背后的规范，ECMAScript 的历史和目前的规范制定方式。学习 ES2015&#x2F;16 的新特性，理解 ES2015 modules，适当关注<a href="https://github.com/tc39/proposals">还未成为标准的提案</a>。</p>
</li>
<li><p>学习命令行的使用。建议用 Mac。</p>
</li>
<li><p>学习 Node.js 基础。<strong>建议使用 <a href="https://github.com/creationix/nvm">nvm</a> 这样的工具来管理机器上的 Node 版本，并且将 npm 的 registry 注册表配置为<a href="https://npm.taobao.org/">淘宝的镜像源</a>。</strong>至少要了解 npm 的常用命令，npm scripts 如何使用，语义化版本号规则，CommonJS 模块规范（了解它和 ES2015 Modules 的异同），Node 包的解析规则，以及 Node 的常用 API。应当做到可以自己写一些基本的命令行程序。注意最新版本的 Node (6+) 已经支持绝大部分 ES2015 的特性，可以借此巩固 ES2015。</p>
</li>
<li><p>了解如何使用 &#x2F; 配置 Babel 来将 ES2015 编译到 ES5 用于浏览器环境。</p>
</li>
<li><p>学习 Webpack。Webpack 是一个极其强大同时也复杂的工具，作为起步，理解它的『一切皆模块』的思想，并基本了解其常用配置选项和 loader 的概念&#x2F;使用方法即可，比如如何搭配 Webpack 使用 Babel。学习 Webpack 的一个挑战在于其本身文档的混乱，建议多搜索搜索，应该还是有质量不错的第三方教程的。英文好的建议阅读 <a href="https://webpack.js.org/guides/getting-started/">Webpack 2.0 的文档</a>。</p>
</li>
</ol>
<h2 id="Vue-进阶"><a href="#Vue-进阶" class="headerlink" title="Vue 进阶"></a>Vue 进阶</h2><ol>
<li><p>有了 Node 和 Webpack 的基础，可以通过 vue-cli 来搭建基于 Webpack ，并且支持单文件组件的项目了。建议用 webpack-simple 这个模板开始，并阅读官方教程进阶篇剩余的内容以及 <a href="https://vue-loader.vuejs.org/">vue-loader 的文档</a>，了解一些进阶配置。有兴趣的可以自己亲手从零开始搭一个项目加深理解。</p>
</li>
<li><p>根据 <a href="https://github.com/vuejs/vue-hackernews-2.0">例子</a> 尝试在 Webpack 模板基础上整合 vue-router 和 vuex</p>
</li>
<li><p>深入理解 Virtual DOM 和『渲染函数 (Render Functions)』这一章节（可选择性使用 JSX)，理解模板和渲染函数之间的对应关系，了解其使用方法和适用场景。</p>
</li>
<li><p>（可选）根据需求，了解服务端渲染的使用（需要配合 Node 服务器开发的知识）。其实更重要的是理解它所解决的问题并搞清楚你是否需要它。</p>
</li>
<li><p>阅读开源的 Vue 应用、组件、插件源码，自己尝试编写开源的 Vue 组件、插件。</p>
</li>
<li><p>参考 <a href="https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup">贡献指南</a> 阅读 Vue 的源码，理解内部实现细节。（需要了解 <a href="https://flow.org/">Flow</a>）</p>
</li>
<li><p>参与 Vue GitHub issue 的定位 -&gt; 贡献 PR -&gt; 加入核心团队 -&gt; 升任 CTO -&gt; 迎娶白富美…（误</p>
</li>
</ol>
<br>
> 转自：[尤大大的新手向：Vue 2.0 的建议学习顺序](https://zhuanlan.zhihu.com/p/23134551)
]]></content>
      <categories>
        <category>百科全书</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有用的 HTML5 pattern</title>
    <url>/2018/slag/html5-pattern/</url>
    <content><![CDATA[<p>最近在做手机页面时，遇到数字输入的键盘的问题，之前的做法只是一刀切的使用 <code>type=&quot;tel&quot;</code>，不过一直觉得九宫格的电话号码键盘上的英文字母太碍事了。于是想要尝试其它的实现方案，最终的结论却令人沮丧。不过也趁机详细了解了下 <code>pattern</code> 这个属性。</p>
<h2 id="type-quot-tel-quot-和-type-quot-number-quot-的区别"><a href="#type-quot-tel-quot-和-type-quot-number-quot-的区别" class="headerlink" title="type=&quot;tel&quot; 和 type=&quot;number&quot; 的区别"></a><code>type=&quot;tel&quot;</code> 和 <code>type=&quot;number&quot;</code> 的区别</h2><p>这里还是先那么先交代一下最初遇到的问题。其实无论是 tel 还是 number 都不是完美的：</p>
<h3 id="type-x3D-”tel”"><a href="#type-x3D-”tel”" class="headerlink" title="type&#x3D;”tel”"></a>type&#x3D;”tel”</h3><ul>
<li>优点是 iOS 和 Android 的键盘表现都差不多</li>
<li>缺点是那些字母好多余，虽然我没有强迫症但还是感觉怪怪的啊。</li>
</ul>
<h3 id="type-x3D-”number”"><a href="#type-x3D-”number”" class="headerlink" title="type&#x3D;”number”"></a>type&#x3D;”number”</h3><ul>
<li>优点是 Android 下实现的一个真正的数字键盘</li>
<li>缺点一：iOS 下不是九宫格键盘，输入不方便</li>
<li>缺点二：旧版 Android（包括微信所用的 X5 内核）在输入框后面会有超级鸡肋的小尾巴，好在 Android 4.4.4 以后给去掉了。</li>
</ul>
<span id="more"></span>

<p>不过对于缺点二，我们可以用 webkit 私有的伪元素给 fix 掉：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;number&#x27;</span>]</span>::-webkit-inner-spin-button,</span><br><span class="line">input[type=<span class="string">&#x27;number&#x27;</span>]::-webkit-outer-spin-button &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  appearance: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pattern-属性"><a href="#pattern-属性" class="headerlink" title="pattern 属性"></a>pattern 属性</h2><p>pattern 用于验证表单输入的内容，通常 HTML5 的 type 属性，比如 email、tel、number、data 类、url 等，已经自带了简单的数据格式验证功能了，加上 pattern 后，前端部分的验证更加简单高效了。</p>
<p>显而易见，pattern 的属性值要用正则表达式。</p>
<p>实例</p>
<p>简单的数字验证</p>
<p>数字的验证有两个：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;\d&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[0-9]*&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对表单验证来说，这两个正则的作用是一样的，表现的话差异就很大：</p>
<ul>
<li>iOS 中，只有[0-9]*才可以调起九宫格数字键盘，\d 无效</li>
<li>Android 4.4 以下(包括 X5 内核)，两者都调起数字键盘；</li>
<li>Android 4.4.4 以上，只认 type 属性，也就是说，如果上面的代码将 type&#x3D;”number” 改为 type&#x3D;”text” ，将调起全键盘而不会是九宫格数字键盘。</li>
</ul>
<h2 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a>常用的正则表达式</h2><p>pattern 的用法都一样，这里不再啰嗦各种详细写法了，只是列出来一些常用的正则就好了：</p>
<ul>
<li>信用卡 [0-9]{13,16}</li>
<li>银联卡 ^62[0-5]\d{13,16}$</li>
<li>Visa: ^4[0-9]{12}(?:[0-9]{3})?$</li>
<li>万事达：^5[1-5][0-9]{14}$</li>
<li>QQ 号码：[1-9][0-9]{4,14}</li>
<li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li>
<li>身份证：^([0-9]){7,18}(x|X)?$</li>
<li>密码：^[a-zA-Z]\w{5,17}$ 字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</li>
<li>强密码：^(?&#x3D;.\d)(?&#x3D;.[a-z])(?&#x3D;.*[A-Z]).{8,10}$ 包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间</li>
<li>7 个汉字或 14 个字符：^[\u4e00-\u9fa5]{1,7}$|^[\dA-Za-z_]{1,14}$</li>
</ul>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>很不幸，pattern 的浏览器支持很惨： via <a href="http://caniuse.com/#feat=input-pattern">Can I Use</a></p>
<p>但是如果只是如文章开头提到的改数字键盘的话，iOS 和 Android 都是没有问题的。</p>
<br/>

<p>转自：<a href="https://www.qianduan.net/xie-you-yong-de-html5-pattern/">https://www.qianduan.net/xie-you-yong-de-html5-pattern/</a></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>数字键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>网页调试显示的警告，让你网站升级为HTTPS</title>
    <url>/2018/slag/http-update-https-warn/</url>
    <content><![CDATA[<p>在 chrome 中打开调试工具，出现如下图提示：</p>
<p><img src="/images/baike/http-update-https.jpg"></p>
<blockquote>
<p>This page includes a password or credit card input in a non-secure context. A warning has been added to the URL bar. For more information, see <a href="https://goo.gl/zmWq3m">https://goo.gl/zmWq3m</a>.</p>
</blockquote>
<p>提示原因：简单的说，通过 HTTP 协议传递密码是非常不安全的，所以 Google 弹出了这个警告，提示你该是时候把你的网站 <strong>升级为HTTPS</strong> 了。</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>Https</tag>
        <tag>开发者工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery+Bootstrap构建传统后台管理系统</title>
    <url>/2017/slag/jquery-bootstrap-management-platform/</url>
    <content><![CDATA[<p>现在流行的是前后端分离，MV*模式，我作为一个相对传统行业的老菜鸟来说说最近手上的一个后台管理系统项目的前端工作，欢迎提各种意见。</p>
<h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><ul>
<li>传统后台管理系统，面向的是企业级客户，兼容 IE8+等主流浏览器，所以对界面友好程度相对来说并不是太大，你懂得</li>
</ul>
<h3 id="前端框架-类库"><a href="#前端框架-类库" class="headerlink" title="前端框架(类库)"></a>前端框架(类库)</h3><ul>
<li>Jquery+Bootstrap+Layer+zTree+Validform</li>
</ul>
<p>谈框架这种高大上的东西，我更想用类库来表达(恩，因为我觉得自己对框架这个概念的认识还很浅)，没错正如标题所言，由 jq+bootstrap 构建，再新增一个皮肤包，根据 UI 出的视觉稿进行编码，就将其称为个性化，换肤功能吧。</p>
<h3 id="公共-CSS"><a href="#公共-CSS" class="headerlink" title="公共 CSS"></a>公共 CSS</h3><p>在 css 公共调用上，我又添加了一些简单字体大小，间距等等</p>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pos-r</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos-a</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pos-f</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文字溢出省略号"><a href="#文字溢出省略号" class="headerlink" title="文字溢出省略号"></a>文字溢出省略号</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.single-overflow</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-overflow</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="文字尺寸"><a href="#文字尺寸" class="headerlink" title="文字尺寸"></a>文字尺寸</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.f-12</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-14</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-16</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-18</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-20</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-25</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-30</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-40</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f-50</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.c-red</span>,</span><br><span class="line"><span class="selector-class">.c-red</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-green</span>,</span><br><span class="line"><span class="selector-class">.c-green</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-green</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-blue</span>,</span><br><span class="line"><span class="selector-class">.c-blue</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-blue</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-white</span>,</span><br><span class="line"><span class="selector-class">.c-white</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-white</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-black</span>,</span><br><span class="line"><span class="selector-class">.c-black</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-black</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-gray</span>,</span><br><span class="line"><span class="selector-class">.c-gray</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-gray</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-666</span>,</span><br><span class="line"><span class="selector-class">.c-666</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-666</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-999</span>,</span><br><span class="line"><span class="selector-class">.c-999</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-999</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.c-orange</span>,</span><br><span class="line"><span class="selector-class">.c-orange</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.c-orange</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffa500</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="间距-padding-x2F-margin"><a href="#间距-padding-x2F-margin" class="headerlink" title="间距 padding&#x2F;margin"></a>间距 padding&#x2F;margin</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ml-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mr-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mt-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mb-5</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*.pl-5，.pt-5，pb-5，pr-5 等等以此类推*/</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="类库说明"><a href="#类库说明" class="headerlink" title="类库说明"></a>类库说明</h3><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><ul>
<li>Modal，主要用来做异步请求时的表单操作，像增，改。</li>
<li>bootstrapTable，个人认为是整个系统的主体，后台系统大多数据展示是以表格形式来视图化，然后这个接口已然够用。有些个性化的东西，在此基础上再进行开发，也就方便，比如，列表表单的显示个性化，可以通过 h5 的 localstorage 进行本地存储，这里在开发过程中碰到一个小坑，在 IE 下面好像没法直接将原来存储的数据清除，只能使用 localstorage.clear()方法？chremo 下面可以在开发工具下直接删除</li>
<li>然后就是 bootstrap 上应用到的个个小组件啦，自行去官网看 api 吧</li>
</ul>
<h4 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h4><ul>
<li>作为提示控件来使用，关于 api 啥的也自行前往官网查看</li>
</ul>
<h4 id="zTree"><a href="#zTree" class="headerlink" title="zTree"></a>zTree</h4><ul>
<li>系统中涉及到的树形结构就用 zTree，调用时使用列表形式的 json 数据格式进行交互，最好使用异步的展示形式，不然大数据时会影响性能</li>
</ul>
<h4 id="Validform"><a href="#Validform" class="headerlink" title="Validform"></a>Validform</h4><ul>
<li>Validform 用来表单的校验，一般都是通过 ajax 来进行表单提交，所以我把 ajax 都封装在了 beforeSubmit 这个接口中，还有一个要说明一下，因为错误提示可能需要自定义，可在 tiptype 中进行修改，还有一个就是考虑表单防重复提交</li>
</ul>
<h4 id="公共的-js-类库"><a href="#公共的-js-类库" class="headerlink" title="公共的 js 类库"></a>公共的 js 类库</h4><p>我目前是通过单体模式进行封装的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Project</span> = &#123;</span><br><span class="line">  <span class="comment">//公共模块</span></span><br><span class="line">  <span class="title class_">Util</span>: &#123;</span><br><span class="line">    <span class="attr">util_method1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;util_method1&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">util_method2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;util_method2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//工具模块</span></span><br><span class="line">  <span class="title class_">Tool</span>: &#123;</span><br><span class="line">    <span class="attr">tool_method1</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tool_method1&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tool_method2</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tool_method2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//其他模块，ajax等</span></span><br><span class="line">  <span class="title class_">Others</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h3><p>那么我觉得一个传统的后台系统开发基本够用了，最后可能需要处理一下前端上的性能，比如，将静态资源打包压缩成一个文件，这里其实还有一个小坑，就是在 IE9 以下的低版本，如果你打包出来的一个 css 文件过大（内容过多），那么 IE9 及以下版本的部分 css 样式就不会生效啦，这时就需要做 hack 处理。</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>作为前端来说，我感觉上述这种系统做多了，会麻木，失去新鲜感。我还是更喜欢互联网模式的开发节奏，用市面上一些比较流行的框架，像 vue,react 等，前后端分离，各种打包工具(gulp，webpack)，模块化及组件化开发。像我上述这种开发模式，就自己所学的新东西并不能真正意义上用到目前的项目中，只能自己写些 demo，作为约束能力薄落的我来说，进步并不太明显，所以，最近也在考虑寻找新东家，希望能去互联网行业，对技术要求更高的公司继续自己的职业，提升自己的技术水平。求推荐啊！</p>
<br>
<br>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 提升</title>
    <url>/2017/slag/js-ascension/</url>
    <content><![CDATA[<p>这里的提升，我的理解是包括变量和函数在内的所有声明的提升<br>而根据对作用域的理解，任何声明在某个作用域内的变量，都将附属于这个作用域。</p>
<h2 id="考虑以下代码"><a href="#考虑以下代码" class="headerlink" title="考虑以下代码"></a>考虑以下代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块一</span></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码块二</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>上述两段代码的结果是啥？</p>
<p>思考思路：包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</p>
<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>于是， 上述代码块一，会以如下形式处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure>

<p>代码块二处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>上述代码理解为下面的形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：函数声明会被提升，但是函数表达式却不会被提升</p>
</blockquote>
<p>如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">//不是 ReferenceError(引用错误)，对象表明一个不存在的变量被引用</span></span><br><span class="line"><span class="comment">//而是 TypeError(类型错误),对象用来表示值的类型非预期类型时发生的错误</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以理解为下面形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 报TypeError错误</span></span><br><span class="line">foo = <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再来一道题，大家自行理解</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提升：变量和函数声明从它们在代码中出现的位置被“移动”到了最上面的过程<br>重要提示：只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。</p>
</blockquote>
<h2 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h2><p>函数声明和变量声明在被提升的同时，如果在一个作用域中同时存在多个“重复”或者说同名的声明代码中，函数会首先被提升，然后才是变量。</p>
<p>考虑以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以理解为如下形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line">foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示：出现在后面的函数声明还是可以覆盖前面的</p>
</blockquote>
<p>js 语言精粹提到的糟粕中有类似的这么一段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 是‘b’ 还是 TypeError: foo is not a function?</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (a) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码在 Gecko 引擎中打印”TypeError”；而在其他浏览器中则打印”b”。</p>
<p>原因在于 Gecko 加入了 ECMAScript 以外的一个 feature：条件式函数声明。</p>
<p>注意引用的 Note：条件式函数声明跟函数表达式的处理方式一样。因此，条件式函数声明丧失了函数声明提升的特性。</p>
<p>基于以上原因，请不要在你的代码里将函数声明嵌套在条件语句内。</p>
<p>写成函数表达式好了。</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 异步上传文件</title>
    <url>/2012/slag/js-async-upload-files/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>项目中做到了头像上传的功能.因为不可能修改头像就把整个表单提交,所以必须要使用 AJAX 来实现异步上传文件.</p>
<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>服务端只要获取到客户端文件的本地路径,然后使用文件流来实现文件操作就可以了.<br>主要还是在浏览器端获取文件的本地路径和预览功能.<br>IE 浏览器从 IE6 开始已经不能使用 input.value 直接获取 input:file 控件的本地路径<br>其他浏览器比如 chrom 和 FF 等都不能直接使用 input.value 获取文件的本地路径.<br>那么只能使用别的方法实现异步上传文件功能.<br>首先声明 IE6 不考虑<br>chrome 和 firefox 因为对 HTML5 支持比较好.所以可以使用 HTML5 中的 files 和 FileReader 对象来实现图片预览功能。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fileList = obj.<span class="property">files</span>;</span><br><span class="line"><span class="keyword">var</span> imageType = <span class="regexp">/image.*/</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> file = fileList[i];</span><br><span class="line">  <span class="keyword">if</span> (!file.<span class="property">type</span>.<span class="title function_">match</span>(imageType)) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">  reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    fileName = e.<span class="property">target</span>.<span class="property">result</span>; <span class="comment">//Data URI格式</span></span><br><span class="line">    img.<span class="property">src</span> = fileName; <span class="comment">//给img.src赋值</span></span><br><span class="line">  &#125;;</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(file); <span class="comment">//转换成Data URI格式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>IE7-IE9 使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">select</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">blur</span>();</span><br><span class="line"><span class="keyword">var</span> fileName = <span class="variable language_">document</span>.<span class="property">selection</span>.<span class="title function_">createRange</span>().<span class="property">text</span>;</span><br></pre></td></tr></table></figure>

<p>来获取文件的本地路径.<br>然后是用图片预览,因为 IE7-IE9 中的 img 控件的 src 属性已经不能直接使用本地路径来显示图片.所以使用滤镜来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">divShowImage.<span class="title function_">setAttribute</span>(</span><br><span class="line">  <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale);width:300px; height:300px;&#x27;</span></span><br><span class="line">);</span><br><span class="line">divShowImage.<span class="property">filters</span>.<span class="title function_">item</span>(</span><br><span class="line">  <span class="string">&#x27;DXImageTransform.Microsoft.AlphaImageLoader&#x27;</span></span><br><span class="line">).<span class="property">src</span> = fileName;</span><br><span class="line">img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;display:none&#x27;</span>); <span class="comment">//隐藏IMG避免在图片的左上角出现一个小叉叉.</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="20121009-更新"><a href="#20121009-更新" class="headerlink" title="20121009 更新"></a>20121009 更新</h2><p>然后是上传..在这里遇到了最大的问题…其实在之前已经遇到过这个问题…但是都先放过去.等要用到的时候再去实现..</p>
<p>就是 chrome 居然无法获取到图片的本地路径.因为不想提交表单域.网上还是提供了使用 js 中的 XMLHTTPResponse 对象来实现 ajax 直接提交图片的二进制码.</p>
<p>因为以前都是使用 jq 来实现 ajax 的.所以对于 XMLHTTPResponse 对象非常不熟悉.导致在.ashx 中都不知道如何获取数据.尝试了多次..暂时没有结果.这时候我又开始思考是不是应该继续下去.因为已经感觉到复杂了..这么一个异步上传..在理想中不应该是如此复杂,那么就应该考虑自己的思路是不是出现了问题,是不是能换个思路进行下去.</p>
<ol>
<li>考虑使用 IFrame 中嵌入上传的页面来实现异步上传.</li>
<li>早先考虑过的使用 falsh 插件.但是还是感觉不好..因为觉得可以用 js+ajax 实现.</li>
<li>还想到 webcjs 中使用的异步上传,使用表单域提交,因为其他数据都是通过无表单域的 AJAX 提交的.所以页面的表单域可以留给上传文件.</li>
<li>继续尝试取得提交到服务端的 XMLHTTPResponse 对象.</li>
</ol>
<p>决定了.. 先使用第三条解决方案.<br>终于完成异步头像上传的全部功能…还是使用了客户端提交表单,然后服务端 context.Request.Files 来获取文件属性.并且使用 jquery.form.js 来实现异步提交表单.<br>主要问题还是服务端获取不到 Files 对象.form 中必须有 enctype&#x3D;”multipart&#x2F;form-data”<br>然后 input:file 控件中必须要有 runat&#x3D;”server”<br>然后才可以在.ashx 文件中获取到 Request.Files;<br>后面的保存和修改数据库信息已经不存在问题了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就是感觉 HTML5 兼容性太差.各种不确定.有些属性不是这个浏览器不支持就是那个浏览器不支持.<br>预览图片的还是使用 HTML5 中 files 对象来转换成 Data URI 来赋值到 src 属性上.<br>然后 IE 的预览图片还是使用滤镜来实现.</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript跳出循环的方法及区别</title>
    <url>/2018/slag/js-jump-out-of-the-loop/</url>
    <content><![CDATA[<p>跟许多多态语言一样，js 也有 break，continue，return</p>
<p>面向对象编程语法中我们会碰到 break，continue，return 这三个常用的关键字，那么关于这三个关键字的使用具体的操作是什么呢？我们在使用这三关键字的时候需要注意和需要理解的规则是什么呢？让我们开始介绍吧</p>
<h2 id="js-编程语法之-break-语句"><a href="#js-编程语法之-break-语句" class="headerlink" title="js 编程语法之 break 语句"></a>js 编程语法之 break 语句</h2><p>break 语句会使运行的程序立刻退出包含在最内层的循环或者退出一个 switch 语句。</p>
<p>由于它是用来退出循环或者 switch 语句，所以只有当它出现在这些语句时，这种形式的 break 语句才是合法的。</p>
<p>如果一个循环的终止条件非常复杂，那么使用 break 语句来实现某些条件比用一个循环表达式来表达所有的条件容易得多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 i&#x3D;8 的时候，直接退出 for 这个循环。这个循环将不再被执行！</p>
<p>&#x2F;&#x2F;输出结果：1234567</p>
<h2 id="js-编程语法之-continue-语句"><a href="#js-编程语法之-continue-语句" class="headerlink" title="js 编程语法之 continue 语句"></a>js 编程语法之 continue 语句</h2><p>continue 语句和 break 语句相似。所不同的是，它不是退出一个循环，而是开始循环的一次新迭代。</p>
<p>continue 语句只能用在 while 语句、do&#x2F;while 语句、for 语句、或者 for&#x2F;in 语句的循环体内，在其它地方使用都会引起错误！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 i&#x3D;8 的时候，直接跳出本次 for 循环。下次继续执行。</p>
<p>&#x2F;&#x2F;输出结果：1234567910</p>
<h2 id="js-编程语法之-return-语句"><a href="#js-编程语法之-return-语句" class="headerlink" title="js 编程语法之 return 语句"></a>js 编程语法之 return 语句</h2><p>return 语句就是用于指定函数返回的值。return 语句只能出现在函数体内，出现在代码中的其他任何地方都会造成语法错误！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果 Uncaught SyntaxError: Illegal return statement(…)<br>意思是非法捕获的查询返回语句。</p>
<p>当执行 return 语句时，即使函数主体中还有其他语句，函数执行也会停止！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (username == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;请输入用户名&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (qq == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;请输入QQ&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的实例里，当 username 为空时，就不会再向下执行</p>
<br/>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 作用域/scope</title>
    <url>/2017/slag/js-scope/</url>
    <content><![CDATA[<h2 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h2><p>百度百科：程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效&#x2F;可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域</p>
<p>书面版：一套设计良好，用来存储变量，并可以方便找到这些变量的规则称为作用域</p>
<h2 id="RL-查询"><a href="#RL-查询" class="headerlink" title="RL 查询"></a>RL 查询</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>RHS：谁是赋值操作的源头，查找变量 a 的值，即 2。</li>
<li>LHS：赋值操作的目标是谁，试图找到变量的容器本身，从而可以对其赋值。也就是查找变量 a 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 这里对 a 是一个 RHS 查询，找到 a 的值，并 console.log 出来。</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 这里对 a 是一个 LHS 查询，找到 变量 a，并对其赋值为 2 。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这里首先对 foo() 函数调用，执行 RHS 引用，即找到 foo 函数，</span></span><br><span class="line"><span class="comment">// 然后，执行了 a = 2 的传参赋值，这里首先执行 LHS 查询，</span></span><br><span class="line"><span class="comment">// 找到 a 并赋值为 2，然后 console.log(a) 执行了 RHS查询。</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="作用域嵌套"><a href="#作用域嵌套" class="headerlink" title="作用域嵌套"></a>作用域嵌套</h2><p>遍历嵌套作用域链规则：引擎从当前的执行作用域开始查找变量，如果找不到，就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。</p>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>词法作用域就是定义在词法阶段的作用域。是由你在写代码时将变量和块作用域写在哪里来决定的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bar</span>(b * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">2</span>); <span class="comment">//2, 4, 12</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/homeless/js_scope.png"></p>
<ol>
<li>包含整个全局作用域，其中只有一个标识符： foo。</li>
<li>包含着 foo 所创建的作用域，其中有三个标识符：a、bar 和 b</li>
<li>包含着 bar 所创建的作用域，其中只有一个标识符：c</li>
</ol>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>作用域查找会在找到第一个匹配的标识符时停止。在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”（内部的标识符“遮蔽”了外部的标识符）。抛开遮蔽效应，作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p>
<h2 id="重要说明"><a href="#重要说明" class="headerlink" title="重要说明"></a>重要说明</h2><p>全局变量会自动成为全局对象的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span>;</span><br></pre></td></tr></table></figure>

<p>通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到。</p>
<p>词法作用域查找只会查找一级标识符，比如 a、b 和 c。如果代码中引用了 foo.bar.baz，词法作用域查找只会试图查找 foo 标识符，找到这个变量后，对象属性访问规则会分别接管对 bar 和 baz 属性的访问</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>LICEcap 实用的 GIF 录屏工具</title>
    <url>/2023/slag/licecap/</url>
    <content><![CDATA[<h2 id="LICEcap"><a href="#LICEcap" class="headerlink" title="LICEcap"></a>LICEcap</h2><p>LICEcap 是一款屏幕录制工具，支持导出 GIF 动画图片格式，轻量级、使用简单，录制过程中可以随意改变录屏范围。</p>
<p>官网 <a href="https://www.cockos.com/licecap/">https://www.cockos.com/licecap/</a></p>
<p>LICEcap 可以捕获桌面区域并将其直接保存为 .GIF（用于在网络浏览器等中查看）或 .LCF（见下文）。</p>
<p>LICEcap 是一个直观但灵活的应用程序（适用于 Windows 和现在的 OSX），其设计轻量且具有高性能。</p>
<p>LICEcap 是 GPL 自由软件，每个下载包都包含源代码。</p>
<h2 id="特点和选项"><a href="#特点和选项" class="headerlink" title="特点和选项"></a>特点和选项</h2><ul>
<li>直接录制为 .GIF 或 .LCF。</li>
<li>录制时移动屏幕截图框。</li>
<li>暂停和重新开始录制，并可选择插入文本消息。</li>
<li>全局热键（Shift+空格）可在录制时切换暂停</li>
<li>可调节最大录制帧速率，以允许限制 CPU 使用。</li>
<li>基本标题框架，带或不带文本。</li>
<li>记录鼠标按钮的按下情况。</li>
<li>显示录音中经过的时间。</li>
</ul>
<span id="more"></span>

<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>Windows：Windows XP&#x2F;Vista&#x2F;7&#x2F;8&#x2F;8.1&#x2F;10&#x2F;11（可能会在旧版本上减少功能）</li>
<li>OSX：macOS 10.7-12.x Intel 64 位或 M1（旧版本：v1.30 支持 macOS 10.6，v1.28 支持 macOS 10.4 和 PPC）</li>
<li>Linux：显然可以与 WINE 配合使用</li>
<li>相当快的 CPU</li>
<li>充足的 RAM（1GB+，尤其是编码为 LCF 时）</li>
</ul>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>git 克隆 <a href="https://www-dev.cockos.com/licecap/licecap.git">https://www-dev.cockos.com/licecap/licecap.git</a><br>官方 GitHub 镜像：<a href="https://www.github.com/justinfrankel/licecap.git">github.com&#x2F;justinfrankel&#x2F;licecap</a></p>
<h2 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h2><p>一、打开 LICEcap，会见到如下页面，拖动页面边缘即可调整录屏框大小</p>
<p><img src="/images/licecap/1691459118.jpg"></p>
<p>二、进入属性设置页面，设置属性后开始录制</p>
<p><img src="/images/licecap/1691459749.jpg"></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>打开官网链接，下滑至官网底部，可下载不同系统的最新版</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>录屏工具</tag>
        <tag>GIF</tag>
        <tag>LICEcap</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js “Maximum call stack size exceeded” error.</title>
    <url>/2018/slag/maximum-call-stack-size-exceeded-error/</url>
    <content><![CDATA[<p>在使用 Vuejs 开发 SPA 页面时，我创建了一个父组件以及子组件，然后通过父组件去调用子组件时，报如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue.js “Maximum call stack size exceeded” error.</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<blockquote>
<p><strong>Panel.vue</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;shelf in shelfs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">panel-body</span> <span class="attr">:shelf</span>=<span class="string">&quot;shelf&quot;</span> <span class="attr">:selected.sync</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">panel-body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">PanelBody</span> <span class="keyword">from</span> <span class="string">&#x27;../components/PanelBody&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;panel-body&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="string">&#x27;panel-body&#x27;</span>: <span class="title class_">PanelBody</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">shelfs</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;shelf 1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">books</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&#x27;Lorem ipum&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&#x27;Dolor sit amet&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;shelf 2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">books</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&#x27;Ipsum lorem&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">title</span>: <span class="string">&#x27;Amet sit dolor&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">selected</span>: &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>PanelBody.vue</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">v-on:click.prevent.stop</span>=<span class="string">&quot;select&quot;</span>&gt;</span>&#123;&#123; shelf.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-show</span>=<span class="string">&quot;isSelected&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;book in shelf.books&quot;</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;panel-body&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;shelf&#x27;</span>, <span class="string">&#x27;selected&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">isSelected</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">selected</span> === <span class="variable language_">this</span>.<span class="property">shelf</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">select</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">selected</span> = <span class="variable language_">this</span>.<span class="property">shelf</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>错误原因：</p>
<blockquote>
<p>Maximum call stack size exceeded</p>
</blockquote>
<p>错误出处：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PanelBody</span> <span class="keyword">from</span> <span class="string">&#x27;../components/PanelBody&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;panel-body&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;panel-body&#x27;</span>: <span class="title class_">PanelBody</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>错误解决：<br>你定义你的父组件名称:“panel-body”。<strong>只要将名称改成:“panel”或者其他不与子组件引用名一样</strong>，你就能删除你的循环引用，从而不再报错。<br><br></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端fixed的元素抖动问题</title>
    <url>/2018/slag/mobile-fixed-shake/</url>
    <content><![CDATA[<p>工作中发现，给一个元素添加 <code>fixed</code> 属性，让它固定在窗口某个位置，直接加 <code>position:fixed</code> 这个属性就能重现这个效果（BUG）；</p>
<p>在安卓手机上的效果都比较好，但是 ios 系统的个别浏览器兼容性就不好，如 QQ 浏览器、UC 浏览器、360 浏览器（这几个是 ios 最容易出问题的浏览器）；</p>
<h2 id="问题重现："><a href="#问题重现：" class="headerlink" title="问题重现："></a>问题重现：</h2><p>当用户快速滑动页面的到时候，fixed 的元素就会在窗口跳动或者抖动，非常影响用户体验</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>大致思路就是，<strong>将 fixed 的元素与滚动的元素区分开来</strong>，例如：项目中有一个固定在底部的使用了 fixed 的按钮，那么滚动的容器与之成为兄弟元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里是内容区的滚动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 很长的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里是固定底部的按钮或者其他元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixBox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 class 为 container 的内容层中滚动，实际上，滚动条在 content 上，与 fixBox 已经无关，所以就不会影响抖动问题</p>
</blockquote>
<h2 id="额外出现的问题"><a href="#额外出现的问题" class="headerlink" title="额外出现的问题"></a>额外出现的问题</h2><p>精确定位到问题所在之后，就开始写 HTML 跟 CSS 了，因为考虑到是在移动端的项目，所以二话不说，直接上了 flex 的布局。</p>
<p>结果，测试人员在测试的过程中发现，<strong>低版本 webview 不支持 css3 flex 布局</strong>，具体请 <a href="https://caniuse.com/#search=flex">点这里</a>.</p>
<p>尴了个尬，此处省略无数个 WTF~!</p>
<p>最后，只能使用最原始的绝对定位来实现此效果~</p>
<p>下面附上修改后的样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">overflow-x</span>: visible;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixBox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完结~<br><br/></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>Css/Css3</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint 验证 no-unneeded-ternary</title>
    <url>/2018/slag/no-unneeded-ternary-eslint/</url>
    <content><![CDATA[<p>项目中引入 Eslint 进行团队开发，配置好之后，报错提示如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://eslint.org/docs/rules/no-unneeded-ternary  Unnecessary use of boolean literals <span class="keyword">in</span> conditional expression  </span><br></pre></td></tr></table></figure>

<p>文档的意思是 <strong>禁止不必要的嵌套</strong></p>
<p>源代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">btnStatus</span> = <span class="variable language_">this</span>.<span class="property">btnStatus</span> === <span class="literal">true</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>然后点开对应的链接就发现问题所在了~</p>
<p><strong>链接中的内容</strong> (就不翻译直接引入了。。。)</p>
<blockquote>
<p>It’s a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean. Here are some examples:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">var</span> isYes = answer === <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">var</span> isYes = answer === <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">var</span> isNo = answer === <span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">var</span> isNo = answer !== <span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Another common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical OR can be used to provide the same functionality. Here is an example:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">var</span> foo = bar ? bar : <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">var</span> foo = bar || <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>所以。。。</p>
<p>修改源代码之后的结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">btnStatus</span> = <span class="variable language_">this</span>.<span class="property">btnStatus</span> !== <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>报错&#x2F;警告 问题解决了~<br><br></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>三种编程命名法</title>
    <url>/2018/slag/nomenclature/</url>
    <content><![CDATA[<blockquote>
<p>人们交流靠各种语言，每行都有每行所谓的“行话”。程序员也不例外，众所周知，程序员都是用代码进行交流的。那么除了在代码中的注释之外，<br>程序员如何读懂别人的程序呢？<br>当然，程序员之间也有所谓的“潜规则”。大家都把代码中的变量、函数和类等等用目前常用的匈牙利命名、驼峰式、帕斯卡命名法来进行命名。</p>
</blockquote>
<h2 id="匈牙利命名法"><a href="#匈牙利命名法" class="headerlink" title="匈牙利命名法"></a>匈牙利命名法</h2><p>匈牙利命名法通过在变量名前面加上相应的小写字母的符号标识作为前缀，标识出变量的作用域，类型等。这些符号可以多个同时使用，顺序是先 m_（成员变量）， 再指针，再简单数据类型，再其他。例如：m_lpszStr, 表示指向一个以 0 字符结尾的字符串的长指针成员变量。</p>
<p>匈牙利命名法关键是：标识符的名字以一个或者多个小写字母开头作为前缀；前缀之后的是首字母大写的一个单词或多个单词组合，该单词要指明变量的用途。<br>匈牙利命名法中常用的小写字母的前缀：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">前缀              类型</span><br><span class="line"> a              数组 (Array)</span><br><span class="line"> b              布尔值 (Boolean)</span><br><span class="line"> by             字节 (Byte)</span><br><span class="line"> c              有符号字符 (Char)</span><br><span class="line"> cb             无符号字符 (Char Byte，没有多少人用)</span><br><span class="line"> cr             颜色参考值 (ColorRef)</span><br><span class="line"> cx,cy          坐标差（长度 ShortInt）</span><br><span class="line"> dw             Double Word</span><br><span class="line"> fn             函数</span><br><span class="line"> h              Handle（句柄）</span><br><span class="line"> i              整型</span><br><span class="line"> l              长整型 (Long Int)</span><br><span class="line"> lp             Long Pointer</span><br><span class="line"> m_             类的成员</span><br><span class="line"> n              短整型 (Short Int)</span><br><span class="line"> np             Near Pointer</span><br><span class="line"> p              Pointer</span><br><span class="line"> s              字符串型</span><br><span class="line"> sz             以null做结尾的字符串型 (String with Zero End)</span><br><span class="line"> w              Word</span><br></pre></td></tr></table></figure>

<h2 id="驼峰式"><a href="#驼峰式" class="headerlink" title="驼峰式"></a>驼峰式</h2><p>驼峰式命名法就是当变量名或函式名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；第二个单词的首字母大写或每一个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像驼峰峰一样此起彼伏，故得名。<br>驼峰式命名法（Camel-Case）一词来自 Perl 语言中普遍使用的大小写混合格式，而 Larry Wall 等人所著的畅销书《Programming Perl》（O’Reilly 出版）的封面图片正是一匹骆驼。<br>驼峰式命名法的命名规则可视为一种惯例，并无绝对与强制，为的是增加识别和可读性。</p>
<h3 id="小驼峰法"><a href="#小驼峰法" class="headerlink" title="小驼峰法"></a>小驼峰法</h3><p>变量一般用小驼峰法标识。驼峰法的意思是：除第一个单词之外，其他单词首字母大写。譬如<br>int myStudentCount;<br>变量 myStudentCount 第一个单词是全部小写，后面的单词首字母大写。</p>
<h3 id="大驼峰法"><a href="#大驼峰法" class="headerlink" title="大驼峰法"></a>大驼峰法</h3><p>相比小驼峰法，大驼峰法把第一个单词的首字母也大写了。常用于类名，函数名，属性，命名空间。譬如<br>public class DataBaseUser;</p>
<h2 id="帕斯卡命名法"><a href="#帕斯卡命名法" class="headerlink" title="帕斯卡命名法"></a>帕斯卡命名法</h2><p>帕斯卡命名法其实就是目前说的大驼峰命名法，常用于类名，函数名，属性，命名空间。<br><br></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>驼峰</tag>
      </tags>
  </entry>
  <entry>
    <title>将npm包发布在私有仓库nexus中</title>
    <url>/2020/slag/npm-package/</url>
    <content><![CDATA[<p>有时候需要将自己写的一些前端项目打包发布到公司内部的 nexus 仓库中<br>私服搭建地址：<a href="https://www.jianshu.com/p/1cfbc1518fce">https://www.jianshu.com/p/1cfbc1518fce</a></p>
<h3 id="在-nexus-中新建一个-repository"><a href="#在-nexus-中新建一个-repository" class="headerlink" title="在 nexus 中新建一个 repository"></a>在 nexus 中新建一个 repository</h3><h4 id="打开-nexus-登录以后，按照下图操作"><a href="#打开-nexus-登录以后，按照下图操作" class="headerlink" title="打开 nexus,登录以后，按照下图操作"></a>打开 nexus,登录以后，按照下图操作</h4><p><img src="/images/slag/npm-package1.png"></p>
<span id="more"></span>
<h4 id="选择-npm-hosted"><a href="#选择-npm-hosted" class="headerlink" title="选择 npm (hosted)"></a>选择 npm (hosted)</h4><p><img src="/images/slag/npm-package2.png"></p>
<h4 id="填写-repository-相关信息"><a href="#填写-repository-相关信息" class="headerlink" title="填写 repository 相关信息"></a>填写 repository 相关信息</h4><p><img src="/images/slag/npm-package3.png"></p>
<blockquote>
<ol>
<li>这里的 <code>Blob Store</code> 最好选择为 npm 专属的<br><img src="/images/slag/npm-package4.png"></li>
<li>如果没有需要在 <code>Blob Stores</code> 新建<br><img src="/images/slag/npm-package5.png"></li>
<li>在 Hosted 选择： <code>Allow redeploy</code> &gt; <img src="/images/slag/npm-package6.png"></li>
<li>点击 <code>Create repository</code> 创建</li>
</ol>
</blockquote>
<h3 id="配置-npm"><a href="#配置-npm" class="headerlink" title="配置 npm"></a>配置 npm</h3><h4 id="查看仓库地址"><a href="#查看仓库地址" class="headerlink" title="查看仓库地址"></a>查看仓库地址</h4><p>在 Repositories 列表中选择刚刚建的 npm-hosted ，点击 <code>copy</code><br><img src="/images/slag/npm-package7.png"><br>在弹出的弹框中可以看到仓库地址<br><img src="/images/slag/npm-package8.png"></p>
<h4 id="配置仓库地址"><a href="#配置仓库地址" class="headerlink" title="配置仓库地址"></a>配置仓库地址</h4><p>在 npm 中配置仓库地址，执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry 仓库地址</span><br></pre></td></tr></table></figure>

<h4 id="验证配置是否正确"><a href="#验证配置是否正确" class="headerlink" title="验证配置是否正确"></a>验证配置是否正确</h4><p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>

<h3 id="添加-nexus-权限"><a href="#添加-nexus-权限" class="headerlink" title="添加 nexus 权限"></a>添加 nexus 权限</h3><p>在 <code>Realms</code> 菜单中，将 <code>npm Bearer Token Realm</code> 添加到 <code>Active</code> 中<br><img src="/images/slag/npm-package9.png"></p>
<h3 id="上传-nexus"><a href="#上传-nexus" class="headerlink" title="上传 nexus"></a>上传 nexus</h3><h4 id="新建一个-demo-test-项目"><a href="#新建一个-demo-test-项目" class="headerlink" title="新建一个 demo-test 项目"></a>新建一个 demo-test 项目</h4><ol>
<li>新建一个目录 demo-test,并切换到其中</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir demo-test &amp;&amp; cd demo-test</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>初始化一个项目</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>然后一路回车，最后键入 y 即可</p>
<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm adduser -registry 仓库地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm adduser -registry http://xxx.xx.x.x:xxxx/repository/npm-hosted/</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) demo-test@devops.com</span><br><span class="line">Logged in as admin on http://xxx.xx.x.x:xxxx/repository/npm-hosted/.</span><br></pre></td></tr></table></figure>

<h4 id="上传包"><a href="#上传包" class="headerlink" title="上传包"></a>上传包</h4><blockquote>
<p>上传的包一定要确保根目录下有 package.json ,否则会报错。</p>
</blockquote>
<h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm publish -registry 仓库地址</span><br></pre></td></tr></table></figure>

<p><img src="/images/slag/npm-package10.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">demo-test npm publish -registry http://xx.xx.xx.xx:xxx/repository/npm-hosted/</span><br><span class="line">npm notice</span><br><span class="line">npm notice 📦  demo-test@1.0.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 348B package.json</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          demo-test</span><br><span class="line">npm notice version:       1.0.0</span><br><span class="line">npm notice package size:  320 B</span><br><span class="line">npm notice unpacked size: 348 B</span><br><span class="line">npm notice shasum:        c897041e0aa1cbf68734be9e4058e39490de8eb3</span><br><span class="line">npm notice integrity:     sha512-Seb61XX1ronMM[...]ioQBdXs2fEW+Q==</span><br><span class="line">npm notice total files:   1</span><br><span class="line">npm notice</span><br><span class="line">+ demo-test@1.0.0</span><br><span class="line">➜  demo-test</span><br></pre></td></tr></table></figure>

<p>此时即上传成功</p>
<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>在 package.json 中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;publishConfig&quot;: &#123;</span><br><span class="line">    &quot;registry&quot;: &quot;仓库地址&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><img src="/images/slag/npm-package11.png"></p>
<p>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<h3 id="验证是否上传成功"><a href="#验证是否上传成功" class="headerlink" title="验证是否上传成功"></a>验证是否上传成功</h3><p><img src="/images/slag/npm-package12.png"></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>nrm 安装与配置</title>
    <url>/2021/slag/nrm-installation-configuration/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>nrm</strong>（npm registry manager）是 <code>npm</code> 的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 <code>npm</code> 源间切换</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在命令行执行命令，<code>npm install -g nrm</code>，全局安装 <code>nrm</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>执行命令 <code>nrm ls</code> 查看可选的源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*npm ---- https://registry.npmjs.org/</span><br><span class="line">cnpm --- http://r.cnpmjs.org/</span><br><span class="line">taobao - http://registry.npm.taobao.org/</span><br><span class="line">eu ----- http://registry.npmjs.eu/</span><br><span class="line">au ----- http://registry.npmjs.org.au/</span><br><span class="line">sl ----- http://npm.strongloop.com/</span><br><span class="line">nj ----- https://registry.nodejitsu.com/</span><br></pre></td></tr></table></figure>

<p>其中，带*的是当前使用的源，上面的输出表明当前源是官方源。</p>
<h2 id="切换镜像"><a href="#切换镜像" class="headerlink" title="切换镜像"></a>切换镜像</h2><p>如果要切换到 <code>taobao</code> 源，执行命令 <code>nrm use taobao</code>。</p>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>你可以增加定制的源，特别适用于添加企业内部的私有源，执行命令 <code>nrm add &lt;registry&gt; &lt;url&gt;</code>，其中 <code>reigstry</code> 为源名，<code>url</code> 为源的路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm add registry http://registry.npm.frp.trmap.cn/</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>执行命令 <code>nrm del &lt;registry&gt;</code> 删除对应的源。</p>
<h2 id="测试速度"><a href="#测试速度" class="headerlink" title="测试速度"></a>测试速度</h2><p>你还可以通过 <code>nrm test</code> 测试相应源的响应时间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm test npm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>nrm</tag>
      </tags>
  </entry>
  <entry>
    <title>求两数组的difference</title>
    <url>/2018/slag/the-difference-two-array/</url>
    <content><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">求两数据的不同值，结果为[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>调用第三方工具：underscore</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">_.<span class="title function_">difference</span>(arr1, arr2);</span><br><span class="line">=&gt; [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>手写常规办法，创建临时数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// past</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> temp = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr2.<span class="title function_">indexOf</span>(arr1[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">    temp.<span class="title function_">push</span>(arr1[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(temp);</span><br></pre></td></tr></table></figure>

<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>调用 es6 的数组操作 api</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !arr2.<span class="title function_">includes</span>(item)));</span><br></pre></td></tr></table></figure>

<p>就酱~<br><br></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Chrome警告： Unable to preventDefault inside passive event listener 的解决方案</title>
    <url>/2018/slag/unable-to-preventDefault/</url>
    <content><![CDATA[<p>最近在移动端 H5 项目开发中，经常在 chrome 的控制台看到如下提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See https://www.chromestatus.com/features/5093566007214080</span><br></pre></td></tr></table></figure>

<p>首先，之所以报错是因为引入了 FastClick（为了解决 300ms 的 click 延迟）</p>
<p>于是 Google 了一番，找到这篇文章，有了详细解释<br><a href="https://developers.google.cn/web/updates/2017/01/scrolling-intervention">https://developers.google.cn/web/updates/2017/01/scrolling-intervention</a></p>
<p>简而言之：</p>
<blockquote>
<p>由于浏览器必须要在执行事件处理函数之后，才能知道有没有掉用过 preventDefault() ，这就导致了浏览器不能及时响应滚动，略有延迟。</p>
</blockquote>
<blockquote>
<p>所以为了让页面滚动的效果如丝般顺滑，从 chrome56 开始，在 window、document 和 body 上注册的 touchstart 和 touchmove 事件处理函数，会默认为是 passive: true。浏览器忽略 preventDefault() 就可以第一时间滚动了。</p>
</blockquote>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wnidow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, func) 效果和下面一句一样</span><br><span class="line">wnidow.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, func, &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>这就导致了一个问题：</p>
<blockquote>
<p>如果在以上这 3 个元素的 touchstart 和 touchmove 事件处理函数中调用 e.preventDefault() ，会被浏览器忽略掉，并不会阻止默认行为。</p>
</blockquote>
<p>测试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  <span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attr">height</span>: 2000px;</span><br><span class="line">  <span class="attr">background</span>: linear-<span class="title function_">gradient</span>(to bottom, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 chrome56 中，照样滚动，而且控制台会有提示，blablabla</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> e.<span class="title function_">preventDefault</span>())</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>那么如何解决这个问题呢？不让控制台提示，而且 preventDefault() 有效果呢？</p>
<p>两个方案：</p>
<ol>
<li><p>注册处理函数时，用如下方式，明确声明为不是被动的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, func, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>在 touch 的事件监听方法上绑定第三个参数{ passive: false }，通过传递 passive 为 false 来明确告诉浏览器：事件处理程序调用 preventDefault 来阻止默认滑动行为。</p>
</li>
<li><p>应用 CSS 属性 touch-action: none; 这样任何触摸事件都不会产生默认行为，但是 touch 事件照样触发。<br>touch-action 还有很多选项，详细请参考 <a href="https://w3c.github.io/pointerevents/#the-touch-action-css-property">touch-action</a>;</p>
</li>
</ol>
<p><strong>Passive event listeners</strong></p>
<p>2016 年 Google I&#x2F;O 上提出的概念，目的是用来提升页面滑动的流畅度。</p>
<blockquote>
<p>For instance, in Chrome for Android 80% of the touch events that block scrolling never actually prevent it. 10% of these events add more than 100ms of delay to the start of scrolling, and a catastrophic delay of at least 500ms occurs in 1% of scrolls.</p>
</blockquote>
<p>在 Android 版 Chrome 浏览器的 touch 事件监听器的页面中，80% 的页面都不会调用 preventDefault 函数来阻止事件的默认行为。在滑动流畅度上，有 10% 的页面增加至少 100ms 的延迟，1% 的页面甚至增加 500ms 以上的延迟。</p>
<p>由于浏览器无法预先知道一个事件处理函数中会不会调用 preventDefault()，它需要等到事件处理函数执行完后，才能去执行默认行为，然而事件处理函数执行是要耗时的，这样一来就会导致页面卡顿，也就是说，当浏览器等待执行事件的默认行为时，大部分情况是白等了。</p>
<p>如果 Web 开发者能够提前告诉浏览器：“我不调用 preventDefault 函数来阻止事件事件行为”，那么浏览器就能快速生成事件，从而提升页面性能，Passive event listeners 的提出就解决了这样的问题。</p>
<br/>]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>FastClick</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>金融行业的用户画像搭建与应用</title>
    <url>/2019/slag/user-portrait/</url>
    <content><![CDATA[<h1 id="什么是用户画像"><a href="#什么是用户画像" class="headerlink" title="什么是用户画像"></a>什么是用户画像</h1><p>在移动营销时代里，得用户者得天下，而说到用户则不能不提用户画像。众所周知，商界流传着一句著名的话，那就是“我知道我的广告费有一半是浪费了，但我不知道是那一半被浪费了”。于是大家越来越强调精准投放，精准营销，然而在精准营销的领域里，这一切都离不开用户画像。</p>
<p>那什么是用户画像呢？用户画像就是对客户信息在特定业务场景下的系统描述，即用户信息标签化，通过收集用户社会属性、消费习惯、偏好特征等维度数据，并对这些特征属性进行刻画，分析和挖掘潜在价值信息，从而抽象出一个用户的信息全貌。</p>
<h1 id="如何构建用户画像"><a href="#如何构建用户画像" class="headerlink" title="如何构建用户画像"></a>如何构建用户画像</h1><ol>
<li>数据收集</li>
</ol>
<p>数据是构成用户画像的基础，没有数据的话，用户画像也无从说起，那如何进行用户数据收集呢？用户数据一般分为静态数据和动态数据。</p>
<p>一般来说，每个公司都会有自己的业务系统，可以收集到用户的基本属性信息和交易信息，例如用户的姓名、年龄、性别和投资产品、投资金额、交易时间等，这些一般是用户的静态数据。而用户的行为信息则是属于动态数据，这个一般是通过 SDK 埋点所获取的，例如用户注册、登录、页面浏览等事件信息。当然，还有第三方数据的采集购买，但这个是作为第一方数据的补充，在这里就不进行论述了。</p>
<ol start="2">
<li>数据处理</li>
</ol>
<p>一般我们所获取到的数据都是原始数据来的，原始数据可能会存在着一些数据空缺、重复、或不一致等问题。因此我们还要对原数据进行清洗处理，才能从中抽取出有分析意义的数据，而数据清洗原则通常要结合具体业务场景进行制定。</p>
<ol start="3">
<li>数据打通</li>
</ol>
<p>现在用户数据获取的来源有多个渠道，而要勾勒一个完整的用户视图，则离不开渠道间的数据打通，例如一个用户可能有多个设备，拥有多个账号，则要把多个身份 ID 进行组合，建立统一标准，才能构建完整的用户画像。</p>
<ol start="4">
<li>用户数据标签化</li>
</ol>
<p>用户画像的本质，实际就是“标签化”的用户行为特征，通过给用户“打标签”如年龄、性别、兴趣爱好等，进行高度精炼的特征描述。</p>
<p><img src="/images/analysis/2019011002090212.png"></p>
<p>而用户标签一般分为 3 类：</p>
<p>1）统计类标签：这类标签是最为基础也是最为常见的标签类型，主要是从原始数据中直接提取出来的，例如用户性别、年龄、城市等；<br>2）规则类标签：这类标签主要基于用户行为及确定规则所产生的，例如“活跃用户”而什么才算是活跃用户，这里标签的规则就主要是由运营人员或数据人员进行确定的；<br>3）挖掘类标签：这类标签主要是通过数据挖掘所产生，解决的是从无到有的问题，例如用户“性别”未知，但因中国人的名字和性别是强相关的，因此可以利用贝叶斯算法推测该用户性别。</p>
<p>用户标签体系的搭建是用户画像中最为核心的工作，因此在梳理标签体系时尽量按照 MECE 原则，做到相互独立，完全穷尽。例如下图中互金行业的标签体系搭建。</p>
<p><img src="/images/analysis/2019011002090278.png"></p>
<h1 id="用户画像的实际运用"><a href="#用户画像的实际运用" class="headerlink" title="用户画像的实际运用"></a>用户画像的实际运用</h1><p>不同的企业做用户画像会有不同的战略目的，例如广告平台，主要是为了精准投放，找到目标用户，而内容平台是为了个性化推荐，更好的留住用户，数据类平台，则是进行用户分析，挖掘数据价值，驱动运营增长；</p>
<p>而对于金融行业来说，金融服务目前正在由以产品为中心转向以用户为中心。面对不同的用户类型，用户群体的细分就显得非常重要，例如有些客户是稳健型投资者，偏好保本收益，有些则是激进型投资者，偏好高风险收益，那这时就应该要为不同用户群体设计不同的金融产品。同样，针对不同年龄段、不同职业、不同偏好的用户，所采取的营销策略也会不一样。这时就可以根据用户属性信息、消费特征、兴趣偏好等来为不同的用户提供不同的产品服务与营销策略。</p>
<p><img src="/images/analysis/2019011002090375.png"></p>
<p>在精准营销的领域当中，用户画像是必不可缺的，一个好的用户画像可以帮助企业进行产品定位，人群细分，指导营销决策。但用户画像的搭建与使用必须结合具体的业务场景，否则就算是有再多的数据维度，再完整的用户画像，也无法发挥作用。<br><br/><br><br/><br><br/></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>用户行为</tag>
        <tag>用户画像</tag>
        <tag>行为分析</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 vscode 配置 ESLint</title>
    <url>/2018/slag/vscode-ESLint/</url>
    <content><![CDATA[<h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a><a href="http://eslint.org/">Eslint</a></h3><p>最初是由 Nicholas C. Zakas 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的 javascript 代码检测工具。<br>对于每一个开发者(尤其是团队项目开发)而言都是非常值得使用的，这样会强制你写出高质量且整洁的代码</p>
<h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a><a href="https://code.visualstudio.com/">VS Code</a></h3><p>Visual Studio Code 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。</p>
<h3 id="VUE-VSCode-Eslint"><a href="#VUE-VSCode-Eslint" class="headerlink" title="VUE + VSCode + Eslint"></a>VUE + VSCode + Eslint</h3><p>在使用 VSCode 编辑器开发 vue 项目时，当使用 vscode 自带的格式化代码，让 vue 项目的代码风格统一，整洁就很有必要了。</p>
<p>折腾了两天，看了好些文档，虽然总感觉并没有真正理解，但好歹也出了点成果</p>
<p>使用 eslint + VSCode 来写 vue 。 每次保存，vscode 就能标红不符合 eslint 规则的地方，同时还会做一些简单的自我修正</p>
<p>首先安装 eslint 插件，上文有官网通道，自己去官方查看安装步骤。</p>
<p>安装并配置完成 ESLint 后，我们继续回到 VSCode 进行扩展设置，点击 首选项 &gt; 设置 打开 VSCode 配置文件，添加如下配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eslint</span></span><br><span class="line"><span class="string">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="comment">//根据文件后缀名定义vue文件类型</span></span><br><span class="line"><span class="string">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;*.vue&quot;</span>: <span class="string">&quot;vue&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>, <span class="comment">//每次保存的时候将代码按eslint格式进行修复</span></span><br><span class="line"><span class="string">&quot;eslint.options&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line">  <span class="string">&quot;extensions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.vue&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//保存时eslint自动修复错误</span></span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;vue-html&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;js-beautify-html&quot;</span>,</span><br><span class="line"><span class="string">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;js-beautify-html&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;wrap_attributes&quot;</span>: <span class="string">&quot;force&quot;</span> <span class="comment">// 可以换成上面任意一种value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：这里有一个不明白的地方，我在没有装 vscode 插件 Beautify 以及 Prettier 插件的时候，引用了上述配置也能生效。。。但建议大家将这两个插件都安装一下。</p>
<p>这样每次保存的时候就可以根据根目录下.eslintrc.js 你配置的 eslint 规则来检查和做一些简单的 fix。每个人和团队都有自己的代码规范，统一就好了</p>
<h3 id="ESLint-和-Prettier-的冲突修复"><a href="#ESLint-和-Prettier-的冲突修复" class="headerlink" title="ESLint 和 Prettier 的冲突修复"></a>ESLint 和 Prettier 的冲突修复</h3><p>在用 <code>Prettier</code> 格式化的时候，可以能会和 <code>ESLint</code> 定义的校验规则冲突，比如 <code>Prettier</code> 字符串默认是用双引号而 <code>ESLint</code> 定义的是单引号的话这样格式化之后就不符合 <code>ESLint</code> 规则了。所以要解决冲突就需要在 <code>Prettier</code> 的规则配置里也配置上和 <code>ESLint</code> 一样的规则，这里贴下 <code>ESLint</code> 和 <code>Prettier</code> 的配置文件。</p>
<ul>
<li>.eslintrc.js 配置文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es6</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="comment">// required to lint *.vue files</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;html&quot;</span>],</span><br><span class="line">  <span class="comment">// check if imports actually resolve</span></span><br><span class="line">  <span class="attr">settings</span>: &#123;</span><br><span class="line">    <span class="string">&quot;import/resolver&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">webpack</span>: &#123;</span><br><span class="line">        <span class="attr">config</span>: <span class="string">&quot;build/webpack.base.conf.js&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// add your custom rules here</span></span><br><span class="line">  <span class="comment">//it is base on https://github.com/vuejs/eslint-config-vue</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;arrow-spacing&quot;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">before</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">after</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>.prettierrc 配置文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//使用单引号</span></span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//结尾不加分号</span></span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样把 <code>ESLint</code> 和 <code>Prettier</code> 冲突的规则配置一致,格式化之后就不会冲突了。</p>
<h3 id="命令式自动修复"><a href="#命令式自动修复" class="headerlink" title="命令式自动修复"></a>命令式自动修复</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run lint -- --fix</span><br></pre></td></tr></table></figure>

<p>命令行工具有几个选项，你可以通过运行 eslint -h 查看所有选项</p>
<br>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Eslint</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件间通信</title>
    <url>/2017/slag/vue-inter-component-communication/</url>
    <content><![CDATA[<p>分两种，父子组件与非父子组件的通信</p>
<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><p>首先要明白，在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递</p>
<p>也就是说父组件通过 prop 给子组件下发数据，子组件通过 事件 给父组件发送消息</p>
<p>注：如果你想把一个对象的所有属性作为 prop 进行传递，可以使用不带任何参数的 v-bind(即用 v-bind 而不是 v-bind:prop-name)。例如，已知一个 todo 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">todo</span>: &#123;</span><br><span class="line">   <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span>,</span><br><span class="line">   <span class="attr">isComplete</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;todo-item v-bind=<span class="string">&quot;todo&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>将等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;todo-item v-<span class="attr">bind</span>:text=<span class="string">&quot;todo.text&quot;</span> v-<span class="attr">bind</span>:is-complete=<span class="string">&quot;todo.isComplete&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>通过 Vue 的自定义事件来解决子组件给父组件发送消息</p>
<p>每个 Vue 实例都实现了事件接口，即：</p>
<ul>
<li>使用 $on(eventName) 监听事件</li>
<li>使用 $emit(eventName) 触发事件</li>
</ul>
<blockquote>
<p>PS：在项目中有时也会碰到父与子孙组件的通信，这时，需要在子组件中给对应的数据添加 watch 来时时响应才行</p>
</blockquote>
<h2 id="非父子组件通信"><a href="#非父子组件通信" class="headerlink" title="非父子组件通信"></a>非父子组件通信</h2><p>有两种办法解决：</p>
<h4 id="一、组件间相对简单情况下"><a href="#一、组件间相对简单情况下" class="headerlink" title="一、组件间相对简单情况下"></a>一、组件间相对简单情况下</h4><p>有时候，非父子关系的两个组件之间也需要通信。在简单的场景下，可以使用一个空的 Vue 实例作为事件总线：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;id-selected&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 在组件 B 创建的钩子中监听事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;id-selected&#x27;</span>, <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个时候，可能我们就需要定义一个全局变量来分配各个组件间的通信事件</p>
<h4 id="二、组件复杂的情况下"><a href="#二、组件复杂的情况下" class="headerlink" title="二、组件复杂的情况下"></a>二、组件复杂的情况下</h4><p>官方文档推荐考虑使用专门的状态管理模式（Vuex）。</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 的 混入(mixins)</title>
    <url>/2018/slag/vue-mixins/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello from mixin!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> <span class="title class_">Component</span>(); <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h2><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。<br>比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">      <span class="attr">foo</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [mixin],</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;goodbye&#x27;</span>,</span><br><span class="line">      <span class="attr">bar</span>: <span class="string">&#x27;def&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="comment">// =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>同名钩子函数将混合为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;混入对象的钩子被调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [mixin],</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件钩子被调用&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; &quot;混入对象的钩子被调用&quot;</span></span><br><span class="line"><span class="comment">// =&gt; &quot;组件钩子被调用&quot;</span></span><br></pre></td></tr></table></figure>

<p>值为对象的选项，例如 <code>methods</code>, <code>components</code> 和 <code>directives</code>，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from mixin&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [mixin],</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">conflicting</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from self&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">foo</span>(); <span class="comment">// =&gt; &quot;foo&quot;</span></span><br><span class="line">vm.<span class="title function_">bar</span>(); <span class="comment">// =&gt; &quot;bar&quot;</span></span><br><span class="line">vm.<span class="title function_">conflicting</span>(); <span class="comment">// =&gt; &quot;from self&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>Vue.extend()</code> 也使用同样的策略进行合并。</p>
<h2 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h2><p>也可以全局注册混入对象。注意使用！ 一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">myOption</span>;</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(myOption);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">myOption</span>: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; &quot;hello!&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Webpack在Template中为Img标签的属性Src赋值问题</title>
    <url>/2018/slag/vue-webpack-img-src/</url>
    <content><![CDATA[<p>使用 Vue 的脚手架构建项目过程中，其中一个模板是这样写的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>大致代码如上所示，其实 imgSrc 是一个变量方式引入的图片地址。</p>
<p>遇到的问题是 imgSrc 中的路径并不会被 webpack 编译，还保持着相对路径的状态，最终产生 404 错误。</p>
<p>那该如何解决？</p>
<h4 id="如果使用的是-img-标签"><a href="#如果使用的是-img-标签" class="headerlink" title="如果使用的是 img 标签"></a>如果使用的是 img 标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 中代码</span></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">img</span>: <span class="built_in">require</span>(<span class="string">&#x27;path/to/your/source&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 然后在template中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="如果使用的是背景图的方式"><a href="#如果使用的是背景图的方式" class="headerlink" title="如果使用的是背景图的方式"></a>如果使用的是背景图的方式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 中代码</span></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">img</span>: <span class="built_in">require</span>(<span class="string">&#x27;path/to/your/source&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 中代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;backgroundImage:&#x27;url(&#x27; + img + &#x27;)&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 或者直接在css中定义 */</span></span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;path/to/your/source&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 require 的方式去加载，就能让 webpack 编译并在生产版本中正常展示</p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>-webkit-overflow-scrolling:touch及ios滚动</title>
    <url>/2018/slag/webkit-overflow-scrolling/</url>
    <content><![CDATA[<h2 id="webkit-overflow-scrolling-touch-是什么？"><a href="#webkit-overflow-scrolling-touch-是什么？" class="headerlink" title="-webkit-overflow-scrolling:touch 是什么？"></a>-webkit-overflow-scrolling:touch 是什么？</h2><p>MDN 上是这样定义的：</p>
<blockquote>
<p><strong><code>-webkit-overflow-scrolling</code></strong>: 属性控制元素在移动设备上是否使用滚动回弹效果.<br><strong><code>auto</code></strong>: 使用普通滚动, 当手指从触摸屏上移开，滚动会立即停止。<br><strong><code>touch</code></strong>: 使用具有回弹效果的滚动, 当手指从触摸屏上移开，内容会继续保持一段时间的滚动效果。继续滚动的速度和持续的时间和滚动手势的强烈程度成正比。同时也会创建一个新的堆栈上下文。</p>
</blockquote>
<p>在移动端上，在你用 <code>overflow-y:scorll</code> 属性的时候，你会发现滚动的效果很木，很慢，这时候可以使用 <code>-webkit-overflow-scrolling:touch</code> 这个属性，让滚动条产生滚动回弹的效果，就像 ios 原生的滚动条一样流畅。</p>
<h2 id="解决-safari-布局抖动的例子"><a href="#解决-safari-布局抖动的例子" class="headerlink" title="解决 safari 布局抖动的例子"></a>解决 safari 布局抖动的例子</h2><p><img src="/images/slag/webkit-scrolling-touch.png"></p>
<p>想实现一个布局为 header、main、bottom 的布局，其中头部和底部通过 fixed 固定，中间部分通过滚动条滑动。</p>
<span id="more"></span>

<p>如果目的是实现只要中间的内容超过屏幕高度时，中间内容会自动滚动的效果的话，main 部分加上上下的 padding，然后不需要自己添加任何滚动条属性，当超出高度时，body 会自动产生滚动条。这样我们的目的其实是实现了的。</p>
<p>但是在 safari 上，当超出高度，页面往下滑时，浏览器底部的工具栏会随着页面一起晃动（向下滚动时会拉起底部工具栏），造成了很不好的体验。所以我们想在中间的 main 部分加一个独立的滚动条。</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>在 main 上使用 fixed 定位，加上 overflow-y 属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过不推荐这个 fixed 方案，因为页面偶尔卡住不动，下面说到了这个问题。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>中间的 main 不设定位，高度 100%，再 padding 头部和尾部，</p>
<p>其中头部和底部的定位设为 absolute 会比设为 fixed 体验更好（况且 fix 布局在移动端本来就有各种各样的问题，还是尽量避开:) ）。</p>
<p>大致代码如下，仍是 overflow-y 和-webkit-overflow-scrolling，重点在于中间部分依照文本流布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="探究-webkit-overflow-scrolling-touch-偶尔卡住或不能滑动的-bug"><a href="#探究-webkit-overflow-scrolling-touch-偶尔卡住或不能滑动的-bug" class="headerlink" title="探究-webkit-overflow-scrolling:touch 偶尔卡住或不能滑动的 bug"></a>探究-webkit-overflow-scrolling:touch 偶尔卡住或不能滑动的 bug</h2><p>-webkit-overflow-scrolling:touch 这个属性真的是各种坑，我研究这个属性已经大半年了，还没有发现能够在 safari 上完美使用无 bug 的例子。</p>
<blockquote>
<p>最常见的例子就是</p>
<ul>
<li>在 safari 上，使用了-webkit-overflow-scrolling:touch 之后，页面偶尔会卡住不动。</li>
<li>在 safari 上，点击其他区域，再在滚动区域滑动，滚动条无法滚动的 bug。</li>
<li>通过动态添加内容撑开容器，结果根本不能滑动的 bug。</li>
</ul>
</blockquote>
<p>在网上也看到了一些人在问这个问题，不过不多，国外倒是讨论的更多一点，描述如下。</p>
<p><img src="/images/slag/webkit-scrolling-touch2.png"></p>
<p>偶尔卡住的问题，解决方案网上众说纷纭，遇到了很多相同的说法，比如如果卡住不动的话，就加一个 z-index，就能解决该问题的说法。</p>
<p>在试了很多次之后，这种说法没有一次解决过这个问题。这个说法能够传播出来，可能是使用者当时在使用的时候遇到了-webkit-overflow-scrolling:touch 点透或者层级的问题。所以该方案不具有适用性。</p>
<p>所以这个东西真的让我很苦恼了很久，以致于那段时间所有的滚动条不是通过 body 自己滚动，就是使用 iScroll 这样的库，繁琐地让我几乎想要放弃移动 web，拥抱 hybrid，不过在 stackoverflow 潜水了很久之后，总结了以下几种解决方案：</p>
<h3 id="保证使用了该属性的元素上没有设置定位"><a href="#保证使用了该属性的元素上没有设置定位" class="headerlink" title="保证使用了该属性的元素上没有设置定位"></a>保证使用了该属性的元素上没有设置定位</h3><p>如果出现偶尔卡住不动的情况，那么在使用该属性的元素上不设置定位或者手动设置定位为 <code>static</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: static;</span><br></pre></td></tr></table></figure>

<p>这样会解决部分因为定位(relative、fixed、absolute)导致的页面偶尔不能滚动的 bug。</p>
<blockquote>
<p>但是滑动到顶部继续手指往下滑，或者到底部继续往上滑，还是会触发卡住的问题（其实是整个页面上下回弹），说他算 bug，其实就是 ios8 以上的特性，如果滚动区域大一点，用户不会觉得这是 bug，如果小了，用户会不知道发生了什么而卡住了。<br>视频在这，有梯子的同学可以看一看 <a href="https://www.youtube.com/watch?v=MkAVYbO_joo%E3%80%82">https://www.youtube.com/watch?v=MkAVYbO_joo。</a></p>
</blockquote>
<h3 id="如果添加动态内容页面不能滚动，让子元素-height-1"><a href="#如果添加动态内容页面不能滚动，让子元素-height-1" class="headerlink" title="如果添加动态内容页面不能滚动，让子元素 height+1"></a>如果添加动态内容页面不能滚动，让子元素 height+1</h3><p>如果在 <code>-webkit-overflow-scrolling:touch</code> 属性的元素上，想通过动态添加内容来撑开容器，触发滚动，是有 bug 的，页面是会卡住不动的。</p>
<p>国内没有人讨论这个问题，国外倒是很多，例如下面的描述：</p>
<p><img src="/images/slag/webkit-scrolling-touch2.png"></p>
<p>收集了很多资料，用了之后，下面的方法真正的解决了我的问题，真是直呼神奇，方案如下图：</p>
<p>图一：<br><img src="/images/slag/webkit-scrolling-touch3.png"><br>图二：<br><img src="/images/slag/webkit-scrolling-touch4.png"></p>
<p>方法就是在 <code>webkit-overflow-scrolling:touch</code> 属性的下一层子元素上，将 height 加 1%或 1px。从而主动触发 scrollbar。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span>-inner &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你也可以直接加伪元素上：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方案不得不说真的好用。。</p>
<p>当然还有其他方案，不过要写 js 或者 jq 了，麻烦。</p>
<h3 id="为什么会有卡住不动的这个-bug"><a href="#为什么会有卡住不动的这个-bug" class="headerlink" title="为什么会有卡住不动的这个 bug"></a>为什么会有卡住不动的这个 bug</h3><p>这个 bug 产生于 ios8 以上（不十分肯定，但在 ios5~7 上需要手动使用 translateZ(0)打开硬件加速）</p>
<p>Safari 对于 overflow-scrolling 用了原生控件来实现。对于有-webkit-overflow-scrolling 的网页，会创建一个 UIScrollView，提供子 layer 给渲染模块使用。</p>
<p>我想说作为一个苦逼的前端只能解决到这了。</p>
<h3 id="webkit-overflow-scrolling-touch-的其他坑"><a href="#webkit-overflow-scrolling-touch-的其他坑" class="headerlink" title="-webkit-overflow-scrolling:touch 的其他坑"></a>-webkit-overflow-scrolling:touch 的其他坑</h3><blockquote>
<p>除此之外，这个属性还有很多 bug，包括且不限于以下几种：</p>
<ul>
<li>滚动中 scrollTop 属性不会变化</li>
<li>手势可穿过其他元素触发元素滚动</li>
<li>滚动时暂停其他 transition</li>
</ul>
</blockquote>
<h2 id="最后的吐槽"><a href="#最后的吐槽" class="headerlink" title="最后的吐槽"></a>最后的吐槽</h2><p>想写这个文章很久了， 本来以为就我有这个问题，结果看到网站上也有很多人在用这个属性，我用 safari 试了下，都能触发不能滑动的问题，但是网上的文章又很少，不知道大家是不是就视而不见了。</p>
<p>所以目前来看，如果不想那么费心，直接上 iScroll 或者 better-scroll 吧，我觉得 better-scroll 还是挺好用的。如果你喜欢偷懒，那么接着用-webkit-overflow-scrolling:touch 也没什么问题。</p>
<p>毕竟移动端的水太深了，你永远不知道下一个问题是发生在 safari 还是 x5 内核浏览器上。</p>
<p>转自：<a href="https://www.cnblogs.com/xiahj/p/8036419.html">https://www.cnblogs.com/xiahj/p/8036419.html</a><br><br/><br><br/></p>
]]></content>
      <categories>
        <category>技术渣</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>移动端</tag>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>乌鲁木齐，吐鲁番两天自驾游</title>
    <url>/2019/travel/Turpan-travel/</url>
    <content><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><ul>
<li>成员人数：4 人</li>
<li>共需费用：约 600 元&#x2F;人</li>
<li>行驶里程：762 公里</li>
<li>路线：乌鲁木齐-高昌故居-火焰山-吐鲁番-库木塔格沙漠-乌鲁木齐</li>
</ul>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul>
<li>住宿：吐鲁番亚朵酒店（四星级别，你懂得，400 左右双人间）</li>
<li>门票费：高昌故居，火焰山，库木塔格沙漠景区等（套票，126&#x2F;人）</li>
<li>神舟租车：大众途观，712 元租车，405 元油费</li>
</ul>
<h2 id="行车详情"><a href="#行车详情" class="headerlink" title="行车详情"></a>行车详情</h2><blockquote>
<p>乌鲁木齐市租到车 10 点半开始出发，主要走的是京新高速，沿路一直在修路，可能因为是节假日，车况也不是太好。车速限速 120，基本上在 100 左右行驶。一路上，检查也较严格，服务区都会有专门的检查通道，但一般只需要打开窗户，偶尔出示驾照即可。</p>
</blockquote>
<h3 id="第一天，乌鲁木齐-高昌故居-火焰山-吐鲁番"><a href="#第一天，乌鲁木齐-高昌故居-火焰山-吐鲁番" class="headerlink" title="第一天，乌鲁木齐-高昌故居-火焰山-吐鲁番"></a>第一天，乌鲁木齐-高昌故居-火焰山-吐鲁番</h3><p>行驶到吐鲁番景区时略严格，需要所有人下车，除了司机要远离车辆，要打开前车盖，后备箱，司机要距离汽车 5 米左右朝向汽车。尴尬的是我不会开前车盖，哈哈哈，还是警察同志帮我开的。。<br>到达高昌故居已经是下午 4 点多了，不过对于 9 点才天黑的边疆来说，这都不是事儿。<br>游完故居，然后去了一个没啥意思的古墓，唐朝风，名字忘了。接着去了火焰山，传说中的火焰山。。。也没啥看头，不过人还挺多。<br>然后一路往吐鲁番亚朵酒店行驶。<br>入住亚朵之后，酒店边上找了一家川菜馆，蛮正宗的。吃完已经快 10 点了。</p>
<h3 id="第二天，吐鲁番-库木塔格沙漠-乌鲁木齐"><a href="#第二天，吐鲁番-库木塔格沙漠-乌鲁木齐" class="headerlink" title="第二天，吐鲁番-库木塔格沙漠-乌鲁木齐"></a>第二天，吐鲁番-库木塔格沙漠-乌鲁木齐</h3><p>早上在酒店吃了自助餐，大概 10 点多出发，奔向库木塔格沙漠，一路的风景，到达已是下午 1 点左右吧，景区停车挺便宜的，才 5 块。<br>库木塔格沙漠玩到下午 4 点左右，然后出发回乌鲁木齐。</p>
<span id="more"></span>

<br>

<h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><h3 id="no-pic-you-say-a-jb"><a href="#no-pic-you-say-a-jb" class="headerlink" title="no pic you say a jb"></a><p align="center">no pic you say a jb</p></h3><hr>
<p><img src="/images/turpan/1.JPG"><br><img src="/images/turpan/2.JPG"><br><img src="/images/turpan/3.JPG"><br><img src="/images/turpan/4.JPG"><br><img src="/images/turpan/5.JPG"><br><img src="/images/turpan/6.JPG"><br><img src="/images/turpan/7.JPG"><br><img src="/images/turpan/8.JPG"><br><img src="/images/turpan/9.JPG"><br><img src="/images/turpan/10.JPG"><br><img src="/images/turpan/11.JPG"><br><img src="/images/turpan/12.JPG"><br><img src="/images/turpan/13.JPG"><br><img src="/images/turpan/14.JPG"><br><img src="/images/turpan/15.JPG"><br><img src="/images/turpan/16.JPG"><br><img src="/images/turpan/17.JPG"></p>
]]></content>
      <categories>
        <category>路上</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>大西北8天自驾游</title>
    <url>/2017/travel/big-northwest-pleasure/</url>
    <content><![CDATA[<blockquote>
<p>有人说：“人生至少要有两次冲动：一场奋不顾身的爱情和一段走就走的旅行。”</p>
</blockquote>
<p><img src="/images/northwest/pleasure1.jpeg"><br><img src="/images/northwest/pleasure2.jpeg"></p>
<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><ul>
<li>成员人数：4 人</li>
<li>共需费用：约 4600 元&#x2F;人（包括租车及违章费用，你想飙车我也没意见）</li>
<li>行驶里程：2450 公里</li>
<li>路线：飞到兰州-动车到西宁(租车自驾)-张掖-嘉峪关-敦煌-德令哈-茶卡盐湖-黑马河乡-顺时针环青海湖(鸟岛，仙女湾啥的都不好玩)-西宁(还车)-西宁飞回杭州</li>
</ul>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ul>
<li>机票：杭州-兰州，3400；西宁-杭州，3840(中转西安咸阳)。PS：越早订越便宜，你们懂得。</li>
<li>住宿：93.5&#x2F;人&#x2F;天，双人间。可兄弟，可情侣，可夫妻，可。。</li>
<li>门票费：595&#x2F;人，塔尔寺(80&#x2F;人)，敦煌莫高窟(200&#x2F;人)，鸣沙山月牙泉(120&#x2F;人)，嘉峪关关城通票(120&#x2F;人)，张掖丹霞国家地质公园(75&#x2F;人)</li>
<li>神舟租车：别克君越，2073 元，共 8 天，真心没想到它的油耗这么少</li>
<li>油费：270+170+320+205 &#x3D; 965 元（92 号）</li>
<li>过路费(省道及高速)：约 357 元</li>
<li>停车费：51 元</li>
<li>矿泉水(娃哈哈)：总共 49 瓶（4 人），水很重要</li>
</ul>
<h2 id="行车详情"><a href="#行车详情" class="headerlink" title="行车详情"></a>行车详情</h2><ol>
<li>西宁站取车-汉庭酒店(张掖市政府店)：338.3 公里，宁大高速，西张线，祁连县</li>
<li>汉庭酒店(张掖市政府店)-张掖丹霞国家地质公园： 39.9 公里</li>
<li>张掖丹霞国家地质公园-如家快捷酒店(嘉峪关迎宾东路大唐美食街店)：217.5 公里，连霍高速</li>
<li>如家快捷酒店(嘉峪关迎宾东路大唐美食街店)-嘉峪关关城：8.6 公里，嘉峪关关城-悬壁长城：8.5 公里，悬壁长城-天下第一墩：16.5 公里</li>
<li>天下第一墩-敦煌饭店：439.3 公里，连霍高速，红格线</li>
<li>敦煌饭店-敦煌莫高窟：25.4 公里，敦煌莫高窟-鸣沙山·月牙泉：27.8 公里，鸣沙山·月牙泉-敦煌饭店：4.7 公里</li>
<li>敦煌饭店-派酒店(青海德令哈新区店)：545.7 公里，柳格高速，西莎线</li>
<li>派酒店(青海德令哈新区店)-茶卡盐湖：197.3 公里，S2013，茶卡盐湖-共和县云天夏都商务酒店：81.9 公里，京拉线</li>
<li>共和县云天夏都商务酒店-青海湖鸟岛景区：64.5 公里，环湖西路，青海湖鸟岛景区-青海湖仙女湾：84.5 公里，环湖西路，西莎线</li>
<li>青海湖仙女湾-7 天连锁酒店(湟中塔尔寺店)：208 公里，西莎线，京藏高速</li>
<li>7 天连锁酒店(湟中塔尔寺店)-塔尔寺：4 公里，塔尔寺-西宁高铁：35 公里，宁贵高速，京藏高速</li>
<li><strong>总计：2429.3+市区绕行 &#x3D; 约 2450 公里</strong></li>
</ol>
<span id="more"></span>

<h2 id="住宿详情"><a href="#住宿详情" class="headerlink" title="住宿详情"></a>住宿详情</h2><ul>
<li>第一晚：兰州浙商酒店，325&#x2F;2，地点：兰州市，兰州中川机场附近</li>
<li>第二晚：汉庭酒店（张掖市政府店），304&#x2F;2，地点：张掖市， 甘州区 西环路 3 号张化大厦 ，近南环路</li>
<li>第三晚：如家快捷酒店（嘉峪关迎宾东路大唐美食街店），264&#x2F;2，地点：嘉峪关市，迎宾东路 1100 号 ，近五一中路</li>
<li>第四，五晚：敦煌饭店，792&#x2F;2 晚&#x2F;2 间，地点：敦煌市内，鸣山北路 373 号 ，近沙洲夜市</li>
<li>第六晚：派酒店(青海德令哈新区店)，326&#x2F;2，地点：德令哈市，环城西路 32 号 ，近黑海路</li>
<li>第七晚：共和县云天夏都商务酒店，252&#x2F;2，地点：黑马河乡，共和县黑马河乡环湖西路 20 米处</li>
<li>第八晚：7 天连锁酒店（西宁湟中店），354&#x2F;2，地点：西宁市，湟中县，庄隆路 11 号</li>
<li>总价：2617&#x2F;4 &#x3D; 654.25&#x2F;7 &#x3D; 93.5&#x2F;人&#x2F;天</li>
</ul>
<h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><h3 id="穿着"><a href="#穿着" class="headerlink" title="穿着"></a>穿着</h3><ul>
<li>防晒措施：短袖 t 恤带个至少三件，墨镜，皮肤衣，面巾，护发素，帽子，润唇膏（敦煌，嘉峪关）</li>
<li>防寒措施：薄羽绒服，披巾，感冒药等（西宁，德令哈，青海湖，海拔高气温低）</li>
</ul>
<h3 id="租车"><a href="#租车" class="headerlink" title="租车"></a>租车</h3><ul>
<li>神舟租车，直接可以网上预约。最好租当地车牌的车，万一有违章要处理，那可以在还车前，直接处理掉。</li>
</ul>
<h3 id="吃货"><a href="#吃货" class="headerlink" title="吃货"></a>吃货</h3><ul>
<li>当地菜的份量比较大，所以，适当少点些，尽量别在景区附近饮食（土豪可略）</li>
</ul>
<h4 id="吃在兰州"><a href="#吃在兰州" class="headerlink" title="吃在兰州"></a>吃在兰州</h4><blockquote>
<ul>
<li>正宁路小吃街（夜市摊）推荐中间排队需十几二十分钟才能买到的牛奶鸡蛋醪糟。</li>
<li>大众巷马子禄牛肉面（早餐）推荐早上去吃，可选面条粗细，是否加辣子。</li>
<li>杜记甜食、炒面片、类似馕的饼，在大众巷都有卖。特产礼物是脆皮核桃。</li>
</ul>
</blockquote>
<h4 id="吃在敦煌"><a href="#吃在敦煌" class="headerlink" title="吃在敦煌"></a>吃在敦煌</h4><blockquote>
<ul>
<li>顺张驴肉黄面一定要吃！不是达记而是顺张的！晚上迟了就没有，建议莫高窟逛完直接市区宾馆入住后就去吃！驴肉春卷啊驴肉啊什么的都可以不点，面一定要吃。</li>
<li>沙洲夜市的排骨焖饼子还不错。</li>
</ul>
</blockquote>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><ul>
<li>大西北东西差不多，随便吃吧，没啥特别的。可以吃下搓鱼子，虽然不是武威，但可以试试武威酿皮（黑色的），烤肉（嘉峪关吃），还有烧壳子，鸡肉垫卷子（这个好吃，张掖）等。早上的早饭那边兴吃牛肉拉面，剥几颗大蒜一块儿就面吃。买好储备粮和水，路上喝，尤其是水。从敦煌西南一路下来之后，就是柴达木盆地了，入目的是一片广袤辽远的平囊，被包裹在远处耸然而立的缠绵高山里，汽车一路行走在荒无人烟的土地上（所以没商店了），运气好还可以看见单峰的野骆驼。早饭吃饱些，可以泡几杯咖啡路上喝。黑马河乡的牦牛肉，羊肉还不错，毕竟土生土养。真心不觉得青海这边的饭菜有多好吃…</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>敦煌莫高窟门票要在官网上提前预约</li>
<li>西宁去张掖的行程一定要在白天，沿路过祁连山(海拔高，有雪山)，风景很赞，盘山公路</li>
</ul>
<br>

<h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><h3 id="no-pic-you-say-a-jb"><a href="#no-pic-you-say-a-jb" class="headerlink" title="no pic you say a jb"></a><p align="center">no pic you say a jb</p></h3><hr>
<h3 id="张掖丹霞国家地质公园"><a href="#张掖丹霞国家地质公园" class="headerlink" title="张掖丹霞国家地质公园"></a>张掖丹霞国家地质公园</h3><p><img src="/images/northwest/pleasure3.jpeg"><br><img src="/images/northwest/pleasure4.jpeg"><br><img src="/images/northwest/pleasure5.jpeg"><br><img src="/images/northwest/pleasure6.jpeg"><br><img src="/images/northwest/pleasure7.jpeg"></p>
<h3 id="嘉峪关关城"><a href="#嘉峪关关城" class="headerlink" title="嘉峪关关城"></a>嘉峪关关城</h3><p><img src="/images/northwest/pleasure8.jpeg"><br><img src="/images/northwest/pleasure9.jpeg"><br><img src="/images/northwest/pleasure10.jpeg"><br><img src="/images/northwest/pleasure11.jpeg"><br><img src="/images/northwest/pleasure12.jpeg"></p>
<h3 id="悬臂长城-amp-天下第一墩"><a href="#悬臂长城-amp-天下第一墩" class="headerlink" title="悬臂长城&amp;天下第一墩"></a>悬臂长城&amp;天下第一墩</h3><p><img src="/images/northwest/pleasure13.jpeg"><br><img src="/images/northwest/pleasure14.jpeg"><br><img src="/images/northwest/pleasure15.jpeg"><br><img src="/images/northwest/pleasure16.jpeg"></p>
<h3 id="敦煌莫高窟"><a href="#敦煌莫高窟" class="headerlink" title="敦煌莫高窟"></a>敦煌莫高窟</h3><p><img src="/images/northwest/pleasure17.jpeg"><br><img src="/images/northwest/pleasure18.jpeg"><br><img src="/images/northwest/pleasure19.jpeg"><br><img src="/images/northwest/pleasure20.jpeg"><br><img src="/images/northwest/pleasure21.jpeg"></p>
<h3 id="鸣沙山·月牙泉"><a href="#鸣沙山·月牙泉" class="headerlink" title="鸣沙山·月牙泉"></a>鸣沙山·月牙泉</h3><p><img src="/images/northwest/pleasure22.jpeg"><br><img src="/images/northwest/pleasure23.jpeg"><br><img src="/images/northwest/pleasure24.jpeg"><br><img src="/images/northwest/pleasure25.jpeg"></p>
<h3 id="茶卡盐湖"><a href="#茶卡盐湖" class="headerlink" title="茶卡盐湖"></a>茶卡盐湖</h3><p><img src="/images/northwest/pleasure26.jpeg"><br><img src="/images/northwest/pleasure27.jpeg"></p>
<h3 id="青海湖"><a href="#青海湖" class="headerlink" title="青海湖"></a>青海湖</h3><p><img src="/images/northwest/pleasure28.jpeg"><br><img src="/images/northwest/pleasure29.jpeg"><br><img src="/images/northwest/pleasure30.jpeg"></p>
<h3 id="行驶途中的一些照片"><a href="#行驶途中的一些照片" class="headerlink" title="行驶途中的一些照片"></a>行驶途中的一些照片</h3><p><img src="/images/northwest/pleasure31.jpeg"><br><img src="/images/northwest/pleasure32.jpeg"><br><img src="/images/northwest/pleasure33.jpeg"><br><img src="/images/northwest/pleasure34.jpeg"><br><img src="/images/northwest/pleasure35.jpeg"><br><img src="/images/northwest/pleasure36.jpeg"><br><img src="/images/northwest/pleasure37.jpeg"><br><img src="/images/northwest/pleasure38.jpeg"><br><img src="/images/northwest/pleasure39.jpeg"><br><img src="/images/northwest/pleasure40.jpeg"></p>
<br/>
<br/>
]]></content>
      <categories>
        <category>路上</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>黄山游记</title>
    <url>/2013/travel/huangshan-travel/</url>
    <content><![CDATA[<p>上周末去了趟黄山，两天一夜游，这次是第二次登山了，跟同事及朋友一起去的，共九人。因为周一碰到了一些其他的琐事一直没时间好好的写个旅行日志，今天就把它记录出来。只作记录，没有文笔可说。</p>
<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>首先，这次其实算是跟团游玩的，跟团游玩当然有好处也有坏处，先说说好处吧，那就是你的来回出行都不用再自己打理，自然是有汽车来回接送，不需要花太多的经历去考虑这些事（如果人多一起去的话，当然是领队较烦一些）。然后，我们这次是住山上的，所以说，在不了解山上的住宿情况下，跟团的话，他们都是会帮我们安排好，也省去了好多事，让你可以安心的爬山观光，到了时间会有导游通知你去哪入住。</p>
<span id="more"></span>

<p>既然有好处，当然坏处也有好多，游玩安排定死（当然，自己也可以自行安排，但怕脱离了群体的话，导游照顾不上，意外状况比较多），尤其是下山之后的那些安排，让人很不爽（下山之后，导游带你去一家茶叶店“免费”品茶，但这些都是我们不想的）。还有就是，玩的路线也是统一的，像莲花峰这些比较险，陡的风景区，对他们来说是绝对不会带你们去的，哪怕天气再好。</p>
<h2 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h2><p>然后再来说说费用吧，我想也是大家比较关心的问题，我们这次的费用，因为是跟团所以大体花费是这样的，跟团总共是 510（全票，如果有学生证，教师证等的，可以再退 115，黄山的门票是 230 元），这里的 510 包括了，从杭州到黄山山脚的来回车票，以及山上过夜费用，还有就是从山脚酒店到黄山门口来回接着费用等。</p>
<p>接下来是吃的，因为大家都清楚，黄山上的消费是很高的，普通的矿泉水就要 10 元一瓶，其他的东西就更别说了，所以，我们还是选择了上山前的购物准备。每个人的购买情况都不统一，但总体来说，我觉得花费在 60-100 不等吧。主要是解决在山上两顿的温饱问题。</p>
<p>这里我建议不要带太多的东西，一般要带的东西有：水跟饮料（我带了 1.2L 的水一瓶，550ml 的水一瓶，脉动一瓶），其实这里要说一下，山上的水还是很干净的，到时可以到小溪里装一瓶。泡面桶装的一份，袋装一份（其实这也没必要）。巧克力两包（补充能量），牛肉干一包，少量自己喜欢的零食，比如长鼻王，奶糖等等。尽量带些自己喜欢吃的又相对较轻的食品。</p>
<h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><p>接下来是行程，我们周一到周五要上班，所以，只能周末两天时间去了。</p>
<p>周六早上，七点左右，我们在约定好的时间等大巴来，然后出发去黄山，从杭州到黄山山脚，行程大概花费三个半小时左右。</p>
<p>到达山脚时已是中午，大巴把我们带到一家宾馆，我们一起吃了个中饭，中饭虽然是炒菜，但真的不怎么样，25 元&#x2F;人+1 元的餐具费。</p>
<p>吃完之后，导游介绍完就领着我们出发去黄山了。</p>
<p>从黄山南大门还要坐大巴走弯曲的路到达云谷寺，这才真正到了黄山的小半山腰，然后你可以选择步行上山，或者坐缆车（80 元&#x2F;人）。</p>
<p>我们一行人选择了步行上山，每个人的选择不一样，步行上山可能觉得更有意义一些吧。步行上山的话，路上的风景是不多的，就一个仙人指路可能有名些。</p>
<p>步行上山，每个人的体力不同，所花的时间也是不尽相同的，一般来说，三个小时左右差不多。但这也会让你走到崩溃。</p>
<p>行至白鹅岭，然后直接到达光明顶，我们是下午 2 点整从检票口出发，到达光明顶时已经 6 点多了（分了两波到达，一波比我们更早一些）。</p>
<p>行至半山腰的时候，突然下起了大雨，转而暴雨，全湿（这里提醒大家，不管山脚下天气如何好，我还是建议大家山下的时间备个雨披，不能带伞，山上风大，你懂的。），如果你没带雨披就惨了，你要是想买，这价格会让你大吃一惊。10-15 元不等。</p>
<p>雨过天晴，自然是彩虹出现的最佳时机，运气真不错，还看到了美丽的夕阳。</p>
<p>接着，一行人去了西海看飞来石等，但安排我们住宿的地点却是在北海，所以说，看完飞来石的时候，已经是晚上七点多，天暗下来接着彻底变黑，于是，我们用手机做电筒，从排云阁绕到西海饭店转而到北海的狮林饭店入住。差不多又花了我们近一个小时左右。其实，一行人行走中黑夜中也别有一番味道。</p>
<p>到达狮林饭店，看着很好的饭店，然后，导游带着我们，从酒店边上的石梯而下，绕着酒店一路行走到达了类似酒店地下室的与刚才酒店门口形成鲜明对比的一个小门。呵呵，没办法，穷游吧，反正只是临时将就一晚，青年旅舍算什么。到达住处之后，其实比自己想象中的要好些，一个房间总共七张床位，高中时上下铺那种，就是说可以住 14 个人，边上还有热水，电风扇，有插座可以充电等。我们到达的时候已经是 8 点多了，身上还是全湿着，也有几个人已在房间里了。我们六个人选好了床位之后，脱了鞋子袜子直接摆到风扇出口去吹。</p>
<p>大家都饿了，相继拿出自带的食物充饥，我泡了带来的泡面，加点香肠，味道真的很不错，即使大家都脱光了鞋子，空气中充满了不知名的味道。</p>
<p>其他人有累的早就躺下呼呼声传来。但我们几个还是很兴奋的一直在闲聊着，聊着各种事，天南地北，好不开心，毕竟大家能聚在一起也是一件缘分的事。</p>
<p>一直到了十二点多，才陆续去睡。因为第二天早上要三点多起床走到到光明顶看日出。我跟另外一个走到室外又小聊了一会，这时外面明月当空，无数的星星洒满在天空，这些早已是儿时的记忆。室外还撘着好多露营的帐篷，也是一道风景。</p>
<h2 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h2><p>闹铃先响，但困意仍在，过了会二哥电话打来，于是叫醒其他人，稍微打理了一下行李，直接出发，半夜的山上，还是好冷的，气温在 15 摄氏度左右。这时的天空，星星更多，月亮也更亮更圆。半夜，大家一行人开始向光明顶出发。</p>
<p>人好多，看日出的人好多，把有利的位置和地形都占满了，天都还没亮，就得早早的守候着日出。发现没了什么有利的位置，于是，只能和亮一起坐在石阶上坐等天亮。因为我也不确定今天到底能不能看到日出，或者云海。</p>
<p>天亮的其实也很快，这里就连我们坐的石阶这边也都是人，听到别人在呼喊，所有人都兴奋起来，我想大家应该是看到日出了，作为三等残废的我来说，在别人巨大的海拔面前，只能靠着那一点点弹跳，与日出来一次近距离的接触。</p>
<h2 id="下山"><a href="#下山" class="headerlink" title="下山"></a>下山</h2><p>看完日出，我们继续完成今天上午最后的黄山之旅，从光明顶下，转向迎客松方向去，走完了上次错过了的“一线天”，看完了挤满了人的迎客松景区。我们直接坐缆车下山。</p>
<p>下午两点多坐大巴回杭。到家也已经晚上 8 点左右了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>很幸运，日落夕阳，彩虹，日出都让我们看到了。这次黄山之行，不再是抬头看雾，低头走路。所以，很值。大家带着疲惫但精神饱满的身体安全回家，路途虽然经历了暴雨的袭击，成了名副其实的落汤鸡，也在路途中爬的实在走不动，但最终咬牙坚持登顶后的喜悦，都是这辈子的美好回忆。能认识你们这么一群可爱的人，真的很开心。即使是屌丝，但我们也是骄傲的屌丝。</p>
<h2 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h2><p><img src="/images/huangshan/huangshan1.jpg"><br><img src="/images/huangshan/huangshan2.jpg"><br><img src="/images/huangshan/huangshan3.jpeg"><br><img src="/images/huangshan/huangshan4.jpeg"><br><img src="/images/huangshan/huangshan5.jpeg"></p>
<br/>
<br/>
]]></content>
      <categories>
        <category>路上</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>南京之行</title>
    <url>/2012/travel/nanjing-trip/</url>
    <content><![CDATA[<p>记录此次南京之行，<br>赶火车，下雨，<br>动车晚点一个多小时，<br>无座，<br>赶不上末班车，<br>垫个报纸坐车厢门口，<br>“逃票”被抓，<br>旅途就是需要这样的折腾。</p>
<span id="more"></span>

<p><img src="/images/nanjing/nanjing1.jpeg"><br><img src="/images/nanjing/nanjing2.jpeg"><br><img src="/images/nanjing/nanjing3.jpeg"><br><img src="/images/nanjing/nanjing4.jpeg"><br><img src="/images/nanjing/nanjing5.jpeg"><br><img src="/images/nanjing/nanjing6.jpeg"><br><img src="/images/nanjing/nanjing7.jpeg"><br><img src="/images/nanjing/nanjing8.jpeg"><br><img src="/images/nanjing/nanjing9.jpeg"><br><img src="/images/nanjing/nanjing10.jpeg"><br><img src="/images/nanjing/nanjing11.jpeg"></p>
<p>总统府，中山陵，夫子庙，秦淮河，中华门，雨花台……<br>期待下一趟的远足！</p>
]]></content>
      <categories>
        <category>路上</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>三亚跟团行</title>
    <url>/2014/travel/sanya-with-mass-line/</url>
    <content><![CDATA[<p>清明前后，跟可爱的同事们去了一趟海南三亚游玩，而且回来之后，还很不幸的感冒了，一直鼻涕流个不停，才发现，自个儿的身体是那个虚呀，所以，也提醒自己并倡导大家，要多多锻炼身体呀。</p>
<p>这次三亚之旅呢，是跟团去的，玩的地方有，博鳌、西岛、玉带滩、热带植物园、椰田古寨、亚龙湾海底世界——沙滩漫步、天涯海角、兰花大世界等等。</p>
<p>当然，既然跟团了，那自己也就不用做什么功课了，跟着导游走就是了。不过，下次如果有机会再去的话，那我想我肯定是要自助游了。要不然真像有位导游说的，花钱买罪受咯。</p>
<p>玩过这些地方，当然也清楚哪些地好玩，哪些并不是很有意思。</p>
<p>像兰花大世界就真心没啥兴趣，当然，对于爱兰懂兰的朋友来说又是例外了。</p>
<p>到三亚，当然是以看海玩水为主吧，但是，记得做好防晒措施，不然，别像有些人回来之后，整个脸都肿起来了，那真是后遗症相当厉害了。</p>
<span id="more"></span>

<p>我能不说，这次是我第一次坐飞机，第一次这么近距离接触海吧，而且，我也终于想通了在海上逃难的人为什么会渴死，因为，海水真的很咸，很咸。</p>
<p>好吧，不多说了，上几张游玩照片给大家 see：</p>
<p><img src="/images/sanya/sanya1.jpg"><br><img src="/images/sanya/sanya2.jpg"><br><img src="/images/sanya/sanya3.jpg"><br><img src="/images/sanya/sanya4.jpg"><br><img src="/images/sanya/sanya5.jpg"></p>
<br/>
<br/>
]]></content>
      <categories>
        <category>路上</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>“曝光补偿” - 单反入门第八课</title>
    <url>/2012/tutorial/introduction-to-SLR-eighth/</url>
    <content><![CDATA[<p>每一部单反数码相机，都会有「曝光补偿」的设定，曝光补偿，指的是当我们完成测光，设定光圈快门之后，因应环境光线的变化，对曝光作加减的额外设定。</p>
<p>曝光补偿也是一种曝光控制方式，一般常见在 ±2-3EV 左右，如果环境光源偏暗，即可增加曝光值(如调整为+1EV、+2EV)以突显画面的清晰度。</p>
<p>数码相机在拍摄的过程中，如果按下半截快门，液晶屏上就会显示和最终效果图差不多的图片，对焦，曝光一切启动。这个时候的曝光，正是最终图片的曝光度。图片如果明显偏亮或偏暗，说明相机的自动测光准确度有较大偏差，要强制进行曝光补偿，不过有的时候，拍摄时显示的亮度与实际拍摄结果有一定出入。数码相机可以在拍摄后立即浏览画面，此时，可以更加准确地看到拍摄出来的画面的明暗程度，不会再有出入。如果拍摄结果明显偏亮或偏暗，则要重新拍摄，强制进行曝光补偿。</p>
<p>在前面，我们讨论过相机的测光系统。在一般环境下，光线比较单纯，以相机内建的程序测光，就可以拍出不错的照片了；可是在光线变化比较大的场合，相机在测光时会发生误判，这时拍出来的照片不是太亮、就是太暗。</p>
<p>甚幺样的情况会让相机的测光系统发生误判呢？我们在这里举两个最常见的例子；当拍摄画面中有很多浅色系，环境中的光线反射程度很高，除了现场原本的光线外，额外反射出来的光线，让测光系统误判此环境的光线很强，因此相机的曝光组合会比正常情况下的光线值低，拍出来的相片会偏暗。</p>
<span id="more"></span>

<p>另外一个例子是在拍摄的画面中，有很多暗色系的物体或是光线反射程度很低的环境，因为光线被这些物体吸收，让相机在测光时以为现场光线不足，而设定了比正常还高的曝光值，拍出来的照片就会偏亮了。</p>
<p>为了让拍摄者可以快速的对曝光量作调整，而不需要重新去设定光圈快门，于是就设计了「曝光补偿」这样的机能，只要简单的选择要「增加」或是「减少」曝光量就可以了。</p>
<p>数码相机的曝光补偿功能，都是以 EV（也就是我们在前面谈到的一级、一格的单位）作为单位，调整的格数有分为 1&#x2F;2 级跟 1&#x2F;3 级两种，目前大部分的数字单眼相机都有正负 2EV 的曝光补偿能力。</p>
<p>上面有提到让相机误判的状况，但是要设定多少的曝光补偿，才可以将曝光值调整回来呢？其实不同的环境就会有不同的曝光补偿，并没有一定的数值，在很多时候都必须靠我们的经验来判断。所以初学者在遇到复杂光源的环境时，可以利用相机的「包围曝光」功能，多拍几张不同的曝光组合，顺便学习判断要如何作曝光补偿。</p>
<p>让我们来看看下面的图例：</p>
<p><img src="/images/slr/SLR_eighth1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">我们出国常会拍的雪景，使用相机曝光的原始设定，拍出来的图明显偏暗</p></p>
<p><img src="/images/slr/SLR_eighth2.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">使用曝光补偿+1.5EV，雪的白色就显现出来了</p></p>
<p><img src="/images/slr/SLR_eighth3.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">这张照片黑色占据了画面的大部分，拍摄出来的感觉明显偏亮了</p></p>
<p><img src="/images/slr/SLR_eighth4.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">使用曝光補償-0.7EV，畫面的亮度看起來就自然多了。</p></p>
<p>为了获得更正确的曝光，除了利用曝光补偿来弥补相机程序测光的缺失外，还可以使用点测光的方式来测光。下一课，我们将为大家来介绍基本的点测光，教授如何在一个复杂的光源下，得到正确的曝光组合。</p>
<p>拍摄环境比较昏暗，需要增加亮度，而闪光灯无法起作用时，可对曝光进行补偿，适当增加曝光量。进行曝光补偿的时候，如果照片过暗，要增加 EV 值，EV 值每增加 1.0，相当于摄入的光线量增加一倍，如果照片过亮，要减小 EV 值，EV 值每减小 1.0，相当于摄入的光线量减小一倍。按照不同相机的补偿间隔可以以 1&#x2F;2（0.5）或 1&#x2F;3（0.3）的单位来调节。</p>
<p>被拍摄的白色物体在照片里看起来是灰色或不够白的时候，要增加曝光量，简单的说就是―越白越加‖，这似乎与曝光的基本原则和习惯是背道而驰的，其实不然，这是因为相机的测光往往以中心的主体为偏重，白色的主体会让相机误以为很环境很明亮，因而曝光不足，这也是多数初学者易犯的通病。</p>
<p>以下面两幅图片为例，上面的是曝光补偿等于 0 时候所拍的，而后者是等于+1 时所拍的，可见区别明显。</p>
<p><img src="/images/slr/SLR_eighth5.jpg"></p>
<p><img src="/images/slr/SLR_eighth6.jpg"></p>
<p>由于相机的快门时间或光圈大小是有限的，因此并非总是能达到 2EV 的调整范围，因此曝光补偿也不是万能的，在过于暗的环境下仍然可能曝光不足，此时要考虑配合闪光灯或增加相机的 ISO 感光灵敏度来提高画面亮度。</p>
<p>几乎所有的数码相机的曝光补偿范围都是一样的，可以在正负 2EV 内加、减，但是加减并不是连续的，而是以 1&#x2F;2EV 或者 1&#x2F;3EV 为间隔跳跃式的。早期的老式数码相机比如柯达的 DC215 就是以 1&#x2F;2EV 为间隔的，于是有-2.0、-1.5、-1、-0.5 和+0.5、+1、+1.5、+2 共 8 个档次，而目前主流的数码相机分档要更细一些，是以 1&#x2F;3EV 为间隔的，于是就有-2.0、-1.7、-1、-1.0、-0.7、-0.3 和+0.3、+0.7、+1.0、+1.3、+1.7、+2.0 等共 12 个级别的补偿值。</p>
<p>一般的说，景物亮度对比越小，曝光越准确，反之则偏差加大。相机的档次有高有低，档次高的，测光就比较准确，低的则偏差也会加大。如果是传统相机，胶卷的宽容度是比较大的，曝光的偏差在一定范围内不会有大问题，但是数码相机的 CCD 宽容度就比较小，轻微的曝光偏差都可能影响整体的效果。</p>
<p>总而言之，曝光补偿的调节是经验加上对颜色的敏锐度所决定的，用户一定要多比较不同曝光补偿下的图片质量，清晰度、还原度和噪点的大小，才能拍出最好的图片。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“基本构图” - 单反入门第十一课</title>
    <url>/2012/tutorial/introduction-to-SLR-eleventh/</url>
    <content><![CDATA[<p>前面我们讲了很多关于在摄影技术面的学习应用，现在让我们先撇开那些硬梆梆的东西，一起来聊一聊基本构图，来看看在拍照时，我们怎么样可以用观景窗的那四条线来框住一张美丽的图像。</p>
<p>每每说道摄影作品，总离不开谈及构图，构图有这么重要吗?好的构图怎么就看的那么舒服呢?构图有没有诀窍呢?构图会不会捆住我们的手脚，使我们变得教条呢?图片一出等等构图问题就不断地萦绕着我们，我们怎样看待自己作品中的构图缺陷，怎样练就在拍摄时留心布置画面疏密间架，其实，了解构图的意义在于建立正确的审美观，了解美的奥秘，才能获取美，才能更好地欣赏美。那究竟是什么东西困扰着我们的视觉，使我们有这么多的困惑。</p>
<p>谈到构图，我们要先了解下 DSLR 拍下来的图形，大约是接近 4:3 这样的长宽比，也就是说拍出来是一张长方形的照片。如果在后制时我们不去作裁切的动作，那最基本的构图就会有两种形式：直式构图、以及横式构图。</p>
<p>依据被摄物的特性，我们可以决定要利用直式或是横式来表现，举例来说，我们现在要拍摄一个站立的人物，那么直式构图就最合适了，因为它跟人体的比例接近，我们可以将人拍的满满的，表现在整个画面，而不会有太多的留白出现。</p>
<p><img src="/images/slr/SLR_eleventh1.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">直式构图用来拍摄一个完整的人物体态是最方便的了</p></p>
<span id="more"></span>

<p>横式构图就很合适在拍摄水平线上延伸的被摄物，例如在拍摄风景时，横式构图常常被拿来使用。另外或者是我们要拍一群人物，横式构图也相当合适，因为它可以在一个画面中，同时置入最多的被摄体。</p>
<p><img src="/images/slr/SLR_eleventh2.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">横式构图非常适合拿来拍摄风景</p><br><img src="/images/slr/SLR_eleventh3.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">两个人以上的人物照也很适合用横式来构图</p></p>
<p>所以一开始在拍照时，最先考虑构图的方式，就是「直式构图」跟「横式构图」这两种，而我们也根据被摄物的特性，来决定构图的方式。</p>
<p>拍照构图最难处理的，是拍摄物主体之外的杂物，例如说我们要拍美少女，但是在美少女入镜之后，她身后身旁杂七杂八的背景和人物，要如何安排进入画面中，或是将它们摒除在画面之外，这是很需要功夫的能力。所以初学者刚开始在学习构图时，不妨把「被摄体拍的大大的」，将个画面给塞满，这样就不用太去考虑如何安排背景的问题。</p>
<p><img src="/images/slr/SLR_eleventh4.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">把脸拍的大大的</p></p>
<p>初学者可以从直式构图跟横式构图的应用，以及「被摄体拍的大大的」下手，先将这个要点学习之后，然后来进行下面这个构图法则—-「井字构图法」。</p>
<p>所谓的井字构图法，就是将画面的长、宽均分成三等分，然后用四条线将画面格成九宫格，而在画面上线条交会的四个点跟四条线，就是我们放置被摄物重心的焦点。</p>
<p><img src="/images/slr/SLR_eleventh5.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">井字构图范例一</p><br><img src="/images/slr/SLR_eleventh6.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">井字构图范例二</p></p>
<p>一般在构图时，我们都会直觉的将画面的视觉重心摆在正中央，不管是在水平或是垂直线的中心点上，因为这样的图是一种最安全也最稳固的构图方式。视觉重心在中央的画面，让人看了会有安定感，所以一般人在构图时都会不自觉的习惯将重心摆在正中央。</p>
<p><img src="/images/slr/SLR_eleventh7.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">中央式的构图法最安全也最稳定</p></p>
<p>中央重心的构图虽然安全，但却容易流入死板，所以我们可以依循「井字构图法」的四个焦点来移动重心，将被摄物稍微的偏移，让画面产生不平均的留白，这样可以让整个感觉更活泼，也比较有动感、和更多想象的空间。</p>
<p>井字构图的运用范围非常的广泛，举从人像、风景、微距、运动、街头等各式的摄影内容都可以使用，这个原理主要来自中国早期的构图方式，有趣的是它跟西方的「黄金分割」有很接近的关系。黄金分割的比例是 1:0.618，大约就是井字分割中的 2&#x2F;3：1&#x2F;3 左右。黄金分割的原理、解释跟延伸应用是一门很大的课程，有兴趣的同学不妨在网络上利用 Google 来搜寻，可以找出一堆很有趣的内容出来。</p>
<p>构图的目的，就是将拍摄主题凸显在画面之上，让观看者可以清楚地接触到拍摄者所要表达的事物。在第一课的基本构图里，我们曾提到一些简单的构图方法，而这一课，要跟大家一起讨论的，是如何在完成构图之后，利用拍摄环境中的各项要素，来凸显画面中的主题。</p>
<h3 id="明暗的对比"><a href="#明暗的对比" class="headerlink" title="明暗的对比"></a>明暗的对比</h3><p>利用强烈的对比，可以明显地突出我们想要表达的地方。大部分的作法是将不需要被注意到的地方极暗化，让主题集中在明亮的部份，成为视觉焦点。</p>
<p><img src="/images/slr/SLR_eleventh8.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">利用明暗对比来凸显主题</p></p>
<h3 id="清晰度的对比"><a href="#清晰度的对比" class="headerlink" title="清晰度的对比"></a>清晰度的对比</h3><p>在同一个画面中，清晰的物体总是比模糊的物体来得抢眼，所以我们可以利用这个特性，来突显要表达的主题，将不需要的地方模糊化。<br>要将主题外的景物模糊化，可以用大光圈的镜头来拍摄，利用浅景深的特性将对焦点放在摄影主体上，就可以达到清晰度对比的效果了。</p>
<p><img src="/images/slr/SLR_eleventh9.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">使用浅景深淡化背景</p></p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>现在大多数人拍摄的照片都是以彩色为主，颜色自然成为画面中很重要的元素。利用颜色本身的对比、彩度跟明暗，也可以很容易地帮我们强调出画面的主题。</p>
<p><img src="/images/slr/SLR_eleventh10.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">抢眼的颜色很容易变成视觉中的主角</p></p>
<h3 id="和谐、降低画面上的任何冲突性"><a href="#和谐、降低画面上的任何冲突性" class="headerlink" title="和谐、降低画面上的任何冲突性"></a>和谐、降低画面上的任何冲突性</h3><p>有时我们的主题是整个画面，一般在风景照中常会出现这样的情况，因为拍摄的主题往往是整个画面。为了能让观看者平均的聚焦在画面上的每一个元素，我们就利用和谐及降低元素之间冲突性的方式，来平均画面的整个重心。<br>画面中每个元素之间的平衡是构图时要注意的地方，减少太强烈的颜色、明暗对比、元素的差异等；稳定的线条和构图可以帮助摄影者来达成这个目标。</p>
<p><img src="/images/slr/SLR_eleventh11.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">均一而不突出的整体色调，可以平衡画面的整体性</p></p>
<h3 id="差异性"><a href="#差异性" class="headerlink" title="差异性"></a>差异性</h3><p>当画面的主题跟主题外的东西有很大的不同时，这种差异性也可以帮助我们来凸显主题。一般来说，在一群类似或相同的元素中出现一个完全不同的东西，一定会成为画面中的焦点，而且会有很强的凸显能力。<br><br/></p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“景深” - 单反入门第五课</title>
    <url>/2012/tutorial/introduction-to-SLR-fifth/</url>
    <content><![CDATA[<p>除了曝光和测光的复杂方面之外，摄影爱好者通常会发现景深是最难掌握的一个概念。这是不难理解的，因为这是一个基于主观判断的假设的系数。通俗地说，景深就是在所调焦点前后延伸出来的”可接受的清晰区域”。实际上，在任何照片上只有聚焦了的平面才是真正清晰。</p>
<p>除了曝光和测光的复杂方面之外，摄影爱好者通常会发现景深是最难掌握的一个概念。这是不难理解的，因为这是一个基于主观判断的假设的系数。通俗地说，景深就是在所调焦点前后延伸出来的”可接受的清晰区域”。实际上，在任何照片上只有聚焦了的平面才是真正清晰的。然而，在观赏者看来，这一平面前后的物体也可能会显得相当清晰。教科书在解释景深时往往要讨论”最小弥散圈”，但那是一个对于实际应用并非必要的技术问题。</p>
<p>例如：你在天然动物园将镜头焦点调在阴影处孟加拉虎的眼睛上，在底片上它的眼睛就是最清晰的。而这时老虎的嘴，还有其身后的树皮，在最终的照片上也显出可以接受的清晰影像。当你的视线从调焦点眼睛移开时，模糊的程度就逐渐加大。在近处前景和远处背景上的物体离虎头越远清晰度就越差。</p>
<p>景深可能很长，也可能很短、很浅，我们可以根据需求调整摄影的模式来控制景深的长短。</p>
<span id="more"></span>

<p>一般会影响到景深长短的原因，有下面三种：</p>
<ul>
<li><p>光圈越大、景深越浅，光圈越小、景深越长</p>
<blockquote>
<p>在拍摄距离不变的拍摄情况下，使用大光圈来拍摄时，因为景深变浅，被摄体的前后景物会变得比较模糊。而使用小光圈时，被摄体前后景物清晰的距离就会变长。</p>
</blockquote>
</li>
<li><p>镜头的焦距越长、景深越浅，镜头的焦距越短、景深越长</p>
<blockquote>
<p>在光圈、快门都不变时，拍摄同一个场景，使用长镜头会让景深变浅。而使用广角镜时，景深就会变长。</p>
</blockquote>
</li>
<li><p>距离拍摄体越近时、景深越浅，距离拍摄体越远时、景深越长</p>
<blockquote>
<p>在光圈、快门、镜头焦距都不变的情况下，拍摄同一场景，离被摄体越近时，景深就会越浅。离被摄体越远时，景深就会越长。</p>
</blockquote>
</li>
</ul>
<p>由上面三点我们可以发现景深的长短，主要是由光圈、镜头焦距及拍摄距离来控制的，因此在需要控制景深的拍摄场合中，我们就可以调整这些要素来拍出合适的照片。</p>
<p>在早期的镜头环上面都有景深的速查表，可以从上面读出景深的范围和长度，但是现在的自动对焦镜头大都舍去了这个设计，要不就是在镜头上附个非常简陋的景深表，实用功能不大。</p>
<p>对于业余拍摄者来说，会去读景深表的人其实是相当少的，大多数人都用经验法则去判断景深长度；另一个方法是利用相机的「景深预视」功能，按下景深预视钮后，从观景窗判断景深长短，这是最快也最直接的方法。不过它的缺点是当使用小光圈拍摄时，因为进光量变小，而使得按下景深预视钮后，从观景窗看出去会变得比较暗。</p>
<p>就一般的拍摄情况来说，在拍摄风景的场合，我们常利用长景深来表现整个清晰的场景，所以使用缩光圈的方式来拍摄。但因为光圈缩小进光量也跟着变小，使得快门速度变低，就需要使用脚架来稳定机身，这也是风景摄影常会用到脚架的原因之一。</p>
<p>当我们在拍摄人像时，会利用浅景深的方式来模糊被摄体前后的景物，藉以凸显主题的强度，同样的拍摄手法也可以用在其它的场合上。要凸显主题，浅景深是一个很方便的手法，所以一般在购买器材时，会依据需求选购一两支大光圈的镜头，除了能在低光度下拍摄外，能灵活运用浅景深也是一个重要原因。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“器材准备” - 单反入门第一课</title>
    <url>/2012/tutorial/introduction-to-SLR-first/</url>
    <content><![CDATA[<h2 id="选购机身"><a href="#选购机身" class="headerlink" title="选购机身"></a>选购机身</h2><p>首先，我们要选定一部适合自己使用的数码单反机身，在入门到中阶的产品都是我们可以考虑的对象，依目前的行情来说，大约落在两、三万到四、五万元的这个价格带，价格越高的的产品功能性就越强、同时机身结构相对的也比较坚固、有质感。</p>
<p>选购机身，通常最直接要考虑到的是镜头的搭配。这一等级的 DSLR 都是使用 APS 尺寸的感光原件（除了 Olympus 使用的是另一种四分之三的系统），所以我们购买的镜头焦距都要在乘上 1.5 ～ 1.6 后，才是真正的数值。</p>
<p>对于喜欢作望远摄影的玩家来说，这是一个相当好的优势，因为平白的多出了 0.5 倍的焦距来运用。但是对于喜爱广角摄影的人就头痛了。举例来说，在传统时代我们最常用的 28mm 广角镜，用到 DSLR 上面时，就会变成了 28×1.5 &#x3D; 37mm，而传统最常用的广角变焦镜 17<del>35mm 就会变成（17</del>35）×1.5&#x3D;25~52mm，平白的损失了不少在超广角的焦段，所以在选择厂牌时，要注意一下原厂的镜头支持情形，是否合乎你的拍照需求。</p>
<p>最后我们要来注意一下自己对机身像素的需求，目前中阶机种已经做到了 800 万像素，一般也有 600 万像素的实力，这对输出到 A4 以上的尺寸已经是绰绰有余了。很多刚入门的人常常会有高像素的迷思，但其实如果不是专业输出的需求，600 万像素对我们来说已经相当够用了，实在不必去为了要考虑输出多大的图、而去为像素作斤斤计较的功夫。</p>
<h2 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h2><p>镜头跟机身是绝对息息相关的，每一家厂牌的镜头都有他自己的特色，像是 Canon 的 USM 超音波技术，是习惯快拍人的最佳利器，Nikon 的调子也是许多老摄影人所津津乐道的，Pentax、Minolta、Olympus 也都各有其特殊的色调，我们在选购机身时，别忘了自己喜欢哪一家厂牌的镜头特色。</p>
<p>除了原厂本身所出的平价镜头之外，我们还可以选购由第三厂商推出的副厂镜头，比较知名像是 Tokina、Sigma、Tarnom 等，他们的镜头保有低价的优势，在技术规格上也不会跟原厂相去太远，初入门 DSLR 的同学如果预算有限，不妨就以副厂镜头开始下手。</p>
<p>通常对于初学者来说，18~70mm 这个范围的变焦镜是一个相当好用的焦段，转换成 DSLR 变成 27-105mm，这个焦段涵盖了广角及中望远的部分，已经可以应付一开始大部分的拍摄情况了。</p>
<p>大光圈的镜头的散景相当迷人，对初学者来说更是一个很难抵抗的魅力。但是大光圈的变焦镜一只动辄四、五万，如果预算有限又想享受大光圈，那么副厂镜头是可以考虑的选择，像 Sigma 就有 18-50mm F2.8 EX DC 这样的焦段设计。</p>
<span id="more"></span>

<h2 id="储存媒体"><a href="#储存媒体" class="headerlink" title="储存媒体"></a>储存媒体</h2><p>传统相机使用底片来记录影像，数码相机使用的则是记忆卡。目前依厂牌的不同，大家使用的记忆卡规格也都会有一点差异，不过共通的就是几乎所有的 DSLR 都会支持 CF 这个规格的记忆卡。</p>
<p>CF 卡的缺点是体积大，但是它拥有价格低、容量大以及速度快的优势。我们建议新手一开始就买一块 1G 容量的 CF 卡来使用，尤其是最近新款的 DSLR 动辄就到 800 万像素的分辨率，1G 的大小会是蛮合适的选择。</p>
<p>目前制造记忆卡的厂商很多，大品牌及终身保固是必须要去考虑的一个因素。最后在选购一个 USB 2.0 传输接口的卡片阅读机，在跟计算机作档案传输时会比较便利。</p>
<h2 id="滤镜"><a href="#滤镜" class="headerlink" title="滤镜"></a>滤镜</h2><p>当我们可以利用计算机强大的后制功能来做出各种效果后，滤镜在摄影中的角色就变得不是那幺的重要，以前需要滤镜做出来的一些效果，现在大多数都已经可以用计算机来后制完成。</p>
<p>对于专门使用 DSLR 的摄影者来说，我们建议只要购买下面介绍的滤镜就好。</p>
<h2 id="偏光镜"><a href="#偏光镜" class="headerlink" title="偏光镜"></a>偏光镜</h2><p>不管有多强大的后制能力，也比不上一张原本就拍的清澈干净的图。偏光镜可以帮助我们避掉不当的光线折射，并且有纯化拍摄物颜色的效果，是一定要准备的滤镜之一。</p>
<p>现在 DSLR 所使用的偏光镜都属于环形偏光镜（CPL），要注意不要买了早期设计形式的线性偏光镜（LPL）。在选购给广角镜头用的偏光镜时，要注意镜片的厚度，不要因为过厚而拍出了四周有暗角的照片。一般来说大厂都会为超广角镜头推出超薄型的偏光镜，不过价格较高，常用广角镜头的人这笔预算是不可以省的。</p>
<h2 id="ND-镜"><a href="#ND-镜" class="headerlink" title="ND 镜"></a>ND 镜</h2><p>ND 镜是减光镜，用来在光线过强、或是环境光不允许使用大光圈拍摄时的情况使用，不管是拍摄风景、生态或是人像都有机会用到 ND 镜。</p>
<p>ND 镜的形式有很多种，它提供各种不同的减光系数让我们依拍摄环境不同来搭配。有的 ND 镜也会设计成渐层减光的形式，非常适合在晨昏摄影的状况使用。</p>
<h2 id="保护镜"><a href="#保护镜" class="headerlink" title="保护镜"></a>保护镜</h2><p>一般来说，我们都会另外在每颗镜头前面另外加上保护镜，除了有保护镜头前端镜片的功用外，还可以在拍摄时滤除紫外线（保护镜需有 UV 防护功能），提高拍摄画面的清澈度。</p>
<p>目前市面上滤镜的厂牌主要以德系、日系两个国家为主，一般来说像是 B+W 这种德系厂牌的产品，不管是功能或是制作品质都有相当好的成绩，唯一的缺点就是价格较高。</p>
<p>最近日系品牌的品质也有了一定的水准，加上各项规格齐全、价格也平易近人，对预算不丰厚的的人来说，日系品牌是一个值得投资选择。</p>
<h2 id="脚架"><a href="#脚架" class="headerlink" title="脚架"></a>脚架</h2><p>脚架是一定要准备的周边器材，它可以在长时间曝光的状况下稳定机身，帮助我们拍出清楚的照片。对于喜好风景摄影的人来说，准备一支稳固的脚架，跟准备一台适合使用相机是同样重要的事。</p>
<p>脚架有三脚架跟单脚架两种，绝大多数的状况我们都是使用三脚架来拍摄，如果你常需要机动性高的情况中稳定机身，那幺就可以考虑选择购买单脚架来使用。</p>
<p>以碳纤维制作的脚架重量都很轻，对于需要登山涉水、或是四处奔波的摄影者来说，可以购买碳纤脚架来减低装备的重量，不过炭纤维制作的脚架价格不低，我们可以衡量自己的需要作选择。</p>
<p>通常购买脚架的预算从三四千元起跳一直到数万元，初学者常会因为贪便宜去买廉价的脚架，但这种脚架通常都不符合比较进阶的需求。所以我们建议在采购摄影器材时，尽量还是不要省掉购买这笔预算比较好。</p>
<h2 id="快门线"><a href="#快门线" class="headerlink" title="快门线"></a>快门线</h2><p>快门线主要的功用是要减少在拍摄时，因为按触快门钮而产生机身震动，通常快门线通常搭配着脚架一起使用，为的就是球拍出一张清晰而稳定的照片。</p>
<p>自从单反相机电子化以后，传统的快门线几乎就被淘汰了，取而代之的是各式不同接头的电子快门线。这些新形式的快门线有着丰富的功能，像是定时激活、间隔重复曝光拍摄、LCD 显示屏等。</p>
<p>对于喜欢拍夜景的人来说，建议购买功能比较丰富一点的快门线，在这方面需求比较少的人可以选购简单的设计。现在的电子快门线每一家厂商的接头设计都不同，价格也比传统快门线高出许多。</p>
<h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><p>既然身处数码时代，使用的又是数码相机，最好是要准备一部计算机了。</p>
<p>对于一般的影像处理来说，CPU 为 Pentum 4 以上等级的计算机就蛮好用的了，内存至少要把它加到 512MB，这样跑图才会比较顺畅一些。</p>
<p>屏幕的部分买个大厂牌的 LCD 来用，暂时先不要去考虑屏幕校色的问题，这是一门很大的学问，初学者倒是先把基础摄影先学好比较重要。</p>
<p>输出的部分我们倒是不建议买太好的打印机，因为现在打印机印得再好、也不会比你拿到相馆直接作数码输出来的棒。自己输出在纸张及墨水上的支出也不便宜。</p>
<p>影像处理软件这儿推荐两个–Adobe 的 Photoshop、及 Ulead 的 PhotoImpact，这两套软件都是目前最热门的，同时也有中文版本，市面上有不少的工具书作教学介绍，大家可以选择自己喜欢的来使用。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“曝光” - 单反入门第四课</title>
    <url>/2012/tutorial/introduction-to-SLR-fourth/</url>
    <content><![CDATA[<p>曝光英文名称为 Exposure，曝光模式即计算机采用自然光源的模式，通常分为多种，包括：快门优先、光圈优先、手动曝光、AE 锁等模式。照片的好坏与曝光量有关，也就是说应该通多少的光线使 CCD 能够得到清晰的图像。曝光量与通光时间（快门速度决定），通光面积（光圈大小决定）有关。</p>
<p>我们如果想要得到一张色彩漂亮、明暗分明的影像，就要让感光体（传统时代的感光体为胶卷，DSLR 时代则为 CCD 或 CMOS 感光原件）得到适当的曝光。而所谓的曝光，就是在一定的时间内，让感光体受到一定光量的投射。</p>
<h2 id="曝光的计算方式为："><a href="#曝光的计算方式为：" class="headerlink" title="曝光的计算方式为："></a>曝光的计算方式为：</h2><blockquote>
<p>曝光 &#x3D; 光量（光圈容许进入的光线强度）X 时间（快门允许进入的时间长短）</p>
</blockquote>
<p>也就是说，一个完整的曝光程序，是由光圈的大小以及快门的时间搭配组合而成的。</p>
<span id="more"></span>

<p>所谓的标准曝光值，以现在的测光表设计，都是把整个画面曝光量平均到中间灰，也就是 18％的灰值。中间灰的辉度（反射光线的强度）接近人类的肤色或是天空的蓝，我们可以藉由观察「灰卡」，来知道中间灰它大概的表现。</p>
<p>一般来说，现在我们要得到一个正确的曝光，通常都是藉由相机内建的测光表来帮我们计算合适的光圈快门组合。测光表藉由不同的测光方式，将所测得的现场光平均成中间灰，然后调配光圈快门来达到正确曝光的目的。</p>
<p><img src="/images/slr/SLR_fourth1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">依左至右分别为平均测光、中央重点测光、点测光</p></p>
<p>为了得到正确的曝光量，就需要正确的快门与光圈的组合。快门快时，光圈就要大些；快门慢时，光圈就要小些。快门优先是指由机器自动测光系统计算出暴光量的值，然后根据你选定的快门速度自动决定用多大的光圈。光圈优先是指由机器自动测光系统计算出暴光量的值，然后根据你选定的光圈大小自动决定用多少的快门。拍摄的时候，用户应该结合实际环境把使曝光与快门两者调节平衡，相得益彰。</p>
<p>光圈和快门的组合就形成了曝光量，在曝光量一定的情况下，这个组合不是惟一的。例如当前测出正常的曝光组合为 F5.6、1&#x2F;30 秒，如果将光圈增大一级也就是 F4，那么此时的快门值将变为 1&#x2F;60，这样的组合同样也能达到正常的曝光量。不同的组合虽然可以达到相同的曝光量，但是所拍摄出来的图片效果是不相同的。</p>
<h2 id="在-DSLR-中内建的测光表，一般都具有下列的测光方式："><a href="#在-DSLR-中内建的测光表，一般都具有下列的测光方式：" class="headerlink" title="在 DSLR 中内建的测光表，一般都具有下列的测光方式："></a>在 DSLR 中内建的测光表，一般都具有下列的测光方式：</h2><h4 id="平均测光"><a href="#平均测光" class="headerlink" title="平均测光"></a>平均测光</h4><p>平均测光将整个画面的现场光作平均计算，然后求得中间灰值。</p>
<h4 id="中央重点测光"><a href="#中央重点测光" class="headerlink" title="中央重点测光"></a>中央重点测光</h4><p>中央重点测光以画面中央为主要加权部分，然后佐以四周的现场光，再计算出中间灰值。</p>
<h4 id="点测光"><a href="#点测光" class="headerlink" title="点测光"></a>点测光</h4><p>点测光只截取画面中央约 3％～ 5％的范围作计算，求该点的中间灰值，这对复杂环境光的拍摄相当方便。</p>
<h4 id="分区测光"><a href="#分区测光" class="headerlink" title="分区测光"></a>分区测光</h4><p>每一家像机厂商都会研发出自己独特的分区测光方式，来因应各种不同现场光的曝光计算，例如 CANON 的 21 区分区测光、或是 NIKON 的 3D 矩阵测光。这些测光程序会依据环境的不同作变化计算，求出最适合的曝光量。</p>
<p><img src="/images/slr/SLR_fourth1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">CANON 的 21 区分区测光（图片来源为日本 CANON 网站）</p></p>
<p>在前面我们已经为大家上过了光圈与快门，里面提到光圈每一个号数的差距、跟快门每一个段数的差距，都是称为一级、一格或是一档。不管是光圈或是快门，每一级之间相差的曝光量都是相同的，也就是说：</p>
<p>F4 跟 F5.6 相差了一级、1&#x2F;15s 跟 1&#x2F;30s 相差了一级，这两种情况相差的光量是一样的。</p>
<p>F5.6 跟 F11 相差了两级、1&#x2F;60s 跟 1&#x2F;250s 相差了两级，这两种情况相差的光量也是一样的。</p>
<p>这样来看，在一个曝光组合决定好之后，还是可以增减光圈跟快门的段数作变化，而不会影响到最后的曝光值，我们来看看下面的例子：</p>
<p>假设我们现在测出来一个曝光组合是 F5.6、1&#x2F;250s，但是为了要用大光圈拍人像来获得浅景深，我们可以把它更改成 F2.8、1&#x2F;1000s。</p>
<p>其中，因为光圈向上前进了两级（F5.6 &gt; F4 &gt; F2.8），所以相对的快门要向后退两级（1&#x2F;250s &lt; 1&#x2F;500s &lt; 1&#x2F;1000s）。这两个组合的曝光量其实是相同的，经由这样的计算调整，最后我们可以得到大光圈的拍摄方式、又不会影响到最后的曝光值。</p>
<blockquote>
<p>手动曝光模式</p>
</blockquote>
<p>手控曝光模式每次拍摄时都需手动完成光圈和快门速度的调节，这样的好处是方便摄影师在制造不同的图片效果。如需要运动轨迹的图片，可以加长曝光时间，把快门加快，曝光增大；如需要制造暗淡的效果，快门要加快，曝光要减少。虽然这样的自主性很高，但是很不方便，对于抓拍瞬息即逝的景象，时间更不允许。</p>
<blockquote>
<p>AE 模式</p>
</blockquote>
<p>AE 全称为 Auto Exposure，即自动曝光。模式大约可分为光圈优先 AE 式，快门速度优先 AE 式，程式 AE 式，闪光 AE 式和深度优先 AE 式。光圈优先 AE 式是由拍摄者人为选择拍摄时的光圈大小，由相机根据景物亮度、CCD 感光度以及人为选择的光圈等信息自动选择合适曝光所要求的快门时间的自动曝光模式，也即光圈手动、快门时间自动的曝光方式。这种曝光方式主要用在需优先考虑景深的拍摄场合，如拍摄风景、肖像或微距摄影等。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“点测光” - 单反入门第九课</title>
    <url>/2012/tutorial/introduction-to-SLR-ninth/</url>
    <content><![CDATA[<p>我们在遇到复杂光源的拍摄环境时，当然不能只用经验法则跟曝光补偿，来作一个合适的曝光组合。在这一课，我们要教大家利用点测光，来作更精准的曝光判断。</p>
<p>点测光是一种十分精确的测光模式，它的测光大约只测画面中之 2%～ 3%的面积，不考虑周边环境亮度，因此可确保摄影者完全按照自己选择的某个具代表性的―点‖来测光曝光，所以能满足严格的曝光要求。点测光模式只是测定画面中心一个很小范围的亮度，并以这个测光值作为曝光的唯一依据，当然，许多情况下是用这个很小范围测试并非位于画面中心的被摄物亮度。在拍摄明暗反差强烈、并且明暗面积很不均衡的被摄物时，摄影者可以用画面中心这样一个很小的范围对被摄主体或其它部位上某处亮度进行测定，而不受大面积强光背景或阴暗背景的影响。点测光在风光和人物摄影中都是一个非常实用的功能，它能让摄影者在复杂的光线场景中进行准确的曝光。</p>
<p>虽然说点测光是一个好用的工具，但并不是每一台 DSLR 中都内建了点测光，有的入门级相机只有中央重点测光的功能，这时，我们可以使用额外的测光表，或是利用长距离镜头来缩小测光的范围。</p>
<span id="more"></span>

<p><img src="/images/slr/SLR_ninth1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">用长镜头拉近要测光的范围，再用中央重点测光来弥补没有点测光的遗憾</p></p>
<p><img src="/images/slr/SLR_ninth2.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">在光源复杂的环境，选择肤色中间调的地方来测光</p></p>
<p>如同上面的范例照片，在这个光影复杂的拍摄环境里面，我们要如何作测光呢？完全交给相机处理？那幺拍出来可能就不是原先要的调子；作曝光补偿？那要如何判断甚幺时候加、甚幺时候减呢？</p>
<p>这时点测光就相当的好用了。前面，我们提到曝光是以 18%的灰作为标准值，所有的曝光系统，到最后都是以这个标准来计算。而 18%的灰与人的皮肤辉度接近，所以在上面这个图例，我们只要选择模特儿的肤色中，接近一般光线强度下的地方就可以了（图中用红色圆圈标起来的地方）。</p>
<p>决定了肤色的中间调完成曝光组合之后，接下来就可以利用曝光补偿来决定画面的调性。</p>
<p>当我们需要明亮一点的画面时，就使用正向的曝光补偿；而当我们需要低沉的画面感觉时，就使用负向的曝光补偿来完成。</p>
<p><img src="/images/slr/SLR_ninth3.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">利用正向的曝光补偿，来营造照片明亮的调子</p></p>
<p>上面的例子是以人像为主，一般来说，要在肤色中找学中间调并不困难，但是当拍摄的主题跟人物无关时，我们要怎幺样来决定画面的中间调呢？在这里我们提供两种方法来让大家参考：</p>
<ul>
<li>寻找画面中接近 18%灰的区块</li>
</ul>
<p>当拍摄经验逐渐累积之后，我们就很容易的在一个画面中找出接近 18%灰调的地方，它可能是蓝天、可能是大太阳下的柏油路面、可能是青绿的草丛、也可能是没有粉刷过的墙面。</p>
<p>经验可以帮助我们确认作点测光的地方，多多的拍摄，然后观察结果来修正自己的判断。</p>
<ul>
<li>使用灰卡或是手心来测光</li>
</ul>
<p>或许我们在判断中间调的经验不足、或是环境缊乱，那幺这时可以直接使用灰卡置于环境光源下，直接对着它来测光。</p>
<p>如果没有灰卡可以使用，可以用自己的手心来取代，使用相机来对着手心测光。前面提到人的肤色接近 18%的灰调，所以自己的手其实就是一张很好用的灰卡。不过要记得别用了被太阳晒的很黑的手背，那可是会去影响你的测光结果喔。</p>
<p>同样的，在我们得到曝光组合之后，再利用曝光补偿来决定画面的调性。一般来说，大部分要做到控制比较精准的曝光时，点测光会比相机内建的程序测光来的好控制。所以对 DSLR 的新手来说，点测光的使用其实是蛮重要的一门功夫。</p>
<p>我们一般所说的―点测光‖是一个适合要求较高的专业摄影人士需求而设计的模式，主要为了对付特殊拍摄条件下的测光需要。该模式在测光和拍摄时，测光系统只测量取景范围中 3%的面积，完全不考虑周围其他背景的曝光需要，因此有经验的摄影者利用它能预测到最后照片的实际影调效果。</p>
<p>要用好―点测光‖模式，有一个重要前提，就是摄影者得知道被摄对象中什么位置是适合选为―点‖而且作为测光标准。</p>
<p><img src="/images/slr/SLR_ninth4.jpg"></p>
<p>点测光设计的主要特点是其窄角度测光范围，能确保测算画面中主要表现对象所需曝光量，能满足特定环境下的测光需要。比如说在主体与背景反差亮度特别大的对象，如舞台摄影中常常有追光灯打在演员身上，而背景几乎一片漆黑，如果不用点测光必定出现主体曝光过度。再如拍摄日出日落场景，也需要摄影者针对天空实际亮度选择某一个标准区域来还原自己希望的亮度，同样要依赖点测光才比较可靠。另外像逆光摄影、空中摄影、拍摄跳伞等场景，采用点测光模式也比较合适。</p>
<br/>
<br/>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“光圈” - 单反入门第二课</title>
    <url>/2012/tutorial/introduction-to-SLR-second/</url>
    <content><![CDATA[<p>光圈是数码相机的另一个极其重要的物理部件，数码相机毕竟还是相机，再好的镜头如果没有好的光圈也不会有理想的效果，这跟高级相机装上低级胶卷也不会照出好照片是一样的道理。</p>
<p>光圈通常位于镜头的中央，它是一个环形，可以控制圆孔的开口大小，控制曝光时光线的亮度。当需要大量的光线来进行曝光时，就将光圈的圆孔开大；若只需要少量光线曝光时，就将圆孔缩小、让少量的光线进入。</p>
<p>光圈由装设在镜头内的叶片控制，而叶片是可动的。光圈越大，镜头里 的叶片开放越大。所谓「最大光圈」，就是叶片毫无动作，让可通过镜头的光源全部跑进来的全开光圈。反之光圈越小，叶片就收缩的越厉 害，最后可缩小到只剩小小的一个圆点。</p>
<p>光圈的功能就如同我们人类眼睛的虹蟆，是用来控制拍摄时，单位时间的进光量，一般以ｆ／5、Ｆ 5 或 1：5 来标示。以实际而言，较小的ｆ值表示较大的光圈。</p>
<p>光圈的计算单位我们称为光圈值（f-number）或者是级数（f-stop）。首先我们来谈谈光圈值。</p>
<span id="more"></span>

<p>标准的光圈值（f-number）的编号如下：</p>
<blockquote>
<p>f&#x2F;1、f&#x2F;1.4、f&#x2F;2、f&#x2F;2.8、f&#x2F;4、f&#x2F;5.6、f&#x2F;8、f&#x2F;11、f&#x2F;16、f&#x2F;22、f&#x2F;32、f&#x2F;45、f&#x2F;64</p>
</blockquote>
<p>其中，f&#x2F;1 是进光量最大的光圈号数，光圈值的分母越大，进光量就越小。通常一般镜头会用到的光圈号数为 f&#x2F;2.8 ～ f&#x2F;22，光圈值越大的镜头，镜片的口径就越大，相对提高其制作成本跟难度。</p>
<p>级数是指相邻的两个光圈值的曝光量差距，例如 f&#x2F;8 跟 f&#x2F;11 之间相差一级，f&#x2F;2 跟 f&#x2F;2.8 之间也相差了一级。依此类推，f&#x2F;8 跟 f&#x2F;16 之间相差了两级，f&#x2F;1.4 跟 f&#x2F;4 之间就差了三级。</p>
<p>在职业摄影圈里，有时称级数为「档」或是「格」，例如 f&#x2F;8 跟 f&#x2F;11 之间相差了一档、或是 f&#x2F;8 跟 f&#x2F;16 之间就相差了两格。</p>
<p>在每一级（光圈号数）之间，后面号数的进光量都是前面号数的一半。例如说 f&#x2F;5.6 的进光量只有 f&#x2F;4 的一半，f&#x2F;16 的进光量也只有 f&#x2F;11 的一半，号数越后面，进光量越小，并且是以等比级数的方式来递减。</p>
<p><img src="/images/slr/SLR_second1.jpg"><p style="line-height: initial; margin-top: -20px;">光圈号数与进光量的关系除了考虑进光量之外，光圈的大小还跟景深有关。景深是物体成像后，在相片（图档）中清晰的程度。光圈越大景深会越浅（清晰的范围较小）、光圈越小景深就会越长（清晰的范围较大）。</p></p>
<p><img src="/images/slr/SLR_second2.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">左边是大光圈、右边是小光圈，可以明显的看出两张图的景深明显不同</p></p>
<p>大光圈的镜头非常适合低光量的环境，因为它可以在微亮光的环境下，撷取更多的现场光，让我们可以用较快速的快门来拍照，以便保持拍摄时相机的稳定度。但是前面有提到大光圈的镜头不易制作，必须要花较多的花费才可以获得。</p>
<p>好的数码相机会根据测光的结果等情况自动计算出光圈的大小，一般情况下快门速度越快光圈就越大，以保证有足够的光线通过，所以也比较适合拍高速运动的物体，比如行动中的汽车、落下的水滴等。光圈大比较容易使用较快的快门外。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“感光度” - 单反入门第七课</title>
    <url>/2012/tutorial/introduction-to-SLR-seventh/</url>
    <content><![CDATA[<p>感光度（也就是 ISO）指的是感光体对光线感受的能力。在传统摄影时代，感光体就是底片，而在数码摄影的时代，相机则采用 CCD 或是 CMOS 作为感光原件。感光度越高（也就是 ISO 值越高）时，拍摄时所需要的光线就越少，感光度越低时，对拍摄时所需要的光线就越多。</p>
<blockquote>
<p>一般我们常见的 ISO 数值有： ISO50、ISO100、ISO200、ISO400、ISO800、ISO1600</p>
</blockquote>
<p>当 ISO 的数值越高时，感光度就越强。目前入门级数位单反相机的感光度通常从 100 起跳（NIKON 为 ISO 200），最高一般都有到 ISO 1600 的实力。</p>
<p>在每两个相邻的感光度号数之间，差异的感光能力是两倍，也就是说，ISO100 的感光能力是 ISO50 的两倍，同样的 ISO1600 的感光能力是 ISO800 的两倍。这里的计算方法，跟我们在前面课程中提到过的光圈和快门是一样的。</p>
<p>感光度跟光圈、快门一样，在两个相邻号数之间都有「一级」或是「一格」的差距。所以，我们在换算曝光量时，同样的也可以把 ISO 带进去里面作变换。例如：</p>
<p>F2.8、1&#x2F;60s、ISO 100 &#x3D; F5.6、1&#x2F;60s、ISO 400（因为光圈减少了两格的光量，所以右边在 ISO 感光度上增加了两格补回来）</p>
<span id="more"></span>

<p>提高感光度可以帮助我们在环境比较暗的场合来拍照，而不需要藉助闪光灯、或是大光圈的镜头来辅助，不过它也有一个很难令人忍受的缺点，就是当感光体的感光度越高，所拍摄出来的图片粒子就会越粗造，画面的噪声也会增多。</p>
<p>一般数码单反相机对噪声及粗粒子的抑制能力，也是作能力评比时的一个重要评分依据。我们来看看在使用低感光度跟高感光度两种情况下，画面的噪声跟粒子的差异有多大：</p>
<p><img src="/images/slr/SLR_seventh1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">原图，使用 ISO 100 来拍摄</p></p>
<p><img src="/images/slr/SLR_seventh2.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">使用 ISO 100 拍摄时的局部放大图，粒子比较细腻</p></p>
<p><img src="/images/slr/SLR_seventh3.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">使用 ISO 800 时的放大图，颗粒比较大，而噪声也变多了</p></p>
<p>从上面的局部放大画面，可以见到提高感光度之后，对画面产生的负面影响。一般如果拍摄者要求画面的细致度及高品质，在拍摄时就尽量不要使用高感光度的设定。这时因为光线不足势必要拉长拍摄时间或是补光，所以闪光灯或是三脚架就成了必备的工具。</p>
<p>如果从另一个角度来看，高感光度所造成的粗粒子有时反而可以拿来好好的运用，变成另外一种特殊的摄影效果。在以前传统摄影的时代，有时为了要拍出粗粒子效果的照片，我们会特意使用高感光度的底片来拍摄，然后在冲片时再利用高温缩短时间的方式，来增加噪声及颗粒。现在只要在拍摄时简单的设定一下感光度，然后在后制时，利用影像软件再作一下处理，就可以获得很棒的效果了。</p>
<p><img src="/images/slr/SLR_seventh4.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">利用用高 ISO 的噪声跟粗颗粒，来制造不一样的影像效果</p><br><br/><br><br/></p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“对焦” - 单反入门第六课</title>
    <url>/2012/tutorial/introduction-to-SLR-sixth/</url>
    <content><![CDATA[<p>一张好的照片，最基本的条件，就是要拥有良好的曝光和正确的对焦。在前面我们已经讲过了曝光的观念和换算方法，在后面会继续教大家如何因应环境来调配合适的曝光组合，这里我们要先教大家正确的对焦方法跟观念。</p>
<p>自动对焦功能已经是现在 DSLR 的基本功能了，尤其是有超音波马达的推动和更新更强的对焦程序辅助。在一般的拍摄情况下，要做到正确的对焦已不再是件困难的事情了，不过还是有许多人常常会拍出失焦的照片，有些时候连摄影老手也会犯下这样的错误。</p>
<p>为了帮助初学摄影的朋友可以拍出清晰的照片，在这里我们特别列出了一些在对焦时，容易发生的疏忽和错误。只要在拍摄时仔细的注意下面的一些情况，就可以避免失焦或是焦距偏移的情况发生。</p>
<h2 id="反差低的环境"><a href="#反差低的环境" class="headerlink" title="反差低的环境"></a>反差低的环境</h2><p>基本上，自动对焦的系统通常是利用环境中的反差，经过运算合焦后，来达成自动对焦的目的。这样的设计在拍摄环境反差比较低时，就会发生对不到焦的情况，很难达成合焦的动作，也就是一般常说的「迷焦」。</p>
<span id="more"></span>

<p>在反差低的环境对焦时，可以将对焦点移到同样距离内反差比较大的物体，完成对焦的动作之后，再将镜头移回至我们要构图的范围中。在进行这个动作的时候，完成对焦后记得要先锁定焦点，以免重新构图时又失去了已经对好的焦距。一般的相机要锁定焦点，采用的是半按快门的方式，其它较复杂的设定可以参阅相机的说明书来设定此动作。</p>
<h2 id="低亮度的环境"><a href="#低亮度的环境" class="headerlink" title="低亮度的环境"></a>低亮度的环境</h2><p>在亮度比较低的拍摄环境，也很容易产生迷焦的状况。一般相机所设定的自动对焦，在环境上有一定的亮度限制，低于这个限度时，自动对焦就会丧失它的功能。现在的数码单反相机大多有对焦辅助灯的设计，在光度不足时，对焦辅助灯会自动发光来协助对焦。不过这个小灯通常功率不强，能帮助照射的距离有限；另外，高阶的数码单反相机通常也没有对焦辅助灯的设计。</p>
<p>解决的方式是在低光度拍摄时，另外加装外部闪灯。功能比较齐全的外部闪灯都有功率更强的对焦辅助灯功能，甚至能投射会造成反差的红光来帮助对焦。</p>
<p>另外一个方法是使用手电筒或其它的外部光源来照射，帮助对焦可以顺利完成，要不就是干脆改用手动对焦，以自己的眼睛来确认。</p>
<h2 id="对焦点不在中央"><a href="#对焦点不在中央" class="headerlink" title="对焦点不在中央"></a>对焦点不在中央</h2><p>当对焦点不在中央时，我们必须先在画面里的焦点对焦，然后再重新构图。进行这个动作的时候，常常会因为疏忽，而在重新对焦时让焦点跑掉，对到不是我们原来预设的位置。</p>
<p>在上面第 1 点「反差低的环境」中，有提到利用半按快门来保持原先锁定的焦点，一般在拍摄时我们很容易因为疏忽，而忘记去做这样的动作。所以养成半按快门的好习惯，在重新构图时才不会有焦点跑掉的情况发生。</p>
<p>此外，有的相机还可以设定其它的按键作对焦，快门钮则专门执行测光及按下快门的动作。这样的设定也可以避免跑焦的情况。</p>
<h2 id="被摄体是处在连续移动的状态"><a href="#被摄体是处在连续移动的状态" class="headerlink" title="被摄体是处在连续移动的状态"></a>被摄体是处在连续移动的状态</h2><p>当被摄体处在一个连续移动的状态之下，我们在对焦完按下快门之前，可能因为被摄体已经离开了拍摄的位置，而发生失焦的情况，像我们在拍小朋友嬉戏的画面时，就很容易发生这样的情况。</p>
<p>解决的方法可以利用相机本身的「连续对焦功能」，将对焦选项切到这个位置之后，相机就会自动对移动中的被摄体，持续地做对焦动作，一直到快门被按下为止。当然这个功能也并非是万灵丹，当相机本身的连续对焦功能不够强悍时，偶而也会有抓不到焦点的情况发生。</p>
<p>各家厂牌连续对焦的能力不尽相同，目前在动态追焦上的表现，以 Canon 最为摄影人所称道，而 Nikon 在这方面也有不错的表现。熟悉自己拍摄的主题后，选择购买适合的相机，是每一个拍摄者事前应该做好的功课，如果相机的连续对焦功能不尽理想，那么拍摄者不妨改成手动对焦，顺便训练一下自己对焦的速度跟能力。</p>
<p>现在数码单反相机的功能，可以说是一台比一台强，但是面临上述种种情况，自动对焦还是会有失准的时候，所以除了留意这一堂课提到需要注意的情况之外，花点时间好好练习一下手动对焦能力，也是摄影人应该具备的能力。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“外接闪光灯” - 单反入门第十课</title>
    <url>/2012/tutorial/introduction-to-SLR-tenth/</url>
    <content><![CDATA[<p>一般来说，想对闪灯摄影作比较多样的变化或是闪灯出力（也就是闪光灯的亮度）较大的应用时，单单使用相机内建的闪灯会有很多限制，所以对于想在闪灯摄影上作进阶使用的摄影初学者来说，我们会建议购买一支功能比较强的外接式闪灯来搭配使用。</p>
<p>外接闪光灯可分为两种类型：一种是可用于不同厂商相机的通用型号，另一种是特定相机专用型号。内置于数码相机中的闪光灯由于是直接把强光照射到拍摄对象上，因此有时会产生难看的阴影。这时候最好使用外置闪光灯。最近，可使用外置闪光灯的数码相机也越来越多。如果是可使用外置闪光灯的机型，不用的话就太可惜了。</p>
<p>这里先让我们来了解一下闪灯应用的相关名词解释。</p>
<p>首先来看 GN 值。在闪灯的规格表中，这个数字代表了该闪灯的功率，GN 值（Guide Number，闪灯指数）指的是闪灯出力的程度，当 GN 值越大，代表闪灯的出力越强，也就是发射出来的闪光能力越强。关于 GN 值的计算方式为：</p>
<blockquote>
<p>GN ＝ F（光圈） x m（单位为公尺，代表与被拍摄物的距离）</p>
</blockquote>
<p>在这个公式中，是以 ISO 100 为标准的拍摄环境。举例来说，当一个闪灯的 GN 值有 40 时，当我们使用 F4 的光圈拍摄，闪灯的有效距离可以达到 10 公尺内的范围。</p>
<span id="more"></span>

<p>接着来看一下闪灯在摄影时，所使用的几种不同操作模式。目前一般市售的外接闪灯操作模式有：M 模式、A 模式、TTL 模式，高阶一点的闪灯还会有 FP 模式，以下就让我们对这些模式作一个简单的说明。</p>
<h3 id="M-模式："><a href="#M-模式：" class="headerlink" title="M 模式："></a>M 模式：</h3><p>全手动模式，使用者必须依照拍摄时所使用的光圈跟距离，来调整闪灯的出力。M 模式的优点是出力一致，只要调整好数值，每一张拍摄的闪灯出力都会是固定的光量，缺点是需要事先调整，在临场的应变上，需要耗费不少时间在作计算调整的工作。</p>
<h3 id="A-模式："><a href="#A-模式：" class="headerlink" title="A 模式："></a>A 模式：</h3><p>自动模式，先使用闪灯上的感光器对环境作测光，然后配合相机的光圈设定做出力。A 模式的运作原理跟 M 模式相仿，只是调整出力跟测光的工作变成由闪光灯来执行，拍摄者只要调整需要的工作光圈就可以了。</p>
<h3 id="TTL-模式："><a href="#TTL-模式：" class="headerlink" title="TTL 模式："></a>TTL 模式：</h3><p>TTL 模式会依据相机设定的曝光组合测光，在快门刚按下开始发光，然后再依据相机的 TTL 曝光计算光量直到曝光充足为止。一般来说，只要相机的测光系统够准确，利用 TTL 模式可以得到比较合适的曝光。</p>
<p>TTL 的缺点是反差过大或是在全黑或是全白的拍摄环境时，如果没有适当的作曝光补偿，就会拍出过亮或是过暗的照片出来。</p>
<h3 id="FP-模式："><a href="#FP-模式：" class="headerlink" title="FP 模式："></a>FP 模式：</h3><p>高速闪光同步（FP High-Speed Sync），在这个模式中，闪灯所搭配的快门速度不再受到相机闪光同步快门速度的限制，有 FP 功能的闪灯可以利用频闪的方式跟相机的最高快门达到同步。不过在使用 FP 模式时，会因为闪光灯连续的频闪而降低了出力。</p>
<p>另外，我们要提一下「照射角」这个名词。照射角指的是配合镜头的使用，闪光灯本身所能涵盖照射角度范围，一般来说，目前市面上的闪灯照射角度一般从 24mm ~ 85mm，大约涵盖了我们摄影时常用的广角端一直到中长焦距。</p>
<p>高阶的闪灯在灯头还会附有一片「扩散片」，将它拉下后，闪灯的照射角可以拉大至 16mm，这个焦段已经涵盖到超广角的范围了。要记得的是，当使用 APS 尺寸的 DSLR 时，要先将镜头焦距乘上 1.5 或者 1.6，再来对应闪光灯的照射角。</p>
<p>上面几个名词是看闪灯规格表时，应该先要熟悉认识的内容，以后我们会接着谈一谈闪灯的基本操作运用。</p>
<p>下面是使用外接式闪光灯要注意的几点问题：</p>
<ol>
<li><p>经过对目前市场上的一些商务型数码相机测试发现，大部分数码相机只支持本品牌的闪光灯，而使用其它品牌的闪光灯可能会出现不同步现象，因此建议用户选择与数码相机相同品牌的闪光灯。</p>
</li>
<li><p>部分数码相机虽然能配其它品牌的闪光灯，但使用时有一定的要求。在测试中发现，多触点式闪光灯只支持本品牌的数码相机。而单触点式闪光灯在一些数码相机上使用效果却很理想，特别是一些国产的带有自动闪光功能的闪光灯，在部分数码相机上使用效果很好，曝光也十分准确，画面质量相当出色。</p>
</li>
<li><p>当使用外接式多触点闪光灯时，大部分数码相机需要在菜单上设置为外接式闪光灯，此时内置式闪光灯就会被关闭，直接启动外接式闪光灯。否则，仍然是内置式闪光灯工作。目前，有些新型的数码相机能自动切换成外接式闪光灯，但数量很少。</p>
</li>
<li><p>在选购数码相机时，需要外接闪光灯的用户应当场安装一个闪光灯进行试拍，然后通过数码相机的彩色液晶显示屏观察照片，最好放大查看，看看闪光灯是否同步，是否能正确配合数码相机的曝光。</p>
</li>
</ol>
<p>摄影的主体即光与影，用光的好坏对一幅作品的成败很关键。目前主流数码相机更多地朝着高像素发展，各种专业的功能也在逐步加入中，但目前各数码相机厂商在用光的考虑上做得还远远不够：多数民用级数码相机并没有配备外接闪光灯接口，而内置的闪光灯基本上是鸡肋，其闪光灯指数小，没有太多的闪光灯功能设置，一般只有发光、不发光、消除红眼等，使用闪光所得照片往往是前景过曝，而背景仍旧是黑黑的一片，有时还会带上难看的影子。所以，很多摄友在夜间或室内光线不足的拍摄中宁可照片虚掉一点，也不愿意使用数码相机自带的闪光灯。</p>
<p>摄影的主体即光与影，用光的好坏对一幅作品的成败很关键。目前主流数码相机更多地朝着高像素发展，各种专业的功能也在逐步加入中，但目前各数码相机厂商在用光的考虑上做得还远远不够：多数民用级数码相机并没有配备外接闪光灯接口，而内置的闪光灯基本上是鸡肋，其闪光灯指数小，没有太多的闪光灯功能设置，一般只有发光、不发光、消除红眼等，使用闪光所得照片往往是前景过曝，而背景仍旧是黑黑的一片，有时还会带上难看的影子。所以，很多摄友在夜间或室内光线不足的拍摄中宁可照片虚掉一点，也不愿意使用数码相机自带的闪光灯。 在光线不足的情况下为了获得好的照片，我们必需为拍摄对象补光，在没有可以借用的光源时，闪光灯就成了便携易用的最好选择。直射打光是用闪光灯补光的一大忌，有经验的拍摄者一般会把闪光灯打到浅色的表面，如墙壁、天花板上，利用其反射闪光为拍摄对象补光，通过这种方式获得的是散射光，用在人像拍摄中，散射光效果可以生动地表现出人的体感、质感和空间感。</p>
<p>为了更好地使用闪光灯补光，我们坚持两条原则：一是有外置闪光灯热靴或 PC 接口的数码相机，一定要为其配置外接闪光灯；二是没有外置闪光灯接口的，尽可能使用同步器和专为数码相机设计的闪光灯，以求得到好的补光效果。</p>
<p>一般闪灯的作用是用来补足现场光线的不足，所以我们在拍摄时，能让使用闪灯拍出来的照片尽量接近自然光。</p>
<p>但是闪灯的光线是属于直射式的，加上跟被摄体的距离通常都不会太远，不像一般的自然光有许多比较柔和的反射光，所以这个光线通常都会比自然光来的锐利很多。</p>
<p><img src="/images/slr/SLR_tenth1.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">闪灯的直射光，通常比较锐利、而且死板</p></p>
<p>使用闪灯拍摄出来的照片大多比较生硬，尤其是闪灯的运用绝大部分都集中在人像摄影上，从上图来看，我们可以很明显的发现人物脸上的线条变得比锐利，肤色的柔软度也没有自然光来的好，为了改善这样的缺点，我们可以另外再购买「柔光罩」加在闪灯的照射灯部，让光线透过柔光罩特殊的材质后变得比较散射，这时拍出来的光线就不会那么的生硬。</p>
<p><img src="/images/slr/SLR_tenth2.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">加上柔光罩之后，可以稍微改善锐利死板的程度</p></p>
<p>柔光罩大部分都是由一般的周边厂商所生产贩售，根据每一种闪灯的尺寸、还有柔光罩的材质、设计形式有各种不同的搭配产品，大家可以依据自己的需要、以及不同柔光罩的特性来选择合适自己的产品。</p>
<p>刚刚我们提到闪光灯的照射是直射的，拍摄时，被摄物的照射光直接来自相机跟闪光灯的方向，这个光线通常是水平的，不像一般的自然光来自我们的上方，所以即使加上了柔光罩，被摄物的阴影还是不像一般自然情况下的模样，这时，我们就可以利用「跳灯」的方式，来进行闪灯摄影。</p>
<p>一般的外接闪灯只要有一定的功能水准，都会具有调整灯头方向的能力，在拍摄时，只要现场的天花板不要太高（大约不要超过三米），颜色属于浅色系，我们就可以将灯头指向拍摄体正上方的天花板，然后进行拍摄。利用闪光灯照向天花板再反射扩散至被摄体上，这时就可以营造出更柔和、而且是从上方照射的光线，这样的拍摄方法，就是上面所说的「跳灯」。</p>
<p><img src="/images/slr/SLR_tenth3.jpg"><p align="center" style="line-height: initial; margin-top: -20px;">跳灯拍出来的光线，比较接近自然光、也比较柔和</p></p>
<p>同样的方式，我们就可以将「跳灯」作不同的变化，配合拍摄的环境，将闪灯灯头调整到我们所需要反射的地方，这样在作闪灯摄影时，拍出来的东西就不会那么死板。使用跳灯最大的限制是拍摄环境需要一个浅色系的反射区（深色物体的反射能力有限），还有经过反射后、闪灯的功率也会跟着缩减，所以反射区距离灯头跟被摄体也不可以离得太远。<br><br/><br><br/></p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“快门” - 单反入门第三课</title>
    <url>/2012/tutorial/introduction-to-SLR-third/</url>
    <content><![CDATA[<p>快门是相机中的一个机械装置，大多设置于机身接近底片的位置（大型相机的快门则是设计在镜头中），藉由控制快门的开关速度，来决定底片接受光线的时间长短。</p>
<p>也就是说，在每一次拍摄时，光圈的大小控制了光线的进入量、快门的速度决定光线进入的时间长短，这样一次的动作便完成了我们所谓的「曝光」。</p>
<p>快门是镜头前阻挡光线进来的装置，一般而言快门的时间范围越大越好。秒数低适合拍运动中的物体，某款相机就强调快门最快能到 1&#x2F;16000 秒，可轻松抓住急速移动的目标。不过当你要拍的是夜晚的车水马龙，快门时间就要拉长，常见照片中丝绢般的水流效果也要用慢速快门才能拍。</p>
<p>快门以「秒」作为单位，它有一定的数字格式，一般在像机上我们可以见到的快门单位有：</p>
<blockquote>
<p>B、1、2、4、8、15、30、60、125、250、500、1000、2000、4000、8000</p>
</blockquote>
<p>上面每一个数字单位都是分母，也就是说每一段快门分别是：1 秒、1&#x2F;2 秒、1&#x2F;4 秒、1&#x2F;8 秒、1&#x2F;15 秒、1&#x2F;30 秒、1&#x2F;60 秒、1&#x2F;125 秒、1&#x2F;250 秒（以下依此列推）等等。一般中阶的单眼相机快门做到 1&#x2F;4000 秒，高阶的专业相机则可以到 1&#x2F;8000 秒。</p>
<p>B 指的是慢快门 Bulb，B 快门的开关时间由操作者自行控制，我们可以藉由快门按钮或是快门线，来决定整个曝光的时间。</p>
<span id="more"></span>

<p>我们可以注意到每一个快门之间数值的差距都是两倍，例如 1&#x2F;30 是 1&#x2F;60 的两倍、1&#x2F;1000 是 1&#x2F;2000 的两倍，这个跟光圈值的级数差距计算都是一样的。与光圈相同，每一段快门之间的差距也被之为一级、一格或是一档。</p>
<p>光圈级数跟快门级数的进光量其实是相同的，也就是说光圈之间相差一级的进光量，其实就等于快门之间相差一级的进光量，这个观念在计算曝光时很重要，我们会在下一个章节跟大家讲解。</p>
<p>前面我们提到光圈决定了景深，快门则是决定了被摄物的「时间」。当我们拍摄一个快速移动的物体时，通常需要比较高速的快门，才可以抓到凝结的画面，所以我们在拍动态的画面时，通常都要考虑可以使用的快门速度。</p>
<p>有时我们要抓取的画面可能需要连续性的感觉，像是拍摄像是丝缎般的瀑布或是小河时，就必须要用到速度比较慢的快门，延长曝光的时间来抓取画面的连续动作。</p>
<p><img src="/images/slr/SLR_third.jpg"><p style="line-height: initial; margin-top: -20px;">左图用了比较慢速的快门，可以看到两片叶片有明显的晃动，右边用了安全快门，所以可以拍到凝聚的画面。</p></p>
<p>除了「时间」之外，快门也决定了我们拍摄的稳定度，一般以手持相机拍摄来说，快门必须要高到一个值，拍出来的画面才不会晃动，这个能拍出稳定画面的快门速度，通常称之为「安全快门」。</p>
<blockquote>
<p>安全快门有一个简单的计算方式：1 &#x2F; 使用的镜头焦距 &#x3D; 安全快门</p>
</blockquote>
<p>如果我们现在使用 50mm 的镜头拍摄，那么能让我们拍出清晰相片的安全快门就是 1&#x2F;50 ，大约是 60 的快门。如果使用了 200mm 的镜头，那么安全快门就要提高到 1&#x2F;200 大约是 250 的快门。由此可知，焦距越广的镜头安全快门就比较低，但是长焦距的镜头所需要的安全快门就高许多。</p>
<blockquote>
<p>快门时滞时间</p>
</blockquote>
<p>相机在不使用对焦锁定功能同时保证在自动对焦工作状态下，从按下快门释放按钮到开始曝光的这段时间称为快门时滞时间。</p>
<blockquote>
<p>快门先决曝光模式</p>
</blockquote>
<p>由我们先自行决定快门速度后，相机测光系统依当时光线的情形，自动选择适当的光圈 f 值(可为无段式的 f 值)以配合。设有曝光模式转盘的数码相机，通常都会在转盘上刻上’s’字母来代表快门先决模式。快门先决模式适合于需要控制快门的摄影。利用高速快门可凝结动作，利用慢速快门可令行驶中的车辆变成光束。</p>
<blockquote>
<p>快门延迟</p>
</blockquote>
<p>相机按下快门，这时相机自动对焦、测光、计算曝光量、选择合适曝光组合…进行数据计算和存储处理所需要的时间称为快门延迟。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“制造浅景深的方法” - 单反入门第十三课</title>
    <url>/2012/tutorial/introduction-to-SLR-thirteenth/</url>
    <content><![CDATA[<p><img src="/images/slr/SLR_thirteenth1.jpeg"><br>在前面的文章中，我们有提到影响景深的几个因素，分别是光圈的大小、距离的长短、跟镜头的焦距。</p>
<p>浅景深是很多摄影人很喜欢用的一个技巧，尤其是在拍人像的时候，浅景深很容易突显出模特儿在画面上的位置，同时也适度的柔化及美化背景的效果。一般来说，制造浅景深最方便的方法，就是使用大光圈的镜头（光圈大小与景深的关系）。通常只要光圈有到 f2.8，就可以得到相当不错的浅景深效果了。</p>
<p>获取浅景深对数码相机用户来说可能是最令人烦恼的问题，这里就多说几句。一般情况下在不影响构图效果的前提下，采用―最大光圈＋尽可能缩短的摄距＋长焦距镜头‖能获取最小景深的效果。对于早期生产的消费级数码相机来说，使用相机本体来实现小景深是很困难的，原因在于那时的相机镜头焦距较短。即便如此，在多数的微距拍摄中还是可以获得不错的浅景深效果，这是与摄距较小密切相关的。但是在人像摄影中，尤其是全身入镜的情况下，由于摄距过大，仍然难以得到特别好的浅景深效果。此时具备长焦镜头的高变焦相机就比较适合使用。</p>
<p>不过现在都流行「一镜到底」的拍摄方法，所以大部分的摄影者在选购器材时，都会以变焦镜头为优先考虑的对象，偏偏拥有大光圈的变焦镜头多是价格不斐。以原厂的大光圈变焦镜来说，动辄三、四万元以上的售价，实在不是一般人容易负担的起的价钱。</p>
<p>以现在一般初学者会购买的变焦镜来说，多数是落在 18-70mm f3.5-4.5 这样规格的平价镜头上，望远程的光圈值最大只有 f4.5。这跟大光圈变焦镜的 f2.8 相比，已经有了一格半左右的级数差距，自然在浅景深的营造上会比较吃亏。今天，我们就要教大家如何用平价的变焦镜头，来拍出美丽的浅景深照片。</p>
<span id="more"></span>

<ul>
<li>尽量使用望远端来拍摄</li>
</ul>
<p>当焦聚越常长时，景深就越浅，所以尽量利用变焦镜望远端的部分来拍摄，就可以有效的缩短景深。光圈 f4.5，使用广角端来拍摄，后面的背景比较清晰。</p>
<p><img src="/images/slr/SLR_thirteenth2.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，使用广角端来拍摄，后面的背景比较清晰</p><br><img src="/images/slr/SLR_thirteenth3.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，使用望远程来拍摄，后面的背景就比较模糊了</p></p>
<p>消费类 DC 中高端长焦机种很多，7 倍变焦就可以达到 135 相机的 200mm 的焦距，可以拍出很好的浅景深效果片子来，所以长焦镜头对控制景深更有利一些，但不是绝对的。拍摄同样大小的影像，长焦镜要离得远些，越远虚化越差；同时焦距越长，镜头光圈越小（消费机镜头没有恒定光圈的），虚化也越差。在消费类 DC 上长焦与大光圈就像鱼与熊掌不可兼得一样，要根据拍摄现场的实际情况，光线足够则使用长焦；光线不足时多使用大光圈。</p>
<ul>
<li>拉远主体跟背景间的距离</li>
</ul>
<p>当我们拉开主体跟背景的距离后，就可以将背景落在景深清晰的有效范围之外，这样子，同样的可以营造出浅景深的效果。光圈 f4.5，主题与背景的距离比较近，背景会比较清晰。</p>
<p><img src="/images/slr/SLR_thirteenth4.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，主题与背景的距离比较近，背景会比较清晰</p><br><img src="/images/slr/SLR_thirteenth5.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，使用同样的焦距，当背景比较远时，变得比较模糊</p></p>
<p>消费类 DC 镜头一般为 3 倍光学变焦，包含了拍摄人像的最佳 85-105 焦段，这一焦段拍摄人像不会出现畸变，但这个焦段的镜头背景虚化效果没法让人满意。而单反相机上使用的专业人像头都是定焦，最长焦 135，以定焦的大光圈和特殊设计来满足人像拍摄的要求，但价格太贵，不是一般摄友能买得起来拍着玩的，也就是说，即使是单反数码相机，如果没有高端的人像专用头，依旧无法拍出极佳的浅景深人像照片。那么我们能做的就是加大拍摄主体与背景间的距离，通过这种方式获得的照片不会有太大的差别。</p>
<ul>
<li>拉近主体跟相机的距离</li>
</ul>
<p>当拍摄距离越短时、景深越浅，所以在拍摄时尽量离拍摄主体近一些，就可以拍出浅景深的效果。</p>
<p><img src="/images/slr/SLR_thirteenth6.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，拍摄距离比较远时</p><br><img src="/images/slr/SLR_thirteenth7.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">光圈f4.5，镜头焦距相同，主体与背景的位置不变，拍摄距离变近时，背景变得比较模糊</p></p>
<p>上面的范例图片都使用了光圈 f4.5 的相同条件来拍摄。因为我们在第一点时提到尽量利用望远程的部份，在这样的情况下，我们跟拍摄物之间的距离就会有了限制，此时摄影者必须在两者之间作取舍，以免拍出了主题过大的照片。</p>
<p>靠近被摄主体后，加大了镜头和被摄主体间距离、镜头与背景间距离的对比，易获得浅景深。因为摄影师与被摄主体间的距离太近，消费 DC 一般要设置为近拍模式，即―小花‖模式。如果相机具有超微距模式则更好，但这种拍摄方式一般只适用于拍花草或小昆虫，用于拍摄人像显然不太合适，你不希望把镜头贴在 MM 鼻子拍粉刺豆豆或雀斑的大特定而招来一顿痛打吧。</p>
<p>所以，要想拍出好的浅景深效果，请使用近拍模式，靠近被拍摄对象，拉开主体与背景间的距离，使用大光圈和长焦。<br><br/></p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>“直方图(histogram)” - 单反入门第十二课</title>
    <url>/2012/tutorial/introduction-to-SLR-twelfth/</url>
    <content><![CDATA[<p>在一些高档消费级数码相机上有很多实用功能，现在的 DSLR 在使用机背 LCD 预览照片时，有额外显示直方图（histogram）的功能，这个功能可以帮助我们利用阶调分布的图形，来观察一张照片明暗分布的比例状况。</p>
<p>直方图是通过在 LCD 上显示出来的波形参数来确定照片曝光精度的工具，现在许多高档相机在取景的时候就能够看见实时直方图，这在拍摄时是非常好的帮手。通过直方图的横轴和纵轴我们可以清楚地来判断拍摄的照片或者正在取景的照片曝光情况。</p>
<p>我们知道，数码相机相对于传统胶片相机一个很大的优势就是即拍即现，拍出的照片立刻就能在 LCD 液晶屏上回放看到效果。不过现在的数码相机动辄就是 400 万以上像素，而这些相机所配备的 LCD 液晶屏往往只有十几万像素，因此这个小小的 LCD 液晶屏根本不能完全表现出所拍照片的细节效果。特别是因为 LCD 对于光线并不那么敏感，很多时候拍摄的照片即使过曝或者曝光不足通过 LCD 也难以反映出来，这里我们就要借助许多数码相机内置的―直方图显示‖功能来判断拍摄的相片曝光是否均匀。</p>
<span id="more"></span>

<p>首先来看一下 histogram 的阅读方式。在画面的水平轴，代表的是画面的明暗部，越靠左边越暗、越往右边则越亮，也就是说，整个画面的明调在右手的方向、暗调在左手的方向，而中间调则是位于中间的部位。一幅比较好的图应该明暗细节都有，在柱状图上就是从左到右都有分布，同时直方图的两侧是不会有像素溢出的。而直方图的竖轴就表示相应部分所占画面的面积，峰值越高说明该明暗值的像素数量越多。</p>
<p><img src="/images/slr/SLR_twelfth1.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">如果直方图显示只在左边有，说明画面没有明亮的部分，整体偏暗，有可能曝光不足</p><br><img src="/images/slr/SLR_twelfth2.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">而如果直方图显示只在右边有，说明画面缺乏暗部细节，很有可能曝光过度</p><br><img src="/images/slr/SLR_twelfth3.jpeg"><p style="line-height: initial; margin-top: -20px;">在 histogram 垂直轴的部分，代表的是该区域像素分布数目的多寡，越低像素越少、越高像素就会越多。从水平轴跟垂直轴的分布，我们就可以大致的看出一张照片它的明暗分布大约是甚么样的状况。</p></p>
<p>下面来看一下各种不同照片的直方图。<br><img src="/images/slr/SLR_twelfth4.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">像素集中在明调的区域，明显的曝光过渡了</p><br><img src="/images/slr/SLR_twelfth5.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">像素平均的分配在每个区域，曝光良好</p><br><img src="/images/slr/SLR_twelfth6.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">像都集中到暗部去了，曝光不足</p></p>
<p>一般来说，一张曝光良好的照片，它的 histogram 分配应该是明暗部相当平均的，这样整个画面的明暗比例才会适切。但有时如果我们要拍一些亮调子（所谓的 high key）或者是暗调子（所谓的 low key）的照片，反而就需要调整一下明暗分布的比重了。</p>
<p><img src="/images/slr/SLR_twelfth7.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">这是暗调子的拍摄手法，用来表现阴郁的感觉</p><br><img src="/images/slr/SLR_twelfth8.jpeg"><p align="center" style="line-height: initial; margin-top: -20px;">这是亮调子的拍摄手法，画面看来清爽而明亮</p></p>
<p>直方图可以用来帮助我们了解曝光的好坏多寡，以及照片的拍摄调性。有许多新手在使用 DSLR 时都会去忽略了这个功能，其实是蛮可惜的一件事情。记得下次在拍照时，多多利用一下 histogram 来观察相片的明暗，这样可以增进我们对曝光抓取的敏感跟准确度喔。</p>
<p>直方图能够显示曝光不足的问题，这样玩家就可以进行曝光补偿调节，在数码相机上这个过程可以很直观快速地反映出来，最后的效果我们也可以立刻看到。除此之外，直方图还能够显示曝光过度的问题，我们可以进行相应的负补偿，相机通过缩小光圈或者提高快门速度来减少曝光。曝光补偿是在测光系统难以做出准确判断的时候的一个调整手段，有些物体和景物是很难通过测光系统进行准确曝光处理的，例如雪景，通常都会造成曝光不足，此时要遵守白加黑减的曝光补偿原则，一般就能拍摄出曝光准确的照片。而对于有实时直方图的机器，我们在拍摄之前通过直方图信息，就可以大概知道该幅照片的曝光情况，节省了拍摄中宝贵的时间。<br><br/></p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>单反教程</tag>
      </tags>
  </entry>
  <entry>
    <title>佳能好？还是尼康好？</title>
    <url>/2014/tutorial/select-the-camera/</url>
    <content><![CDATA[<p>购买相机“佳能好还是尼康好”，有学摄影的学生、家庭用户、摄影爱好者，有要卡片机的，也有买单反的。佳能、尼康是在国内摄影器材销售量数一数二的产品，到底谁好？您可以从以下几个方面去考虑。</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul>
<li>每个人对摄影的偏好不一样，所以买相机前要对自己的用途有个定位。比如有的喜欢旅游，爱好风光摄影；有的喜欢人像，喜欢给家人拍照，有了定位我们来说下特点：佳能的色调偏暖，就是出来的片子会偏红；尼康的色调偏冷，片子出来后会偏青。也就是拍风光用尼康拍的更山清水秀，爱拍人像的用佳能白里透红。</li>
</ul>
<h2 id="喜好"><a href="#喜好" class="headerlink" title="喜好"></a>喜好</h2><ul>
<li>佳能的成像柔点，尼康的成像锐点。比如同时拍一张人像，佳能的拍出来脸部皮肤看着可能很光滑，尼康就会把斑点、发丝都给拍出来，这样就看自己的喜好了，要是不 PS 估计很多 MM 接受不了尼康给自己拍脸了，也有可能需要的就是发丝的这个锐度。</li>
</ul>
<h2 id="配件（指单反用户）"><a href="#配件（指单反用户）" class="headerlink" title="配件（指单反用户）"></a>配件（指单反用户）</h2><ul>
<li>买了机身没有镜头是不能用的。NIKON 是多年研究光学产品的专家,镜头的价格也是相对便宜点（不包刮 07 年 10 月反布的 5 款新镜头）；Canon 具有高科技的产品手法，L 头更是现在专业摄影届必不可少的利器，价格当然也是很高。</li>
</ul>
<span id="more"></span>

<h2 id="周边环境（指单反用户）"><a href="#周边环境（指单反用户）" class="headerlink" title="周边环境（指单反用户）"></a>周边环境（指单反用户）</h2><ul>
<li>现在单反价格很低普通用户都可以买的起，高档的配件除非是专业摄影者，如果普通消费级玩家大多是互相借用一些镜头与设备来找到乐趣。由于 Nikon 与 Canon 的一些设备之间不兼容，有时候为了方便可以考虑下看看朋友们都用什么机器可以互借着用。不过，在行内，对超级爱好者和专业用户有这样一句话（老婆和器材概不外借）。</li>
</ul>
<h2 id="性价比"><a href="#性价比" class="headerlink" title="性价比"></a>性价比</h2><ul>
<li>Nikon 与 Canon 两个厂商都是数码单反的老字号，当前市场价格非常透明，一分价钱一分货，贵有贵的道理。根据个人的经济能力，量力而行，要相信市场时间是对质量的一种考验，一样数码单反投放到市场中通过一段时间市场的考验，有的会跌，有的很坚挺，从这点也可以证明些道理。</li>
</ul>
<p>到底哪个好？情人眼里出西施，只有适合自己用的才叫好（别听人说），选机的朋友可以从以上几点去选择。关于尼康和佳能哪个好，全球人类讨论了几十年，还是没有一个结果，现在没结果，将来我们也希望不会有结果，它们两大厂家明争暗斗，受益的是我们消费者。引句摄友之间一句经典的话：“如果佳能、尼康不知道怎么选，就抛硬币来决定吧！无论你是买了哪个，你都会爱上它的！”</p>
<p>实际尼康，佳能都是非常好的品牌。应该说尼康的主力产品集中在单反领域，而佳能则是全能无论是家用还是单反都有很强的竞争力。单反领域，应该说总体来看尼康和佳能各有特色，但是同样机皇之间的 Pk 佳能占有明显的技术优势。佳能都有自己的整个产业链和知识产权，而尼康则不能全部掌握全部的产业链，分类别来看，图像处理器佳能的最好，digi 3 处理器目前没有敌手，感光元件 现在新出的 1ds mark iii 达到全幅面 2000w 像素，镜头则各有长短，基本技术接近。</p>
<p>总体上看，一般认为顶端单反，佳能强。中端产品各有千秋，尼康性价比更高。低端都差不多。总体来看，选择单反还要在两家中选，没有第三个选择，要最牛的佳能里面选机皇，否则的尼康也是不错的选择。但是单反一般入了一家门很难入第二家，因为镜头决定了改换门庭的代价非常大。一定要慎重。</p>
<p>家用机而言，尼康佳能我认为都不错，但是尼康似乎不很重视家用机，系列比较少。一般人都喜欢选 sony，但是懂行的人一般都不会选择 sony,因为 ccd 质量最好的是富士的 super ccd，拍摄画质和相应速度则很大程度依赖于处理芯片和相关的软件，单从图像处理器角度看，目前佳能的图像处理器 digic ii&#x2F;iii 基本在同档次没有敌手。尼康和佳能对画质都比较重视，毕竟有高端单反的技术在那里。因此家用机还是要在佳能，尼康，富士里面选</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>数码</tag>
        <tag>单反</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影基础知识</title>
    <url>/2013/tutorial/the-photography-foundation/</url>
    <content><![CDATA[<h1 id="一、光圈快门及其相互关系"><a href="#一、光圈快门及其相互关系" class="headerlink" title="一、光圈快门及其相互关系"></a>一、光圈快门及其相互关系</h1><p>光圈是相机镜头中的可以改变中间孔的大小的机械装置，快门是控制曝光时间长短的装置（机械或电子），二者结合，共同控制曝光量。</p>
<p>举例来说，光线好比水流，镜头相当于一个可以控制水流方向和流量有水闸的的洞。光圈是洞的大小，快门是开闸的时间。</p>
<p>开闸时间一定时，洞越小，流入的水量就越少，反之就越多。当快门速度一定时，光圈合适（例如 f5.6)，曝光正常，光圈太大(例如 f2.8)，曝光过度，照片（冲洗后的正片，不是底片）就白花花一片，没有层次，甚至白纸一张；光圈太小(例如 f11)，曝光不足，照片黑糊糊的，损失低光部位层次甚至没有影像。</p>
<p>洞的大小一定时，开闸时间越长，流入的水量就越多，反之就越少。故当光圈一定时，快门速度合适(例如 1&#x2F;250 秒)，曝光正常，快门越满(例如 1&#x2F;60 秒)，曝光时间越长，曝光过度，快门速度越快(例如 1&#x2F;1000 秒)，曝光不足。</p>
<p>需要注意的时，虽然光圈和快门都能控制曝光量，其作用并不是等价的。光圈越小，光的走向越集中，到达胶片（或 CCD)成像时，越容易清晰成像，（当然，光圈过小时，会出现衍射，反而模糊）景深越大，反之越小。所以，当需要精确控制景深时，可以先确定光圈大小，再决定快门速度。当拍摄运动的物体时，如果快门开启时间太长，运动的物体在底片（或 CCD)的不同部位成像,拍出来的照片当然不清晰，反之，当快门速度很快时，动体在胶片上的成像还没有明显移动，曝光过程已经完成，照片就清晰，也就是把动体凝固在了画面上，所以当拍摄动体时，可选择尽量快的快门速度，然后调节光圈，正确曝光。当然，如果你想让动体在照片上留下运动轨迹，增强动感，可以选择比较慢的快门速度。</p>
<p>尤其重要的是闪光摄影，恰当选择快门和光圈，可以很好地控制闪光和其它光线的光比。由于现在广泛使用的电子闪光灯的闪光时间非常短，只有大约万分之一秒，所以，当快门速度与之同步(所谓同步，就是使闪光的时间落在快门完全开启后，关闭前的时间段内,否则，闪光时快门还没有完全打开，或已在关闭，闪光就没有意义了，甚至在底片的一部分上曝光，拍摄失败)以后，再延长曝光时间也没有效果了。所以，闪光灯的作用效果要靠光圈来控制，连续环境光（如夜景中的其它灯光）的作用要靠快门来控制，恰当选择曝光组合，可以创造完美的艺术效果。</p>
<h1 id="二、给初级拍摄者的十条好建议"><a href="#二、给初级拍摄者的十条好建议" class="headerlink" title="二、给初级拍摄者的十条好建议"></a>二、给初级拍摄者的十条好建议</h1><ol>
<li><p>在按下快门前，检查一下在被摄体后面，是否有一些东西影响被摄体的―头部‖（好像使它们伸长了）。树叉通常是始作俑者。看看两幅图像的比较，是不是这个道理呢？</p>
</li>
<li><p>墙壁等类似物体可以把闪光灯的光线反射到被摄体上。如果没有这样的物体，最好不要使用闪光灯。否则，拍出来的照片会很黑。典型的例子是在音乐会上，很多闪光的效果出不来，除非你是在舞台的边缘。</p>
</li>
<li><p>确定相机是否是平行或垂直于地面的。否则照片的看上去就是歪斜的，这是一个很难原谅的问题。</p>
</li>
<li><p>使主体与背景在影调或色调上有适当的差异，形成鲜明的对比。这可以通过调整光圈来实现。光圈越大，背景就越模糊，这可突出主体。当然，我们要根据实际情况来调节。</p>
</li>
</ol>
<span id="more"></span>

<ol start="5">
<li><p>在拍摄日落时，把闪光灯关掉，以免照片太昏暗了。</p>
</li>
<li><p>大部分相机都会对图像的中心区域聚焦。如果被摄体在焦点的两侧，相机的聚焦将会发生问题。一般相机都有聚焦锁定功能。你可以使用它把相机对准中心物体，这样她或他就会出现在照片的中央了。然后，半按下快门按钮。保持直到你确定成功了，就完全按下快门，这样可以得到锐利的图像。</p>
</li>
<li><p>通过窗口拍摄时，尽力使用相机的无限模式（如果有的话）。否则，聚焦系统可能认为玻璃是被摄体，图像就会很模糊。当拍摄高大的建筑物（通常有许多玻璃窗）或里面的物体时，这是很有用的。</p>
</li>
<li><p>尽量做到随身携带相Ｒ蛭楦械某鱿忠残碇皇羌该胫樱阌凹倚枰羧竦亩床炝 τ 肓榛畹姆从 αΑ：玫幕岢鱿至耍挥写嗷馐嵌嗝匆藕兜氖虑矩。?</p>
</li>
<li><p>尽量不要在海滩上使用相机，除非它有一个坚固的外包装保护相机。与沙土任何亲密的接触都会导致相机堵塞。</p>
</li>
<li><p>当在较暗的室内如酒吧或俱乐部拍摄人像时，你一般会用到闪光灯。那么，你不妨在拍摄前让他们先看一会明亮的光源。这样可以减少红眼现象。</p>
</li>
</ol>
<h1 id="三、B-门下的奇妙世界-活用长时间曝光"><a href="#三、B-门下的奇妙世界-活用长时间曝光" class="headerlink" title="三、B 门下的奇妙世界(活用长时间曝光)"></a>三、B 门下的奇妙世界(活用长时间曝光)</h1><p>“B 门”下的奇妙世界 “B 门”，在相机正向超级自动化方向发展的今天，简直显得有点原始!这是一种完全由摄影者所控制的曝光方式，也是一种个人创作的过程。</p>
<p>“B 门”的 B 在字典上原意是 Bulb，是指以往的那种用手操作的球状气动快门释放器，或是在闪光曝光中利用的闪光灯泡。然而，稍有创造性的摄影家们都认为，”B“实际上是 Boundless(无限制)的代名词。</p>
<p>“B 门”与其他快门速度不一样，摄影者可以使用它在 1 秒之外的任何时间控制快门的开关，藉此走进幻想的世界。当你进入“Brl”的领域后，便可以看到传统照片以外的奇异景象，例如夜空里星星的轨迹，彩虹般的光影，没有人的街景以及带着光辉的天空…</p>
<p>使用 B 门摄影的基本要求，是一架具有 B 门可以使快门开启作长时间曝光的相机，一个较为稳固的三脚架以及一个手动快门线。拍摄时，最好有一个超灵敏度的手持测光表，因为许多相机的内置测光表都不能在拍摄时对可能出现的黑暗场面正确地测出光量。（没有的话也没所谓，拍多几张罗。）对 B 门摄影有经验的摄影家，往往建议在拍摄时尽可能作分级曝光，因为这样可使效果有较多的变化。他们也承认，虽然最成功的 Brl 曝光往往来自灵感的推测，但一个较灵敏的测光表至少能为分级曝光提供一个基础。</p>
<p>擅长拍摄夜景的摄影家们指出，使用 B 门在结束长时间曝光时，要使相机不抖动，其中一个最好的方法，是在释放快门前，用一块黑色的硬纸板，靠在镜头前。这种方法还有一个优点，使你可以在曝光过程中改变焦距或者光圈。如果在调校时，偶然使相机发生抖动，则在继续进行曝光前，必须要确定相机已经停止抖动，这一点对于使用较长焦距镜头拍摄对尤为重要。</p>
<p>使用 B 门作长时间曝光，容易产生的问题是摄影家常说的所谓”倒易律失效”。这种情况通常在使用彩色胶片曝光一秒至更长时间时发生。从根本上来说，长时间曝光能使胶片的色彩平衡改变，而对这种现象的出现，摄影者们往往是很难预料的。</p>
<p>一般来说，没有什么简单的办法可以解决倒易律失效的问题，使每次拍摄都能得到准确的曝光。英国摄影家戴维·威廉斯提出一种简易的做法，这就是，”在经过计算的曝光量的基础上，用更长的曝光时间多拍几张”。</p>
<p>威廉斯指出，作长时间曝光对，必须对每张照片所用的曝光时间和光圈作记录。此外还可以用各种曝光指数进行试拍，以弥补倒易律失效引起的不足。</p>
<p>一种方法是增加总曝光量，对于 1—9 秒的曝光增加 1／2 一 l 级光圈；对于 10—99 秒的曝光增加 1—2 级光圈；曝光 100 秒以上者增加 2—3 级光圈。类似这样的指数是指一般情况而论，不能把它当作是一成不变的东西，尤其是运用不同的胶片时，应视具体情况而定。</p>
<p>总之，要解决倒易律失效问题，主要是靠试验，并通过将记录的内容和所获得结果进行反覆比较，逐步在实践中摸索出一些经验来。</p>
<p>拿起你的相机吧，别再犹豫啦！</p>
<h1 id="四、建筑摄影的一些技巧"><a href="#四、建筑摄影的一些技巧" class="headerlink" title="四、建筑摄影的一些技巧"></a>四、建筑摄影的一些技巧</h1><p>建筑摄影并不一定要有完整的图像或规矩的构图，任何一个独特的视角和亮丽的细节都可以造就一张精彩的建筑照片。</p>
<p>将不同的拍摄角度与光线完美地结合起来，绝对可以将中世纪房屋拍摄成非常专业的建筑图片。进行建筑摄影进，最好按照设计师的规划，处理好建筑体积和几何比例――垂直线条在照片上也应该是垂直的。当相机镜头朝上时，相同的线条便会呈汇聚趋势，摄影师站得位置离建筑越近，这个效果就越明显，可以使用广角镜头对这种效果进行夸大，效果非常强烈。</p>
<p>采用广角镜头拍摄建筑物内部构造，而用远摄镜头还可将房屋或建筑物与背景分离开来，强调某个细节。有两个很吸引人的角度是极低的相机机位和鱼眼视角。任何极端水平或垂直的拍摄角度都可以拍摄出令人惊叹的照片来。</p>
<p>在人像和风景摄影中，摄影师经常使用相机的全景拍摄设置，进行建筑摄影时也可以考虑使用全景，有时候，全景照片能很好地表现古典建筑。</p>
<p>无论如何，建筑摄影都要有正确的照明，这样才能保证拍出的照片不会是败笔。因此，作为一个专心拍摄建筑的摄影师而言，很有必要对不同质地、不同表面、不同结构的建筑物进行把握，比如玻璃房和土楼的色彩效果就是不一样的。根据观察的结果，你可以选择最能表达建筑物色彩的时候：清早、下午或黄昏。</p>
<p>一年中不同时间的拍照效果也是有所不同的：夏天拍摄的照片有很强的情感色彩，冬天的风景适合于表达黑白抽象画，秋天时拍摄旧时年代的建筑物比较好。</p>
<p>室内曝光和夜景拍摄比较复杂是众所周知的，拍摄这样的场景可能要费上一整卷的胶片。选择不同的胶片也会影响到你所拍摄的建筑照片的最终效果。</p>
<p>建筑摄影并不是一定要去拍摄宏大的建筑，我们平时所见到的街景、民房都可以成为建筑摄影的对象。关键是要有好的色彩和独特的角度。而有些时候，黑白照片往往也能表达另样的建筑摄影效果――尤其适合于拍摄旧建筑。</p>
]]></content>
      <categories>
        <category>爱摄影</category>
      </categories>
      <tags>
        <tag>玩单反</tag>
      </tags>
  </entry>
</search>
